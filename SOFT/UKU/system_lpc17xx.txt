; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\system_lpc17xx.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\system_lpc17xx.d --feedback=.\EXE\UKU2071x_GALV_IBv2_WG12232L3.fed --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 -DWG12232L3 --omf_browse=.\EXE\system_lpc17xx.crf system_LPC17xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;408     */
;;;409    void SystemInit (void)
000000  b530              PUSH     {r4,r5,lr}
;;;410    {
;;;411    #if (CLOCK_SETUP)                       /* Clock Setup                        */
;;;412      LPC_SC->SCS       = SCS_Val;
000002  484e              LDR      r0,|L1.316|
000004  2120              MOVS     r1,#0x20
000006  f8c011a0          STR      r1,[r0,#0x1a0]
;;;413      if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
;;;414        while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
00000a  bf00              NOP      
                  |L1.12|
00000c  f8d011a0          LDR      r1,[r0,#0x1a0]
000010  0649              LSLS     r1,r1,#25
000012  d5fb              BPL      |L1.12|
;;;415      }
;;;416    
;;;417      LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
000014  f1000080          ADD      r0,r0,#0x80
000018  2203              MOVS     r2,#3
00001a  f8c02084          STR      r2,[r0,#0x84]
;;;418    
;;;419      LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
00001e  f44f3100          MOV      r1,#0x20000
000022  f8c01128          STR      r1,[r0,#0x128]
;;;420      LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
000026  f04f0100          MOV      r1,#0
00002a  f8c0112c          STR      r1,[r0,#0x12c]
;;;421    
;;;422    #if (PLL0_SETUP)
;;;423      LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
00002e  f04f0301          MOV      r3,#1
000032  f8c0308c          STR      r3,[r0,#0x8c]
;;;424      LPC_SC->PLL0CFG   = PLL0CFG_Val;
000036  4c42              LDR      r4,|L1.320|
000038  6044              STR      r4,[r0,#4]
;;;425      LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
00003a  6003              STR      r3,[r0,#0]
;;;426      LPC_SC->PLL0FEED  = 0xAA;
00003c  f04f03aa          MOV      r3,#0xaa
000040  60c3              STR      r3,[r0,#0xc]
;;;427      LPC_SC->PLL0FEED  = 0x55;
000042  f04f0455          MOV      r4,#0x55
000046  60c4              STR      r4,[r0,#0xc]
000048  f1a00080          SUB      r0,r0,#0x80
                  |L1.76|
;;;428      while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
00004c  f8d05088          LDR      r5,[r0,#0x88]
000050  016d              LSLS     r5,r5,#5
000052  d5fb              BPL      |L1.76|
;;;429    
;;;430      LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
000054  f8402f80          STR      r2,[r0,#0x80]!
;;;431      LPC_SC->PLL0FEED  = 0xAA;
000058  60c3              STR      r3,[r0,#0xc]
;;;432      LPC_SC->PLL0FEED  = 0x55;
00005a  60c4              STR      r4,[r0,#0xc]
;;;433    #endif
;;;434    
;;;435    #if (PLL1_SETUP)
;;;436      LPC_SC->PLL1CFG   = PLL1CFG_Val;
;;;437      LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
;;;438      LPC_SC->PLL1FEED  = 0xAA;
;;;439      LPC_SC->PLL1FEED  = 0x55;
;;;440      while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
;;;441    
;;;442      LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
;;;443      LPC_SC->PLL1FEED  = 0xAA;
;;;444      LPC_SC->PLL1FEED  = 0x55;
;;;445    #else
;;;446      LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
00005c  f8c01088          STR      r1,[r0,#0x88]
;;;447    #endif
;;;448    
;;;449      LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
000060  4a38              LDR      r2,|L1.324|
000062  6442              STR      r2,[r0,#0x44]
;;;450    
;;;451      LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
000064  f8c01148          STR      r1,[r0,#0x148]
;;;452    #endif
;;;453    
;;;454      /* Determine clock frequency according to clock register values             */
;;;455      if (((LPC_SC->PLL0STAT >> 24)&3)==3) {/* If PLL0 enabled and connected      */
000068  6881              LDR      r1,[r0,#8]
00006a  f1a00080          SUB      r0,r0,#0x80
00006e  ea6f6111          MVN      r1,r1,LSR #24
000072  078a              LSLS     r2,r1,#30
;;;456        switch (LPC_SC->CLKSRCSEL & 0x03) {
;;;457          case 0:                           /* Internal RC oscillator => PLL0     */
;;;458          case 3:                           /* Reserved, default to Internal RC   */
;;;459            SystemFrequency = (IRC_OSC * 
000074  4934              LDR      r1,|L1.328|
;;;460                              (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;461                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;462                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;463            break;
;;;464          case 1:                           /* Main oscillator => PLL0            */
;;;465            SystemFrequency = (OSC_CLK * 
;;;466                              (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;467                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;468                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;469            break;
;;;470          case 2:                           /* RTC oscillator => PLL0             */
;;;471            SystemFrequency = (RTC_CLK * 
;;;472                              (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;473                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;474                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;475            break;
;;;476        }
;;;477      } else {
;;;478        switch (LPC_SC->CLKSRCSEL & 0x03) {
000076  f8d0210c          LDR      r2,[r0,#0x10c]
00007a  f0020203          AND      r2,r2,#3
00007e  d007              BEQ      |L1.144|
000080  b392              CBZ      r2,|L1.232|
000082  2a01              CMP      r2,#1
000084  d046              BEQ      |L1.276|
000086  2a02              CMP      r2,#2
000088  d04a              BEQ      |L1.288|
00008a  2a03              CMP      r2,#3
00008c  d151              BNE      |L1.306|
00008e  e03b              B        |L1.264|
                  |L1.144|
000090  b12a              CBZ      r2,|L1.158|
000092  2a01              CMP      r2,#1                 ;456
000094  d011              BEQ      |L1.186|
000096  2a02              CMP      r2,#2                 ;456
000098  d027              BEQ      |L1.234|
00009a  2a03              CMP      r2,#3                 ;456
00009c  d149              BNE      |L1.306|
                  |L1.158|
00009e  f8502f88          LDR      r2,[r0,#0x88]!        ;459
0000a2  f3c2020e          UBFX     r2,r2,#0,#15          ;459
0000a6  1c52              ADDS     r2,r2,#1              ;459
0000a8  0053              LSLS     r3,r2,#1              ;459
0000aa  6802              LDR      r2,[r0,#0]            ;459
0000ac  f3c24207          UBFX     r2,r2,#16,#8          ;459
0000b0  1c52              ADDS     r2,r2,#1              ;459
0000b2  fbb3f2f2          UDIV     r2,r3,r2              ;459
0000b6  4b25              LDR      r3,|L1.332|
0000b8  e00c              B        |L1.212|
                  |L1.186|
0000ba  f8502f88          LDR      r2,[r0,#0x88]!        ;465
0000be  f3c2020e          UBFX     r2,r2,#0,#15          ;465
0000c2  1c52              ADDS     r2,r2,#1              ;465
0000c4  0053              LSLS     r3,r2,#1              ;465
0000c6  6802              LDR      r2,[r0,#0]            ;465
0000c8  f3c24207          UBFX     r2,r2,#16,#8          ;465
0000cc  1c52              ADDS     r2,r2,#1              ;465
0000ce  fbb3f2f2          UDIV     r2,r3,r2              ;465
0000d2  4b1f              LDR      r3,|L1.336|
                  |L1.212|
0000d4  435a              MULS     r2,r3,r2              ;459
0000d6  6fc3              LDR      r3,[r0,#0x7c]         ;459
0000d8  f1a00088          SUB      r0,r0,#0x88           ;459
0000dc  b2db              UXTB     r3,r3                 ;459
0000de  f1030301          ADD      r3,r3,#1              ;459
0000e2  fbb2f2f3          UDIV     r2,r2,r3              ;459
0000e6  e023              B        |L1.304|
                  |L1.232|
0000e8  e00e              B        |L1.264|
                  |L1.234|
0000ea  f8502f88          LDR      r2,[r0,#0x88]!        ;471
0000ee  f3c2020e          UBFX     r2,r2,#0,#15          ;471
0000f2  1c52              ADDS     r2,r2,#1              ;471
0000f4  0053              LSLS     r3,r2,#1              ;471
0000f6  6802              LDR      r2,[r0,#0]            ;471
0000f8  f3c24207          UBFX     r2,r2,#16,#8          ;471
0000fc  1c52              ADDS     r2,r2,#1              ;471
0000fe  fbb3f2f2          UDIV     r2,r3,r2              ;471
000102  f44f43fa          MOV      r3,#0x7d00            ;471
000106  e7e5              B        |L1.212|
                  |L1.264|
;;;479          case 0:                           /* Internal RC oscillator => PLL0     */
;;;480          case 3:                           /* Reserved, default to Internal RC   */
;;;481            SystemFrequency = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000108  f8d02104          LDR      r2,[r0,#0x104]
00010c  4b0f              LDR      r3,|L1.332|
00010e  b2d2              UXTB     r2,r2
000110  1c52              ADDS     r2,r2,#1
;;;482            break;
000112  e00b              B        |L1.300|
                  |L1.276|
;;;483          case 1:                           /* Main oscillator => PLL0            */
;;;484            SystemFrequency = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000114  f8d02104          LDR      r2,[r0,#0x104]
000118  4b0d              LDR      r3,|L1.336|
00011a  b2d2              UXTB     r2,r2
00011c  1c52              ADDS     r2,r2,#1
;;;485            break;
00011e  e005              B        |L1.300|
                  |L1.288|
;;;486          case 2:                           /* RTC oscillator => PLL0             */
;;;487            SystemFrequency = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000120  f8d02104          LDR      r2,[r0,#0x104]
000124  f44f43fa          MOV      r3,#0x7d00
000128  b2d2              UXTB     r2,r2
00012a  1c52              ADDS     r2,r2,#1
                  |L1.300|
00012c  fbb3f2f2          UDIV     r2,r3,r2
                  |L1.304|
000130  600a              STR      r2,[r1,#0]  ; SystemFrequency
                  |L1.306|
;;;488            break;
;;;489        }
;;;490      }
;;;491    
;;;492    #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
;;;493      LPC_SC->FLASHCFG  = FLASHCFG_Val;
000132  f243013a          MOV      r1,#0x303a
000136  6001              STR      r1,[r0,#0]
;;;494    #endif
;;;495    }
000138  bd30              POP      {r4,r5,pc}
                          ENDP

00013a  0000              DCW      0x0000
                  |L1.316|
                          DCD      0x400fc000
                  |L1.320|
                          DCD      0x0003004f
                  |L1.324|
                          DCD      0x4000f14a
                  |L1.328|
                          DCD      ||.data||
                  |L1.332|
                          DCD      0x003d0900
                  |L1.336|
                          DCD      0x00989680

                          AREA ||.data||, DATA, ALIGN=2

                  SystemFrequency
                          DCD      0x003d0900

;*** Start embedded assembler ***

#line 1 "system_LPC17xx.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_system_LPC17xx_c_6b61f0cc____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_system_LPC17xx_c_6b61f0cc____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_system_LPC17xx_c_6b61f0cc____REVSH|
#line 130
|__asm___16_system_LPC17xx_c_6b61f0cc____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
