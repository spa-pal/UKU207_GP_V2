; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\avar_hndl.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\avar_hndl.d --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 -DWG12232A --omf_browse=.\EXE\avar_hndl.crf avar_hndl.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  avar_hndl PROC
;;;56     //-----------------------------------------------
;;;57     void avar_hndl(void)
000000  b570              PUSH     {r4-r6,lr}
;;;58     {
;;;59     //static unsigned avar_stat_old;
;;;60     char i;
;;;61     //unsigned avar_stat_new,avar_stat_offed;
;;;62     
;;;63     if(net_av)		SET_REG(avar_stat,1,0,1);
000002  48d7              LDR      r0,|L1.864|
000004  7802              LDRB     r2,[r0,#0]  ; net_av
000006  48d7              LDR      r0,|L1.868|
000008  6801              LDR      r1,[r0,#0]
00000a  b112              CBZ      r2,|L1.18|
00000c  f0410101          ORR      r1,r1,#1
000010  e001              B        |L1.22|
                  |L1.18|
;;;64     else	   			SET_REG(avar_stat,0,0,1);
000012  f0210101          BIC      r1,r1,#1
                  |L1.22|
;;;65     
;;;66     
;;;67     for(i=0;i<12;i++)
000016  6001              STR      r1,[r0,#0]  ; avar_stat
000018  2100              MOVS     r1,#0
;;;68     	{
;;;69     	if(bps[i]._av)	SET_REG(avar_stat,1,3+i,1);
00001a  4cd3              LDR      r4,|L1.872|
00001c  f05f0301          MOVS.W   r3,#1
                  |L1.32|
000020  ebc102c1          RSB      r2,r1,r1,LSL #3
000024  eb020242          ADD      r2,r2,r2,LSL #1
000028  eb040282          ADD      r2,r4,r2,LSL #2
00002c  7852              LDRB     r2,[r2,#1]
00002e  b132              CBZ      r2,|L1.62|
000030  1ccd              ADDS     r5,r1,#3
000032  fa03f205          LSL      r2,r3,r5
000036  6805              LDR      r5,[r0,#0]  ; avar_stat
000038  4395              BICS     r5,r5,r2
00003a  4315              ORRS     r5,r5,r2
00003c  e004              B        |L1.72|
                  |L1.62|
;;;70     	else	   		SET_REG(avar_stat,0,3+i,1);
00003e  1cca              ADDS     r2,r1,#3
000040  6805              LDR      r5,[r0,#0]  ; avar_stat
000042  fa03f202          LSL      r2,r3,r2
000046  4395              BICS     r5,r5,r2
                  |L1.72|
000048  1c49              ADDS     r1,r1,#1              ;67
00004a  b2c9              UXTB     r1,r1                 ;67
00004c  6005              STR      r5,[r0,#0]            ;67  ; avar_stat
00004e  290c              CMP      r1,#0xc               ;67
000050  d3e6              BCC      |L1.32|
;;;71     	}
;;;72     
;;;73     for(i=0;i<6;i++)
;;;74     	{
;;;75     	if(av_inv[i])	SET_REG(avar_stat,1,15+i,1);
;;;76     	else	   		SET_REG(avar_stat,0,15+i,1);
000052  4629              MOV      r1,r5
000054  4dc3              LDR      r5,|L1.868|
000056  2200              MOVS     r2,#0                 ;73
000058  3514              ADDS     r5,r5,#0x14           ;75
                  |L1.90|
00005a  5cac              LDRB     r4,[r5,r2]            ;75
00005c  b134              CBZ      r4,|L1.108|
00005e  f102060f          ADD      r6,r2,#0xf            ;75
000062  fa03f406          LSL      r4,r3,r6              ;75
000066  43a1              BICS     r1,r1,r4              ;75
000068  4321              ORRS     r1,r1,r4              ;75
00006a  e004              B        |L1.118|
                  |L1.108|
00006c  f102040f          ADD      r4,r2,#0xf
000070  fa03f404          LSL      r4,r3,r4
000074  43a1              BICS     r1,r1,r4
                  |L1.118|
000076  1c52              ADDS     r2,r2,#1              ;73
000078  b2d2              UXTB     r2,r2                 ;73
00007a  2a06              CMP      r2,#6                 ;73
00007c  d3ed              BCC      |L1.90|
;;;77     	}
;;;78     
;;;79     /*for(i=0;i<4;i++)
;;;80     	{
;;;81     	if(av_dt[i])	SET_REG(avar_stat,1,21+i,1);
;;;82     	else	   		SET_REG(avar_stat,0,21+i,1);
;;;83     	}  */
;;;84     for(i=0;i<4;i++)
;;;85     	{
;;;86     	if(sk_av_stat[i]==sasON)	SET_REG(avar_stat,1,25+i,1);
00007e  4dbb              LDR      r5,|L1.876|
000080  2200              MOVS     r2,#0                 ;84
000082  6001              STR      r1,[r0,#0]  ; avar_stat
                  |L1.132|
000084  5cac              LDRB     r4,[r5,r2]
000086  2c01              CMP      r4,#1
;;;87     	else	   		SET_REG(avar_stat,0,25+i,1);
000088  f1020419          ADD      r4,r2,#0x19
00008c  fa03f404          LSL      r4,r3,r4
000090  ea210104          BIC      r1,r1,r4
000094  d100              BNE      |L1.152|
000096  4321              ORRS     r1,r1,r4              ;86
                  |L1.152|
000098  1c52              ADDS     r2,r2,#1              ;84
00009a  b2d2              UXTB     r2,r2                 ;84
00009c  2a04              CMP      r2,#4                 ;84
00009e  d3f1              BCC      |L1.132|
;;;88     	}
;;;89     
;;;90     avar_stat_new=(avar_stat^avar_stat_old)&avar_stat;
0000a0  6001              STR      r1,[r0,#0]  ; avar_stat
0000a2  6883              LDR      r3,[r0,#8]  ; avar_stat_old
0000a4  ea210203          BIC      r2,r1,r3
;;;91     
;;;92     avar_ind_stat|=avar_stat_new;
0000a8  60c2              STR      r2,[r0,#0xc]  ; avar_stat_new
0000aa  6844              LDR      r4,[r0,#4]  ; avar_ind_stat
0000ac  4314              ORRS     r4,r4,r2
;;;93     
;;;94     if((SK_ZVUK_EN[0])) avar_ind_stat&=(~(1UL<<25));
0000ae  4ab0              LDR      r2,|L1.880|
0000b0  6044              STR      r4,[r0,#4]  ; avar_ind_stat
0000b2  8815              LDRH     r5,[r2,#0]  ; SK_ZVUK_EN
0000b4  b115              CBZ      r5,|L1.188|
0000b6  f0247400          BIC      r4,r4,#0x2000000
0000ba  6044              STR      r4,[r0,#4]  ; avar_ind_stat
                  |L1.188|
;;;95     if((SK_ZVUK_EN[1])) avar_ind_stat&=(~(1UL<<26));
0000bc  8854              LDRH     r4,[r2,#2]  ; SK_ZVUK_EN
0000be  b11c              CBZ      r4,|L1.200|
0000c0  6844              LDR      r4,[r0,#4]  ; avar_ind_stat
0000c2  f0246480          BIC      r4,r4,#0x4000000
0000c6  6044              STR      r4,[r0,#4]  ; avar_ind_stat
                  |L1.200|
;;;96     if((SK_ZVUK_EN[2])) avar_ind_stat&=(~(1UL<<27));
0000c8  8894              LDRH     r4,[r2,#4]  ; SK_ZVUK_EN
0000ca  b11c              CBZ      r4,|L1.212|
0000cc  6844              LDR      r4,[r0,#4]  ; avar_ind_stat
0000ce  f0246400          BIC      r4,r4,#0x8000000
0000d2  6044              STR      r4,[r0,#4]  ; avar_ind_stat
                  |L1.212|
;;;97     if((SK_ZVUK_EN[3])) avar_ind_stat&=(~(1UL<<28));	
0000d4  88d2              LDRH     r2,[r2,#6]  ; SK_ZVUK_EN
0000d6  b11a              CBZ      r2,|L1.224|
0000d8  6842              LDR      r2,[r0,#4]  ; avar_ind_stat
0000da  f0225280          BIC      r2,r2,#0x10000000
0000de  6042              STR      r2,[r0,#4]  ; avar_ind_stat
                  |L1.224|
;;;98     
;;;99     
;;;100    avar_stat_offed=~((avar_stat^avar_stat_old)&avar_stat_old);
0000e0  438b              BICS     r3,r3,r1
0000e2  43da              MVNS     r2,r3
;;;101    
;;;102    if(!AV_OFF_AVT)avar_stat_offed|=0xfffffffe;
0000e4  4ba3              LDR      r3,|L1.884|
0000e6  6102              STR      r2,[r0,#0x10]  ; avar_stat_offed
0000e8  881b              LDRH     r3,[r3,#0]  ; AV_OFF_AVT
0000ea  b913              CBNZ     r3,|L1.242|
0000ec  f0620201          ORN      r2,r2,#1
0000f0  6102              STR      r2,[r0,#0x10]  ; avar_stat_offed
                  |L1.242|
;;;103    
;;;104    avar_ind_stat&=avar_stat_offed; 
0000f2  6903              LDR      r3,[r0,#0x10]  ; avar_stat_offed
0000f4  6842              LDR      r2,[r0,#4]  ; avar_ind_stat
0000f6  401a              ANDS     r2,r2,r3
0000f8  e9c02101          STRD     r2,r1,[r0,#4]
;;;105    
;;;106    avar_stat_old=avar_stat;
;;;107    }
0000fc  bd70              POP      {r4-r6,pc}
;;;108    
                          ENDP

                  avar_bps_hndl PROC
;;;113    //-----------------------------------------------
;;;114    void avar_bps_hndl(char dev, char v, char in)
0000fe  e92d4ff8          PUSH     {r3-r11,lr}
;;;115    {
000102  4607              MOV      r7,r0
;;;116    char data[4];
;;;117    unsigned short event_ptr=0,lc640_adr=0,event_ptr_find=0,event_cnt;
000104  2000              MOVS     r0,#0
000106  4680              MOV      r8,r0
000108  4605              MOV      r5,r0
00010a  4604              MOV      r4,r0
;;;118    char avar_simbol;
;;;119    
;;;120    avar_simbol='T';
00010c  2654              MOVS     r6,#0x54
;;;121    if(v==0)avar_simbol='T';
00010e  b159              CBZ      r1,|L1.296|
;;;122    else if(v==1)avar_simbol='U';
000110  2901              CMP      r1,#1
000112  d004              BEQ      |L1.286|
;;;123    else if(v==2)avar_simbol='u';
000114  2902              CMP      r1,#2
000116  d004              BEQ      |L1.290|
;;;124    else if(v==3)avar_simbol='L';
000118  2903              CMP      r1,#3
00011a  d004              BEQ      |L1.294|
00011c  e004              B        |L1.296|
                  |L1.286|
00011e  2655              MOVS     r6,#0x55              ;122
000120  e002              B        |L1.296|
                  |L1.290|
000122  2675              MOVS     r6,#0x75              ;123
000124  e000              B        |L1.296|
                  |L1.294|
000126  264c              MOVS     r6,#0x4c
                  |L1.296|
;;;125    
;;;126    if(in==1)
;;;127    	{
;;;128    	//av_src[bps]=1;
;;;129    
;;;130    //	SET_REG(avar_ind_stat,1,3+dev,1);
;;;131    //	SET_REG(avar_stat,1,3+dev,1);
;;;132    	
;;;133    	if(v==0)bps[dev]._av|=(1<<0);
000128  488f              LDR      r0,|L1.872|
00012a  ebc703c7          RSB      r3,r7,r7,LSL #3
;;;134    	else if(v==1) bps[dev]._av|=(1<<1);
;;;135    	else if(v==2) bps[dev]._av|=(1<<2);
;;;136    	else if(v==3) bps[dev]._av|=(1<<3);
;;;137    
;;;138    	bps[dev]._last_avar=v;
;;;139    
;;;140    	//beep_init(0x33333333,'A');
;;;141    
;;;142    //	event_ptr=lc640_read_int(PTR_EVENT_LOG);
;;;143    	event_ptr++;	
;;;144    	if(event_ptr>63)event_ptr=0;	
;;;145    //	lc640_write_int(PTR_EVENT_LOG,event_ptr);	
;;;146    	
;;;147         //event_cnt=lc640_read_int(CNT_EVENT_LOG);
;;;148    	if(event_cnt!=63)event_cnt=event_ptr;
;;;149    //	lc640_write_int(CNT_EVENT_LOG,event_cnt); 
;;;150    	
;;;151    	//lc640_adr=EVENT_LOG+(lc640_read_int(PTR_EVENT_LOG)*32);
;;;152    	
;;;153    	data[0]='S';
;;;154    	data[1]=dev; 
;;;155    	data[2]=avar_simbol;
;;;156    	data[3]=0;
;;;157    	lc640_write_long_ptr(lc640_adr,data);
;;;158    
;;;159    	data[0]=0;
;;;160    	data[1]=0;
;;;161    	data[2]=0;
;;;162    	data[3]=0;
;;;163    	lc640_write_long_ptr(lc640_adr+4,data);
;;;164    
;;;165    	data[0]=LPC_RTC->YEAR;
00012e  f8df9248          LDR      r9,|L1.888|
000132  eb030343          ADD      r3,r3,r3,LSL #1       ;133
000136  f04f0a00          MOV      r10,#0                ;117
00013a  eb000083          ADD      r0,r0,r3,LSL #2       ;133
00013e  2a01              CMP      r2,#1                 ;126
000140  d002              BEQ      |L1.328|
;;;166    	data[1]=LPC_RTC->MONTH;
;;;167    	data[2]=LPC_RTC->DOM;
;;;168    	data[3]=0;
;;;169    	lc640_write_long_ptr(lc640_adr+8,data);
;;;170    
;;;171    	data[0]=LPC_RTC->HOUR;
;;;172    	data[1]=LPC_RTC->MIN;
;;;173    	data[2]=LPC_RTC->SEC;
;;;174    	data[3]=0;
;;;175    	lc640_write_long_ptr(lc640_adr+12,data);
;;;176    	
;;;177    	data[0]='A';
;;;178    	data[1]='A';
;;;179    	data[2]='A';
;;;180    	data[3]='A';
;;;181    	lc640_write_long_ptr(lc640_adr+16,data);
;;;182    	
;;;183    	data[0]='A';
;;;184    	data[1]='A';
;;;185    	data[2]='A';
;;;186    	data[3]='A';
;;;187    	lc640_write_long_ptr(lc640_adr+20,data);
;;;188    	
;;;189    	data[0]='A';
;;;190    	data[1]='A';
;;;191    	data[2]='A';
;;;192    	data[3]='A';
;;;193    	lc640_write_long_ptr(lc640_adr+24,data);
;;;194    	
;;;195    	data[0]='A';
;;;196    	data[1]='A';
;;;197    	data[2]='A';
;;;198    	data[3]='A';
;;;199    	lc640_write_long_ptr(lc640_adr+28,data);		
;;;200    
;;;201    
;;;202    /* ---
;;;203    	if(dev==0)
;;;204    		{
;;;205    		if(v==0)
;;;206    		snmp_trap_send("BPS #1 Alarm, overheat",4,1,0);
;;;207    		else if(v==1)
;;;208    		snmp_trap_send("BPS #1 Alarm, voltage is up",4,1,1);
;;;209    		else if(v==2)
;;;210    		snmp_trap_send("BPS #1 Alarm, voltage is down",4,1,2);
;;;211    		else if(v==3)
;;;212    		snmp_trap_send("BPS #1 Alarm, connect is lost",4,1,3);
;;;213    		}
;;;214    	else if(dev==1)
;;;215    		{
;;;216    		if(v==0)
;;;217    		snmp_trap_send("BPS #2 Alarm, overheat",4,2,0);
;;;218    		else if(v==1)
;;;219    		snmp_trap_send("BPS #2 Alarm, voltage is up",4,2,1);
;;;220    		else if(v==2)
;;;221    		snmp_trap_send("BPS #2 Alarm, voltage is down",4,2,2);
;;;222    		else if(v==3)
;;;223    		snmp_trap_send("BPS #2 Alarm, connect is lost",4,2,3);
;;;224    		} 
;;;225    	else if(dev==2)
;;;226    		{
;;;227    		if(v==0)
;;;228    		snmp_trap_send("BPS #3 Alarm, overheat",4,3,0);
;;;229    		else if(v==1)
;;;230    		snmp_trap_send("BPS #3 Alarm, voltage is up",4,3,1);
;;;231    		else if(v==2)
;;;232    		snmp_trap_send("BPS #3 Alarm, voltage is down",4,3,2);
;;;233    		else if(v==3)
;;;234    		snmp_trap_send("BPS #3 Alarm, connect is lost",4,3,3);
;;;235    		} */	
;;;236    			
;;;237    	}
;;;238    
;;;239    else if(in==0)
000142  2a00              CMP      r2,#0
000144  d07e              BEQ      |L1.580|
000146  e102              B        |L1.846|
                  |L1.328|
000148  b131              CBZ      r1,|L1.344|
00014a  2901              CMP      r1,#1                 ;134
00014c  d008              BEQ      |L1.352|
00014e  2902              CMP      r1,#2                 ;135
000150  d00a              BEQ      |L1.360|
000152  2903              CMP      r1,#3                 ;136
000154  d00c              BEQ      |L1.368|
000156  e00f              B        |L1.376|
                  |L1.344|
000158  7842              LDRB     r2,[r0,#1]            ;133
00015a  f0420201          ORR      r2,r2,#1              ;133
00015e  e00a              B        |L1.374|
                  |L1.352|
000160  7842              LDRB     r2,[r0,#1]            ;134
000162  f0420202          ORR      r2,r2,#2              ;134
000166  e006              B        |L1.374|
                  |L1.360|
000168  7842              LDRB     r2,[r0,#1]            ;135
00016a  f0420204          ORR      r2,r2,#4              ;135
00016e  e002              B        |L1.374|
                  |L1.368|
000170  7842              LDRB     r2,[r0,#1]            ;136
000172  f0420208          ORR      r2,r2,#8              ;136
                  |L1.374|
000176  7042              STRB     r2,[r0,#1]            ;136
                  |L1.376|
000178  f880104f          STRB     r1,[r0,#0x4f]         ;138
00017c  2053              MOVS     r0,#0x53              ;153
00017e  f88d0000          STRB     r0,[sp,#0]            ;153
000182  f88d7001          STRB     r7,[sp,#1]            ;154
000186  f88d6002          STRB     r6,[sp,#2]            ;155
00018a  4655              MOV      r5,r10                ;156
00018c  f88da003          STRB     r10,[sp,#3]           ;156
000190  4669              MOV      r1,sp                 ;157
000192  4628              MOV      r0,r5                 ;157
000194  f7fffffe          BL       lc640_write_long_ptr
000198  4669              MOV      r1,sp                 ;163
00019a  2004              MOVS     r0,#4                 ;163
00019c  9500              STR      r5,[sp,#0]            ;163
00019e  f7fffffe          BL       lc640_write_long_ptr
0001a2  f8b9003c          LDRH     r0,[r9,#0x3c]         ;165
0001a6  f1090420          ADD      r4,r9,#0x20           ;163
0001aa  f88d0000          STRB     r0,[sp,#0]            ;165
0001ae  7e20              LDRB     r0,[r4,#0x18]         ;166
0001b0  f88d0001          STRB     r0,[sp,#1]            ;166
0001b4  7b20              LDRB     r0,[r4,#0xc]          ;167
0001b6  f88d0002          STRB     r0,[sp,#2]            ;167
0001ba  f88d5003          STRB     r5,[sp,#3]            ;168
0001be  4669              MOV      r1,sp                 ;169
0001c0  f04f0008          MOV      r0,#8                 ;169
0001c4  f7fffffe          BL       lc640_write_long_ptr
0001c8  7a20              LDRB     r0,[r4,#8]            ;171
0001ca  f88d0000          STRB     r0,[sp,#0]            ;171
0001ce  7920              LDRB     r0,[r4,#4]            ;172
0001d0  f88d0001          STRB     r0,[sp,#1]            ;172
0001d4  7820              LDRB     r0,[r4,#0]            ;173
0001d6  f88d0002          STRB     r0,[sp,#2]            ;173
0001da  f88d5003          STRB     r5,[sp,#3]            ;174
0001de  4669              MOV      r1,sp                 ;175
0001e0  200c              MOVS     r0,#0xc               ;175
0001e2  f7fffffe          BL       lc640_write_long_ptr
0001e6  2441              MOVS     r4,#0x41              ;177
0001e8  f88d4000          STRB     r4,[sp,#0]            ;177
0001ec  f88d4001          STRB     r4,[sp,#1]            ;178
0001f0  f88d4002          STRB     r4,[sp,#2]            ;179
0001f4  f88d4003          STRB     r4,[sp,#3]            ;180
0001f8  4669              MOV      r1,sp                 ;181
0001fa  2010              MOVS     r0,#0x10              ;181
0001fc  f7fffffe          BL       lc640_write_long_ptr
000200  f88d4000          STRB     r4,[sp,#0]            ;183
000204  f88d4001          STRB     r4,[sp,#1]            ;184
000208  f88d4002          STRB     r4,[sp,#2]            ;185
00020c  f88d4003          STRB     r4,[sp,#3]            ;186
000210  4669              MOV      r1,sp                 ;187
000212  2014              MOVS     r0,#0x14              ;187
000214  f7fffffe          BL       lc640_write_long_ptr
000218  f88d4000          STRB     r4,[sp,#0]            ;189
00021c  f88d4001          STRB     r4,[sp,#1]            ;190
000220  f88d4002          STRB     r4,[sp,#2]            ;191
000224  f88d4003          STRB     r4,[sp,#3]            ;192
000228  4669              MOV      r1,sp                 ;193
00022a  2018              MOVS     r0,#0x18              ;193
00022c  f7fffffe          BL       lc640_write_long_ptr
000230  f88d4000          STRB     r4,[sp,#0]            ;195
000234  f88d4001          STRB     r4,[sp,#1]            ;196
000238  f88d4002          STRB     r4,[sp,#2]            ;197
00023c  f88d4003          STRB     r4,[sp,#3]            ;198
000240  4669              MOV      r1,sp                 ;199
000242  e000              B        |L1.582|
                  |L1.580|
000244  e001              B        |L1.586|
                  |L1.582|
000246  201c              MOVS     r0,#0x1c              ;199
000248  e07f              B        |L1.842|
                  |L1.586|
;;;240    	{      
;;;241    //	av_bps[bps]=0;
;;;242    
;;;243    	//SET_REG(avar_stat,0,3+bps,1);
;;;244    	//if(AV_OFF_AVT) SET_REG(avar_ind_stat,0,3+bps,1);
;;;245    
;;;246         if(v==0) bps[dev]._av&=(~(1<<0));
00024a  b131              CBZ      r1,|L1.602|
;;;247         else if(v==1) bps[dev]._av&=(~(1<<1));
00024c  2901              CMP      r1,#1
00024e  d008              BEQ      |L1.610|
;;;248    	else if(v==2) bps[dev]._av&=(~(1<<2));
000250  2902              CMP      r1,#2
000252  d012              BEQ      |L1.634|
;;;249    	else if(v==3) bps[dev]._av&=(~(1<<3));
000254  2903              CMP      r1,#3
000256  d014              BEQ      |L1.642|
000258  e007              B        |L1.618|
                  |L1.602|
00025a  7841              LDRB     r1,[r0,#1]            ;246
00025c  f0210101          BIC      r1,r1,#1              ;246
000260  e002              B        |L1.616|
                  |L1.610|
000262  7841              LDRB     r1,[r0,#1]            ;247
000264  f0210102          BIC      r1,r1,#2              ;247
                  |L1.616|
000268  7041              STRB     r1,[r0,#1]            ;246
                  |L1.618|
;;;250         
;;;251    //	if((bps[dev]._av&0x0f==0))
;;;252    //	     {
;;;253    		//SET_REG(avar_stat,0,3+bps,1);
;;;254    		//if(AV_OFF_AVT) SET_REG(avar_ind_stat,0,3+bps,1);
;;;255    //	     }
;;;256     
;;;257    	//event_ptr=lc640_read_int(PTR_EVENT_LOG);
;;;258    //	event_ptr_find=event_ptr;
;;;259    	
;;;260    avar_src_hndl_lbl1: 
;;;261    
;;;262    	//lc640_adr=EVENT_LOG+(event_ptr_find*32);
;;;263    
;;;264         //lc640_read_long_ptr(lc640_adr,data);
;;;265         
;;;266         if(!((data[0]=='S')&&(data[1]==dev)&&(data[2]==avar_simbol)))
;;;267         	{        
;;;268         	if(event_ptr_find)event_ptr_find--;
;;;269         	else event_ptr_find=63;
;;;270         	if(event_ptr_find==event_ptr)goto avar_src_hndl_end;
;;;271         	else goto avar_src_hndl_lbl1;
;;;272         	}
;;;273         else 
;;;274         	{
;;;275         	lc640_read_long_ptr(lc640_adr+16,data);
00026a  f1050010          ADD      r0,r5,#0x10
00026e  4683              MOV      r11,r0
                  |L1.624|
000270  f89d0000          LDRB     r0,[sp,#0]            ;266
000274  2853              CMP      r0,#0x53              ;266
000276  d118              BNE      |L1.682|
000278  e007              B        |L1.650|
                  |L1.634|
00027a  7841              LDRB     r1,[r0,#1]            ;248
00027c  f0210104          BIC      r1,r1,#4              ;248
000280  e7f2              B        |L1.616|
                  |L1.642|
000282  7841              LDRB     r1,[r0,#1]            ;249
000284  f0210108          BIC      r1,r1,#8              ;249
000288  e7ee              B        |L1.616|
                  |L1.650|
00028a  f89d0001          LDRB     r0,[sp,#1]            ;266
00028e  42b8              CMP      r0,r7                 ;266
000290  d10b              BNE      |L1.682|
000292  f89d0002          LDRB     r0,[sp,#2]            ;266
000296  42b0              CMP      r0,r6                 ;266
000298  d107              BNE      |L1.682|
00029a  4669              MOV      r1,sp
00029c  4658              MOV      r0,r11
00029e  f7fffffe          BL       lc640_read_long_ptr
;;;276         	if(!((data[0]=='A')&&(data[1]=='A')&&(data[2]=='A')&&(data[3]=='A')))
0002a2  f89d0000          LDRB     r0,[sp,#0]
0002a6  2841              CMP      r0,#0x41
0002a8  d005              BEQ      |L1.694|
                  |L1.682|
0002aa  b3f4              CBZ      r4,|L1.810|
0002ac  1e64              SUBS     r4,r4,#1              ;268
0002ae  b2a4              UXTH     r4,r4                 ;268
;;;277         		{        
;;;278         		if(event_ptr_find)event_ptr_find--;
;;;279             		else event_ptr_find=63;
;;;280             		if(event_ptr_find==event_ptr)goto avar_src_hndl_end;
0002b0  4544              CMP      r4,r8
0002b2  d1dd              BNE      |L1.624|
0002b4  e04b              B        |L1.846|
                  |L1.694|
0002b6  f89d0001          LDRB     r0,[sp,#1]            ;276
0002ba  2841              CMP      r0,#0x41              ;276
0002bc  d1f5              BNE      |L1.682|
0002be  f89d0002          LDRB     r0,[sp,#2]            ;276
0002c2  2841              CMP      r0,#0x41              ;276
0002c4  d1f1              BNE      |L1.682|
0002c6  f89d0003          LDRB     r0,[sp,#3]            ;276
0002ca  2841              CMP      r0,#0x41              ;276
0002cc  d1ed              BNE      |L1.682|
;;;281         		else goto avar_src_hndl_lbl1;
;;;282         		}
;;;283    
;;;284         	}	
;;;285    
;;;286    
;;;287    	
;;;288    	data[0]=LPC_RTC->YEAR;
0002ce  f8b9003c          LDRH     r0,[r9,#0x3c]
0002d2  f1090420          ADD      r4,r9,#0x20           ;276
0002d6  f88d0000          STRB     r0,[sp,#0]
;;;289    	data[1]=LPC_RTC->MONTH;
0002da  7e20              LDRB     r0,[r4,#0x18]
0002dc  f88d0001          STRB     r0,[sp,#1]
;;;290    	data[2]=LPC_RTC->DOM;
0002e0  7b20              LDRB     r0,[r4,#0xc]
0002e2  f88d0002          STRB     r0,[sp,#2]
;;;291    	data[3]=0;
0002e6  4656              MOV      r6,r10
0002e8  f88da003          STRB     r10,[sp,#3]
;;;292    	lc640_write_long_ptr(lc640_adr+16,data);
0002ec  4669              MOV      r1,sp
0002ee  4658              MOV      r0,r11
0002f0  f7fffffe          BL       lc640_write_long_ptr
;;;293    
;;;294    	data[0]=LPC_RTC->HOUR;
0002f4  7a20              LDRB     r0,[r4,#8]
0002f6  f88d0000          STRB     r0,[sp,#0]
;;;295    	data[1]=LPC_RTC->MIN;
0002fa  7920              LDRB     r0,[r4,#4]
0002fc  f88d0001          STRB     r0,[sp,#1]
;;;296    	data[2]=LPC_RTC->SEC;
000300  7820              LDRB     r0,[r4,#0]
000302  f88d0002          STRB     r0,[sp,#2]
;;;297    	data[3]=0;
000306  f88d6003          STRB     r6,[sp,#3]
;;;298    	lc640_write_long_ptr(lc640_adr+20,data);
00030a  4669              MOV      r1,sp
00030c  f1050014          ADD      r0,r5,#0x14
000310  f7fffffe          BL       lc640_write_long_ptr
;;;299    	
;;;300    	data[0]='B';
000314  2442              MOVS     r4,#0x42
000316  f88d4000          STRB     r4,[sp,#0]
;;;301    	data[1]='B';
00031a  f88d4001          STRB     r4,[sp,#1]
;;;302    	data[2]='B';
00031e  f88d4002          STRB     r4,[sp,#2]
;;;303    	data[3]='B';
000322  f88d4003          STRB     r4,[sp,#3]
;;;304    	lc640_write_long_ptr(lc640_adr+24,data);
000326  4669              MOV      r1,sp
000328  e000              B        |L1.812|
                  |L1.810|
00032a  e013              B        |L1.852|
                  |L1.812|
00032c  f1050018          ADD      r0,r5,#0x18
000330  f7fffffe          BL       lc640_write_long_ptr
;;;305    	
;;;306    	data[0]='B';
000334  f88d4000          STRB     r4,[sp,#0]
;;;307    	data[1]='B';
000338  f88d4001          STRB     r4,[sp,#1]
;;;308    	data[2]='B';
00033c  f88d4002          STRB     r4,[sp,#2]
;;;309    	data[3]='B';
000340  f88d4003          STRB     r4,[sp,#3]
;;;310    	lc640_write_long_ptr(lc640_adr+28,data);
000344  4669              MOV      r1,sp
000346  f105001c          ADD      r0,r5,#0x1c
                  |L1.842|
00034a  f7fffffe          BL       lc640_write_long_ptr
                  |L1.846|
;;;311    	
;;;312    	}
;;;313    	
;;;314    avar_src_hndl_end:
;;;315    __nop();		
00034e  bf00              NOP      
;;;316    }
000350  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.852|
000354  243f              MOVS     r4,#0x3f              ;279
000356  e78b              B        |L1.624|
;;;317    
                          ENDP

                  wrk_mem_hndl PROC
;;;318    //-----------------------------------------------
;;;319    void wrk_mem_hndl(char b)
000358  4770              BX       lr
;;;320    {
;;;321    
;;;322    }  
;;;323    
                          ENDP

                  avar_bat_hndl PROC
;;;324    //-----------------------------------------------
;;;325    void avar_bat_hndl(char b, char in)
00035a  4770              BX       lr
;;;326    {
;;;327    	
;;;328    }
;;;329    
                          ENDP

                  ke_mem_hndl PROC
;;;332    //-----------------------------------------------
;;;333    void ke_mem_hndl(char b,unsigned short in)
00035c  4770              BX       lr
;;;334    {
;;;335    
;;;336    }
;;;337    
                          ENDP

                  vz_mem_hndl PROC
;;;339    //-----------------------------------------------
;;;340    void vz_mem_hndl(unsigned short in)
00035e  4770              BX       lr
;;;341    {
;;;342    
;;;343    
;;;344    }
;;;345      
                          ENDP

                  |L1.864|
                          DCD      net_av
                  |L1.868|
                          DCD      ||.data||
                  |L1.872|
                          DCD      bps
                  |L1.876|
                          DCD      sk_av_stat
                  |L1.880|
                          DCD      SK_ZVUK_EN
                  |L1.884|
                          DCD      AV_OFF_AVT
                  |L1.888|
                          DCD      0x40024000

                          AREA ||.data||, DATA, ALIGN=2

                  avar_stat
                          DCD      0x00000000
                  avar_ind_stat
                          DCD      0x00000000
                  avar_stat_old
                          DCD      0x00000000
                  avar_stat_new
                          DCD      0x00000000
                  avar_stat_offed
                          DCD      0x00000000
                  av_inv
                          DCD      0x00000000
000018  0000              DCB      0x00,0x00
