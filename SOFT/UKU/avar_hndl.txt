; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\avar_hndl.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\avar_hndl.d --feedback=.\EXE\UKU2071x_GALV_IBv2.fed --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 --omf_browse=.\EXE\avar_hndl.crf avar_hndl.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  avar_hndl PROC
;;;56     //-----------------------------------------------
;;;57     void avar_hndl(void)
000000  b570              PUSH     {r4-r6,lr}
;;;58     {
;;;59     //static unsigned avar_stat_old;
;;;60     char i;
;;;61     //unsigned avar_stat_new,avar_stat_offed;
;;;62     
;;;63     if(net_av)		SET_REG(avar_stat,1,0,1);
000002  4841              LDR      r0,|L1.264|
000004  7802              LDRB     r2,[r0,#0]  ; net_av
000006  4841              LDR      r0,|L1.268|
000008  6801              LDR      r1,[r0,#0]
00000a  b112              CBZ      r2,|L1.18|
00000c  f0410101          ORR      r1,r1,#1
000010  e001              B        |L1.22|
                  |L1.18|
;;;64     else	   			SET_REG(avar_stat,0,0,1);
000012  f0210101          BIC      r1,r1,#1
                  |L1.22|
;;;65     
;;;66     
;;;67     for(i=0;i<12;i++)
000016  6001              STR      r1,[r0,#0]  ; avar_stat
000018  2100              MOVS     r1,#0
;;;68     	{
;;;69     	if(bps[i]._av)	SET_REG(avar_stat,1,3+i,1);
00001a  4c3d              LDR      r4,|L1.272|
00001c  f05f0301          MOVS.W   r3,#1
                  |L1.32|
000020  eb010281          ADD      r2,r1,r1,LSL #2
000024  eb041202          ADD      r2,r4,r2,LSL #4
000028  7852              LDRB     r2,[r2,#1]
00002a  b132              CBZ      r2,|L1.58|
00002c  1ccd              ADDS     r5,r1,#3
00002e  fa03f205          LSL      r2,r3,r5
000032  6805              LDR      r5,[r0,#0]  ; avar_stat
000034  4395              BICS     r5,r5,r2
000036  4315              ORRS     r5,r5,r2
000038  e004              B        |L1.68|
                  |L1.58|
;;;70     	else	   		SET_REG(avar_stat,0,3+i,1);
00003a  1cca              ADDS     r2,r1,#3
00003c  6805              LDR      r5,[r0,#0]  ; avar_stat
00003e  fa03f202          LSL      r2,r3,r2
000042  4395              BICS     r5,r5,r2
                  |L1.68|
000044  1c49              ADDS     r1,r1,#1              ;67
000046  b2c9              UXTB     r1,r1                 ;67
000048  6005              STR      r5,[r0,#0]            ;67  ; avar_stat
00004a  290c              CMP      r1,#0xc               ;67
00004c  d3e8              BCC      |L1.32|
;;;71     	}
;;;72     
;;;73     for(i=0;i<6;i++)
;;;74     	{
;;;75     	if(av_inv[i])	SET_REG(avar_stat,1,15+i,1);
;;;76     	else	   		SET_REG(avar_stat,0,15+i,1);
00004e  4629              MOV      r1,r5
000050  4d2e              LDR      r5,|L1.268|
000052  2200              MOVS     r2,#0                 ;73
000054  3514              ADDS     r5,r5,#0x14           ;75
                  |L1.86|
000056  5cac              LDRB     r4,[r5,r2]            ;75
000058  b134              CBZ      r4,|L1.104|
00005a  f102060f          ADD      r6,r2,#0xf            ;75
00005e  fa03f406          LSL      r4,r3,r6              ;75
000062  43a1              BICS     r1,r1,r4              ;75
000064  4321              ORRS     r1,r1,r4              ;75
000066  e004              B        |L1.114|
                  |L1.104|
000068  f102040f          ADD      r4,r2,#0xf
00006c  fa03f404          LSL      r4,r3,r4
000070  43a1              BICS     r1,r1,r4
                  |L1.114|
000072  1c52              ADDS     r2,r2,#1              ;73
000074  b2d2              UXTB     r2,r2                 ;73
000076  2a06              CMP      r2,#6                 ;73
000078  d3ed              BCC      |L1.86|
;;;77     	}
;;;78     
;;;79     /*for(i=0;i<4;i++)
;;;80     	{
;;;81     	if(av_dt[i])	SET_REG(avar_stat,1,21+i,1);
;;;82     	else	   		SET_REG(avar_stat,0,21+i,1);
;;;83     	}  */
;;;84     for(i=0;i<4;i++)
;;;85     	{
;;;86     	if(sk_av_stat[i]==sasON)	SET_REG(avar_stat,1,25+i,1);
00007a  4d26              LDR      r5,|L1.276|
00007c  2200              MOVS     r2,#0                 ;84
00007e  6001              STR      r1,[r0,#0]  ; avar_stat
                  |L1.128|
000080  5cac              LDRB     r4,[r5,r2]
000082  2c01              CMP      r4,#1
000084  d02f              BEQ      |L1.230|
;;;87     	else	   		SET_REG(avar_stat,0,25+i,1);
000086  f1020419          ADD      r4,r2,#0x19
00008a  fa03f404          LSL      r4,r3,r4
00008e  43a1              BICS     r1,r1,r4
                  |L1.144|
000090  1c52              ADDS     r2,r2,#1              ;84
000092  b2d2              UXTB     r2,r2                 ;84
000094  2a04              CMP      r2,#4                 ;84
000096  d3f3              BCC      |L1.128|
;;;88     	}
;;;89     
;;;90     avar_stat_new=(avar_stat^avar_stat_old)&avar_stat;
000098  6001              STR      r1,[r0,#0]  ; avar_stat
00009a  6883              LDR      r3,[r0,#8]  ; avar_stat_old
00009c  ea210203          BIC      r2,r1,r3
;;;91     
;;;92     avar_ind_stat|=avar_stat_new;
0000a0  60c2              STR      r2,[r0,#0xc]  ; avar_stat_new
0000a2  6844              LDR      r4,[r0,#4]  ; avar_ind_stat
0000a4  4314              ORRS     r4,r4,r2
;;;93     
;;;94     if((SK_ZVUK_EN[0])) avar_ind_stat&=(~(1UL<<25));
0000a6  4a1c              LDR      r2,|L1.280|
0000a8  6044              STR      r4,[r0,#4]  ; avar_ind_stat
0000aa  8815              LDRH     r5,[r2,#0]  ; SK_ZVUK_EN
0000ac  b115              CBZ      r5,|L1.180|
0000ae  f0247400          BIC      r4,r4,#0x2000000
0000b2  6044              STR      r4,[r0,#4]  ; avar_ind_stat
                  |L1.180|
;;;95     if((SK_ZVUK_EN[1])) avar_ind_stat&=(~(1UL<<26));
0000b4  8854              LDRH     r4,[r2,#2]  ; SK_ZVUK_EN
0000b6  b11c              CBZ      r4,|L1.192|
0000b8  6844              LDR      r4,[r0,#4]  ; avar_ind_stat
0000ba  f0246480          BIC      r4,r4,#0x4000000
0000be  6044              STR      r4,[r0,#4]  ; avar_ind_stat
                  |L1.192|
;;;96     if((SK_ZVUK_EN[2])) avar_ind_stat&=(~(1UL<<27));
0000c0  8894              LDRH     r4,[r2,#4]  ; SK_ZVUK_EN
0000c2  b11c              CBZ      r4,|L1.204|
0000c4  6844              LDR      r4,[r0,#4]  ; avar_ind_stat
0000c6  f0246400          BIC      r4,r4,#0x8000000
0000ca  6044              STR      r4,[r0,#4]  ; avar_ind_stat
                  |L1.204|
;;;97     if((SK_ZVUK_EN[3])) avar_ind_stat&=(~(1UL<<28));	
0000cc  88d2              LDRH     r2,[r2,#6]  ; SK_ZVUK_EN
0000ce  b11a              CBZ      r2,|L1.216|
0000d0  6842              LDR      r2,[r0,#4]  ; avar_ind_stat
0000d2  f0225280          BIC      r2,r2,#0x10000000
0000d6  6042              STR      r2,[r0,#4]  ; avar_ind_stat
                  |L1.216|
;;;98     
;;;99     
;;;100    avar_stat_offed=~((avar_stat^avar_stat_old)&avar_stat_old);
0000d8  438b              BICS     r3,r3,r1
0000da  43da              MVNS     r2,r3
;;;101    
;;;102    if(!AV_OFF_AVT)avar_stat_offed|=0xfffffffe;
0000dc  4b0f              LDR      r3,|L1.284|
0000de  6102              STR      r2,[r0,#0x10]  ; avar_stat_offed
0000e0  881b              LDRH     r3,[r3,#0]  ; AV_OFF_AVT
0000e2  b13b              CBZ      r3,|L1.244|
0000e4  e009              B        |L1.250|
                  |L1.230|
0000e6  f1020619          ADD      r6,r2,#0x19           ;86
0000ea  fa03f406          LSL      r4,r3,r6              ;86
0000ee  43a1              BICS     r1,r1,r4              ;86
0000f0  4321              ORRS     r1,r1,r4              ;86
0000f2  e7cd              B        |L1.144|
                  |L1.244|
0000f4  f0620201          ORN      r2,r2,#1
0000f8  6102              STR      r2,[r0,#0x10]  ; avar_stat_offed
                  |L1.250|
;;;103    
;;;104    avar_ind_stat&=avar_stat_offed; 
0000fa  6903              LDR      r3,[r0,#0x10]  ; avar_stat_offed
0000fc  6842              LDR      r2,[r0,#4]  ; avar_ind_stat
0000fe  401a              ANDS     r2,r2,r3
000100  e9c02101          STRD     r2,r1,[r0,#4]
;;;105    
;;;106    avar_stat_old=avar_stat;
;;;107    }
000104  bd70              POP      {r4-r6,pc}
;;;108    
                          ENDP

000106  0000              DCW      0x0000
                  |L1.264|
                          DCD      net_av
                  |L1.268|
                          DCD      ||.data||
                  |L1.272|
                          DCD      bps
                  |L1.276|
                          DCD      sk_av_stat
                  |L1.280|
                          DCD      SK_ZVUK_EN
                  |L1.284|
                          DCD      AV_OFF_AVT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  avar_bps_hndl PROC
;;;56     //-----------------------------------------------
;;;57     void avar_hndl(void)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;58     {
;;;59     //static unsigned avar_stat_old;
;;;60     char i;
;;;61     //unsigned avar_stat_new,avar_stat_offed;
;;;62     
;;;63     if(net_av)		SET_REG(avar_stat,1,0,1);
000004  4607              MOV      r7,r0
000006  2000              MOVS     r0,#0
000008  4680              MOV      r8,r0
00000a  4605              MOV      r5,r0
00000c  4604              MOV      r4,r0
00000e  2654              MOVS     r6,#0x54
000010  b159              CBZ      r1,|L2.42|
;;;64     else	   			SET_REG(avar_stat,0,0,1);
000012  2901              CMP      r1,#1
000014  d004              BEQ      |L2.32|
;;;65     
;;;66     
;;;67     for(i=0;i<12;i++)
000016  2902              CMP      r1,#2
000018  d004              BEQ      |L2.36|
;;;68     	{
;;;69     	if(bps[i]._av)	SET_REG(avar_stat,1,3+i,1);
00001a  2903              CMP      r1,#3
00001c  d004              BEQ      |L2.40|
00001e  e004              B        |L2.42|
                  |L2.32|
000020  2655              MOVS     r6,#0x55
000022  e002              B        |L2.42|
                  |L2.36|
000024  2675              MOVS     r6,#0x75
000026  e000              B        |L2.42|
                  |L2.40|
000028  264c              MOVS     r6,#0x4c
                  |L2.42|
00002a  488c              LDR      r0,|L2.604|
00002c  f8df9228          LDR      r9,|L2.600|
000030  eb070387          ADD      r3,r7,r7,LSL #2
000034  f04f0a00          MOV      r10,#0
000038  eb001003          ADD      r0,r0,r3,LSL #4
;;;70     	else	   		SET_REG(avar_stat,0,3+i,1);
00003c  2a01              CMP      r2,#1
00003e  d002              BEQ      |L2.70|
000040  2a00              CMP      r2,#0
000042  d07e              BEQ      |L2.322|
000044  e103              B        |L2.590|
                  |L2.70|
000046  b131              CBZ      r1,|L2.86|
000048  2901              CMP      r1,#1                 ;67
00004a  d008              BEQ      |L2.94|
00004c  2902              CMP      r1,#2                 ;67
;;;71     	}
;;;72     
;;;73     for(i=0;i<6;i++)
;;;74     	{
;;;75     	if(av_inv[i])	SET_REG(avar_stat,1,15+i,1);
;;;76     	else	   		SET_REG(avar_stat,0,15+i,1);
00004e  d00a              BEQ      |L2.102|
000050  2903              CMP      r1,#3                 ;75
000052  d00c              BEQ      |L2.110|
000054  e00f              B        |L2.118|
                  |L2.86|
000056  7842              LDRB     r2,[r0,#1]            ;75
000058  f0420201          ORR      r2,r2,#1              ;75
00005c  e00a              B        |L2.116|
                  |L2.94|
00005e  7842              LDRB     r2,[r0,#1]            ;75
000060  f0420202          ORR      r2,r2,#2              ;75
000064  e006              B        |L2.116|
                  |L2.102|
000066  7842              LDRB     r2,[r0,#1]            ;75
000068  f0420204          ORR      r2,r2,#4
00006c  e002              B        |L2.116|
                  |L2.110|
00006e  7842              LDRB     r2,[r0,#1]
000070  f0420208          ORR      r2,r2,#8
                  |L2.116|
000074  7042              STRB     r2,[r0,#1]            ;73
                  |L2.118|
000076  f880104f          STRB     r1,[r0,#0x4f]         ;73
;;;77     	}
;;;78     
;;;79     /*for(i=0;i<4;i++)
;;;80     	{
;;;81     	if(av_dt[i])	SET_REG(avar_stat,1,21+i,1);
;;;82     	else	   		SET_REG(avar_stat,0,21+i,1);
;;;83     	}  */
;;;84     for(i=0;i<4;i++)
;;;85     	{
;;;86     	if(sk_av_stat[i]==sasON)	SET_REG(avar_stat,1,25+i,1);
00007a  2053              MOVS     r0,#0x53
00007c  f88d0000          STRB     r0,[sp,#0]            ;84
000080  f88d7001          STRB     r7,[sp,#1]
000084  f88d6002          STRB     r6,[sp,#2]
;;;87     	else	   		SET_REG(avar_stat,0,25+i,1);
000088  4655              MOV      r5,r10
00008a  f88da003          STRB     r10,[sp,#3]
00008e  4669              MOV      r1,sp
000090  4628              MOV      r0,r5                 ;84
000092  f7fffffe          BL       lc640_write_long_ptr
000096  4669              MOV      r1,sp                 ;84
;;;88     	}
;;;89     
;;;90     avar_stat_new=(avar_stat^avar_stat_old)&avar_stat;
000098  2004              MOVS     r0,#4
00009a  9500              STR      r5,[sp,#0]
00009c  f7fffffe          BL       lc640_write_long_ptr
;;;91     
;;;92     avar_ind_stat|=avar_stat_new;
0000a0  f8b9003c          LDRH     r0,[r9,#0x3c]
0000a4  f1090420          ADD      r4,r9,#0x20
;;;93     
;;;94     if((SK_ZVUK_EN[0])) avar_ind_stat&=(~(1UL<<25));
0000a8  f88d0000          STRB     r0,[sp,#0]
0000ac  7e20              LDRB     r0,[r4,#0x18]
0000ae  f88d0001          STRB     r0,[sp,#1]
0000b2  7b20              LDRB     r0,[r4,#0xc]
;;;95     if((SK_ZVUK_EN[1])) avar_ind_stat&=(~(1UL<<26));
0000b4  f88d0002          STRB     r0,[sp,#2]
0000b8  f88d5003          STRB     r5,[sp,#3]
0000bc  4669              MOV      r1,sp
0000be  f04f0008          MOV      r0,#8
;;;96     if((SK_ZVUK_EN[2])) avar_ind_stat&=(~(1UL<<27));
0000c2  f7fffffe          BL       lc640_write_long_ptr
0000c6  7a20              LDRB     r0,[r4,#8]
0000c8  f88d0000          STRB     r0,[sp,#0]
;;;97     if((SK_ZVUK_EN[3])) avar_ind_stat&=(~(1UL<<28));	
0000cc  7920              LDRB     r0,[r4,#4]
0000ce  f88d0001          STRB     r0,[sp,#1]
0000d2  7820              LDRB     r0,[r4,#0]
0000d4  f88d0002          STRB     r0,[sp,#2]
;;;98     
;;;99     
;;;100    avar_stat_offed=~((avar_stat^avar_stat_old)&avar_stat_old);
0000d8  f88d5003          STRB     r5,[sp,#3]
;;;101    
;;;102    if(!AV_OFF_AVT)avar_stat_offed|=0xfffffffe;
0000dc  4669              MOV      r1,sp
0000de  200c              MOVS     r0,#0xc
0000e0  f7fffffe          BL       lc640_write_long_ptr
0000e4  2441              MOVS     r4,#0x41
0000e6  f88d4000          STRB     r4,[sp,#0]            ;86
0000ea  f88d4001          STRB     r4,[sp,#1]            ;86
0000ee  f88d4002          STRB     r4,[sp,#2]            ;86
0000f2  f88d4003          STRB     r4,[sp,#3]            ;86
0000f6  4669              MOV      r1,sp
0000f8  2010              MOVS     r0,#0x10
;;;103    
;;;104    avar_ind_stat&=avar_stat_offed; 
0000fa  f7fffffe          BL       lc640_write_long_ptr
0000fe  f88d4000          STRB     r4,[sp,#0]
000102  f88d4001          STRB     r4,[sp,#1]
;;;105    
;;;106    avar_stat_old=avar_stat;
;;;107    }
000106  f88d4002          STRB     r4,[sp,#2]
00010a  f88d4003          STRB     r4,[sp,#3]
00010e  4669              MOV      r1,sp
000110  2014              MOVS     r0,#0x14
000112  f7fffffe          BL       lc640_write_long_ptr
000116  f88d4000          STRB     r4,[sp,#0]
00011a  f88d4001          STRB     r4,[sp,#1]
00011e  f88d4002          STRB     r4,[sp,#2]
000122  f88d4003          STRB     r4,[sp,#3]
000126  4669              MOV      r1,sp
000128  2018              MOVS     r0,#0x18
00012a  f7fffffe          BL       lc640_write_long_ptr
00012e  f88d4000          STRB     r4,[sp,#0]
000132  f88d4001          STRB     r4,[sp,#1]
000136  f88d4002          STRB     r4,[sp,#2]
00013a  f88d4003          STRB     r4,[sp,#3]
00013e  4669              MOV      r1,sp
000140  e000              B        |L2.324|
                  |L2.322|
000142  e001              B        |L2.328|
                  |L2.324|
000144  201c              MOVS     r0,#0x1c
000146  e080              B        |L2.586|
                  |L2.328|
000148  b131              CBZ      r1,|L2.344|
00014a  2901              CMP      r1,#1
00014c  d008              BEQ      |L2.352|
00014e  2902              CMP      r1,#2
000150  d013              BEQ      |L2.378|
000152  2903              CMP      r1,#3
000154  d015              BEQ      |L2.386|
000156  e007              B        |L2.360|
                  |L2.344|
000158  7841              LDRB     r1,[r0,#1]
00015a  f0210101          BIC      r1,r1,#1
00015e  e002              B        |L2.358|
                  |L2.352|
000160  7841              LDRB     r1,[r0,#1]
000162  f0210102          BIC      r1,r1,#2
                  |L2.358|
000166  7041              STRB     r1,[r0,#1]
                  |L2.360|
000168  f1050010          ADD      r0,r5,#0x10
00016c  ea4f0b00          MOV.W    r11,r0
                  |L2.368|
000170  f89d0000          LDRB     r0,[sp,#0]
000174  2853              CMP      r0,#0x53
000176  d118              BNE      |L2.426|
000178  e007              B        |L2.394|
                  |L2.378|
00017a  7841              LDRB     r1,[r0,#1]
00017c  f0210104          BIC      r1,r1,#4
000180  e7f1              B        |L2.358|
                  |L2.386|
000182  7841              LDRB     r1,[r0,#1]
000184  f0210108          BIC      r1,r1,#8
000188  e7ed              B        |L2.358|
                  |L2.394|
00018a  f89d0001          LDRB     r0,[sp,#1]
00018e  42b8              CMP      r0,r7
000190  d10b              BNE      |L2.426|
000192  f89d0002          LDRB     r0,[sp,#2]
000196  42b0              CMP      r0,r6
000198  d107              BNE      |L2.426|
00019a  4669              MOV      r1,sp
00019c  4658              MOV      r0,r11
00019e  f7fffffe          BL       lc640_read_long_ptr
0001a2  f89d0000          LDRB     r0,[sp,#0]
0001a6  2841              CMP      r0,#0x41
0001a8  d005              BEQ      |L2.438|
                  |L2.426|
0001aa  b3f4              CBZ      r4,|L2.554|
0001ac  1e64              SUBS     r4,r4,#1
0001ae  b2a4              UXTH     r4,r4
0001b0  4544              CMP      r4,r8
0001b2  d1dd              BNE      |L2.368|
0001b4  e04b              B        |L2.590|
                  |L2.438|
0001b6  f89d0001          LDRB     r0,[sp,#1]
0001ba  2841              CMP      r0,#0x41
0001bc  d1f5              BNE      |L2.426|
0001be  f89d0002          LDRB     r0,[sp,#2]
0001c2  2841              CMP      r0,#0x41
0001c4  d1f1              BNE      |L2.426|
0001c6  f89d0003          LDRB     r0,[sp,#3]
0001ca  2841              CMP      r0,#0x41
0001cc  d1ed              BNE      |L2.426|
0001ce  f8b9003c          LDRH     r0,[r9,#0x3c]
0001d2  f1090420          ADD      r4,r9,#0x20
0001d6  f88d0000          STRB     r0,[sp,#0]
0001da  7e20              LDRB     r0,[r4,#0x18]
0001dc  f88d0001          STRB     r0,[sp,#1]
0001e0  7b20              LDRB     r0,[r4,#0xc]
0001e2  f88d0002          STRB     r0,[sp,#2]
0001e6  4656              MOV      r6,r10
0001e8  f88da003          STRB     r10,[sp,#3]
0001ec  4669              MOV      r1,sp
0001ee  4658              MOV      r0,r11
0001f0  f7fffffe          BL       lc640_write_long_ptr
0001f4  7a20              LDRB     r0,[r4,#8]
0001f6  f88d0000          STRB     r0,[sp,#0]
0001fa  7920              LDRB     r0,[r4,#4]
0001fc  f88d0001          STRB     r0,[sp,#1]
000200  7820              LDRB     r0,[r4,#0]
000202  f88d0002          STRB     r0,[sp,#2]
000206  f88d6003          STRB     r6,[sp,#3]
00020a  4669              MOV      r1,sp
00020c  f1050014          ADD      r0,r5,#0x14
000210  f7fffffe          BL       lc640_write_long_ptr
000214  2442              MOVS     r4,#0x42
000216  f88d4000          STRB     r4,[sp,#0]
00021a  f88d4001          STRB     r4,[sp,#1]
00021e  f88d4002          STRB     r4,[sp,#2]
000222  f88d4003          STRB     r4,[sp,#3]
000226  4669              MOV      r1,sp
000228  e000              B        |L2.556|
                  |L2.554|
00022a  e013              B        |L2.596|
                  |L2.556|
00022c  f1050018          ADD      r0,r5,#0x18
000230  f7fffffe          BL       lc640_write_long_ptr
000234  f88d4000          STRB     r4,[sp,#0]
000238  f88d4001          STRB     r4,[sp,#1]
00023c  f88d4002          STRB     r4,[sp,#2]
000240  f88d4003          STRB     r4,[sp,#3]
000244  4669              MOV      r1,sp
000246  f105001c          ADD      r0,r5,#0x1c
                  |L2.586|
00024a  f7fffffe          BL       lc640_write_long_ptr
                  |L2.590|
00024e  bf00              NOP      
000250  e8bd8ff8          POP      {r3-r11,pc}
                  |L2.596|
000254  243f              MOVS     r4,#0x3f
000256  e78b              B        |L2.368|
;;;108    
                          ENDP

                  |L2.600|
                          DCD      0x40024000
                  |L2.604|
                          DCD      bps

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  wrk_mem_hndl PROC
;;;56     //-----------------------------------------------
;;;57     void avar_hndl(void)
000000  4770              BX       lr
;;;58     {
;;;59     //static unsigned avar_stat_old;
;;;60     char i;
;;;61     //unsigned avar_stat_new,avar_stat_offed;
;;;62     
;;;63     if(net_av)		SET_REG(avar_stat,1,0,1);
;;;64     else	   			SET_REG(avar_stat,0,0,1);
;;;65     
;;;66     
;;;67     for(i=0;i<12;i++)
;;;68     	{
;;;69     	if(bps[i]._av)	SET_REG(avar_stat,1,3+i,1);
;;;70     	else	   		SET_REG(avar_stat,0,3+i,1);
;;;71     	}
;;;72     
;;;73     for(i=0;i<6;i++)
;;;74     	{
;;;75     	if(av_inv[i])	SET_REG(avar_stat,1,15+i,1);
;;;76     	else	   		SET_REG(avar_stat,0,15+i,1);
;;;77     	}
;;;78     
;;;79     /*for(i=0;i<4;i++)
;;;80     	{
;;;81     	if(av_dt[i])	SET_REG(avar_stat,1,21+i,1);
;;;82     	else	   		SET_REG(avar_stat,0,21+i,1);
;;;83     	}  */
;;;84     for(i=0;i<4;i++)
;;;85     	{
;;;86     	if(sk_av_stat[i]==sasON)	SET_REG(avar_stat,1,25+i,1);
;;;87     	else	   		SET_REG(avar_stat,0,25+i,1);
;;;88     	}
;;;89     
;;;90     avar_stat_new=(avar_stat^avar_stat_old)&avar_stat;
;;;91     
;;;92     avar_ind_stat|=avar_stat_new;
;;;93     
;;;94     if((SK_ZVUK_EN[0])) avar_ind_stat&=(~(1UL<<25));
;;;95     if((SK_ZVUK_EN[1])) avar_ind_stat&=(~(1UL<<26));
;;;96     if((SK_ZVUK_EN[2])) avar_ind_stat&=(~(1UL<<27));
;;;97     if((SK_ZVUK_EN[3])) avar_ind_stat&=(~(1UL<<28));	
;;;98     
;;;99     
;;;100    avar_stat_offed=~((avar_stat^avar_stat_old)&avar_stat_old);
;;;101    
;;;102    if(!AV_OFF_AVT)avar_stat_offed|=0xfffffffe;
;;;103    
;;;104    avar_ind_stat&=avar_stat_offed; 
;;;105    
;;;106    avar_stat_old=avar_stat;
;;;107    }
;;;108    
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  avar_bat_hndl PROC
;;;56     //-----------------------------------------------
;;;57     void avar_hndl(void)
000000  4770              BX       lr
;;;58     {
;;;59     //static unsigned avar_stat_old;
;;;60     char i;
;;;61     //unsigned avar_stat_new,avar_stat_offed;
;;;62     
;;;63     if(net_av)		SET_REG(avar_stat,1,0,1);
;;;64     else	   			SET_REG(avar_stat,0,0,1);
;;;65     
;;;66     
;;;67     for(i=0;i<12;i++)
;;;68     	{
;;;69     	if(bps[i]._av)	SET_REG(avar_stat,1,3+i,1);
;;;70     	else	   		SET_REG(avar_stat,0,3+i,1);
;;;71     	}
;;;72     
;;;73     for(i=0;i<6;i++)
;;;74     	{
;;;75     	if(av_inv[i])	SET_REG(avar_stat,1,15+i,1);
;;;76     	else	   		SET_REG(avar_stat,0,15+i,1);
;;;77     	}
;;;78     
;;;79     /*for(i=0;i<4;i++)
;;;80     	{
;;;81     	if(av_dt[i])	SET_REG(avar_stat,1,21+i,1);
;;;82     	else	   		SET_REG(avar_stat,0,21+i,1);
;;;83     	}  */
;;;84     for(i=0;i<4;i++)
;;;85     	{
;;;86     	if(sk_av_stat[i]==sasON)	SET_REG(avar_stat,1,25+i,1);
;;;87     	else	   		SET_REG(avar_stat,0,25+i,1);
;;;88     	}
;;;89     
;;;90     avar_stat_new=(avar_stat^avar_stat_old)&avar_stat;
;;;91     
;;;92     avar_ind_stat|=avar_stat_new;
;;;93     
;;;94     if((SK_ZVUK_EN[0])) avar_ind_stat&=(~(1UL<<25));
;;;95     if((SK_ZVUK_EN[1])) avar_ind_stat&=(~(1UL<<26));
;;;96     if((SK_ZVUK_EN[2])) avar_ind_stat&=(~(1UL<<27));
;;;97     if((SK_ZVUK_EN[3])) avar_ind_stat&=(~(1UL<<28));	
;;;98     
;;;99     
;;;100    avar_stat_offed=~((avar_stat^avar_stat_old)&avar_stat_old);
;;;101    
;;;102    if(!AV_OFF_AVT)avar_stat_offed|=0xfffffffe;
;;;103    
;;;104    avar_ind_stat&=avar_stat_offed; 
;;;105    
;;;106    avar_stat_old=avar_stat;
;;;107    }
;;;108    
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.text||
                  ke_mem_hndl PROC
;;;56     //-----------------------------------------------
;;;57     void avar_hndl(void)
000000  4770              BX       lr
;;;58     {
;;;59     //static unsigned avar_stat_old;
;;;60     char i;
;;;61     //unsigned avar_stat_new,avar_stat_offed;
;;;62     
;;;63     if(net_av)		SET_REG(avar_stat,1,0,1);
;;;64     else	   			SET_REG(avar_stat,0,0,1);
;;;65     
;;;66     
;;;67     for(i=0;i<12;i++)
;;;68     	{
;;;69     	if(bps[i]._av)	SET_REG(avar_stat,1,3+i,1);
;;;70     	else	   		SET_REG(avar_stat,0,3+i,1);
;;;71     	}
;;;72     
;;;73     for(i=0;i<6;i++)
;;;74     	{
;;;75     	if(av_inv[i])	SET_REG(avar_stat,1,15+i,1);
;;;76     	else	   		SET_REG(avar_stat,0,15+i,1);
;;;77     	}
;;;78     
;;;79     /*for(i=0;i<4;i++)
;;;80     	{
;;;81     	if(av_dt[i])	SET_REG(avar_stat,1,21+i,1);
;;;82     	else	   		SET_REG(avar_stat,0,21+i,1);
;;;83     	}  */
;;;84     for(i=0;i<4;i++)
;;;85     	{
;;;86     	if(sk_av_stat[i]==sasON)	SET_REG(avar_stat,1,25+i,1);
;;;87     	else	   		SET_REG(avar_stat,0,25+i,1);
;;;88     	}
;;;89     
;;;90     avar_stat_new=(avar_stat^avar_stat_old)&avar_stat;
;;;91     
;;;92     avar_ind_stat|=avar_stat_new;
;;;93     
;;;94     if((SK_ZVUK_EN[0])) avar_ind_stat&=(~(1UL<<25));
;;;95     if((SK_ZVUK_EN[1])) avar_ind_stat&=(~(1UL<<26));
;;;96     if((SK_ZVUK_EN[2])) avar_ind_stat&=(~(1UL<<27));
;;;97     if((SK_ZVUK_EN[3])) avar_ind_stat&=(~(1UL<<28));	
;;;98     
;;;99     
;;;100    avar_stat_offed=~((avar_stat^avar_stat_old)&avar_stat_old);
;;;101    
;;;102    if(!AV_OFF_AVT)avar_stat_offed|=0xfffffffe;
;;;103    
;;;104    avar_ind_stat&=avar_stat_offed; 
;;;105    
;;;106    avar_stat_old=avar_stat;
;;;107    }
;;;108    
                          ENDP


                          AREA ||area_number.6||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.text||
                  vz_mem_hndl PROC
;;;56     //-----------------------------------------------
;;;57     void avar_hndl(void)
000000  4770              BX       lr
;;;58     {
;;;59     //static unsigned avar_stat_old;
;;;60     char i;
;;;61     //unsigned avar_stat_new,avar_stat_offed;
;;;62     
;;;63     if(net_av)		SET_REG(avar_stat,1,0,1);
;;;64     else	   			SET_REG(avar_stat,0,0,1);
;;;65     
;;;66     
;;;67     for(i=0;i<12;i++)
;;;68     	{
;;;69     	if(bps[i]._av)	SET_REG(avar_stat,1,3+i,1);
;;;70     	else	   		SET_REG(avar_stat,0,3+i,1);
;;;71     	}
;;;72     
;;;73     for(i=0;i<6;i++)
;;;74     	{
;;;75     	if(av_inv[i])	SET_REG(avar_stat,1,15+i,1);
;;;76     	else	   		SET_REG(avar_stat,0,15+i,1);
;;;77     	}
;;;78     
;;;79     /*for(i=0;i<4;i++)
;;;80     	{
;;;81     	if(av_dt[i])	SET_REG(avar_stat,1,21+i,1);
;;;82     	else	   		SET_REG(avar_stat,0,21+i,1);
;;;83     	}  */
;;;84     for(i=0;i<4;i++)
;;;85     	{
;;;86     	if(sk_av_stat[i]==sasON)	SET_REG(avar_stat,1,25+i,1);
;;;87     	else	   		SET_REG(avar_stat,0,25+i,1);
;;;88     	}
;;;89     
;;;90     avar_stat_new=(avar_stat^avar_stat_old)&avar_stat;
;;;91     
;;;92     avar_ind_stat|=avar_stat_new;
;;;93     
;;;94     if((SK_ZVUK_EN[0])) avar_ind_stat&=(~(1UL<<25));
;;;95     if((SK_ZVUK_EN[1])) avar_ind_stat&=(~(1UL<<26));
;;;96     if((SK_ZVUK_EN[2])) avar_ind_stat&=(~(1UL<<27));
;;;97     if((SK_ZVUK_EN[3])) avar_ind_stat&=(~(1UL<<28));	
;;;98     
;;;99     
;;;100    avar_stat_offed=~((avar_stat^avar_stat_old)&avar_stat_old);
;;;101    
;;;102    if(!AV_OFF_AVT)avar_stat_offed|=0xfffffffe;
;;;103    
;;;104    avar_ind_stat&=avar_stat_offed; 
;;;105    
;;;106    avar_stat_old=avar_stat;
;;;107    }
;;;108    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  avar_stat
                          DCD      0x00000000
                  avar_ind_stat
                          DCD      0x00000000
                  avar_stat_old
                          DCD      0x00000000
                  avar_stat_new
                          DCD      0x00000000
                  avar_stat_offed
                          DCD      0x00000000
                  av_inv
                          DCD      0x00000000
000018  0000              DCB      0x00,0x00
