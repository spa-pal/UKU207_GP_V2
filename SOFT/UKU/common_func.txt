; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\common_func.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\common_func.d --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 -DWG12232A --omf_browse=.\EXE\common_func.crf common_func.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  abs PROC
;;;11     //-----------------------------------------------
;;;12     signed short abs(signed short in)
000000  2800              CMP      r0,#0
;;;13     {
;;;14     if(in<0)in=-in;
000002  da01              BGE      |L1.8|
000004  4240              RSBS     r0,r0,#0
000006  b200              SXTH     r0,r0
                  |L1.8|
;;;15     return in;
;;;16     }
000008  4770              BX       lr
;;;17     
                          ENDP

                  clr_scrn PROC
;;;18     //-----------------------------------------------
;;;19     void clr_scrn(void)
00000a  2000              MOVS     r0,#0
;;;20     {
;;;21     char i;
;;;22     for (i=0;i<LCD_SIZE;i++)
;;;23     	{
;;;24     	lcd_buffer[i]=' ';
00000c  4aff              LDR      r2,|L1.1036|
00000e  2120              MOVS     r1,#0x20
                  |L1.16|
000010  5411              STRB     r1,[r2,r0]
000012  1c40              ADDS     r0,r0,#1              ;22
000014  b2c0              UXTB     r0,r0                 ;22
000016  28c8              CMP      r0,#0xc8              ;22
000018  d3fa              BCC      |L1.16|
;;;25     	}
;;;26     }
00001a  4770              BX       lr
;;;27     
                          ENDP

                  find PROC
;;;28     //-----------------------------------------------
;;;29     char find(char xy)
00001c  4601              MOV      r1,r0
;;;30     {
;;;31     char i=0;
;;;32     do i++;
;;;33     while ((lcd_buffer[i]!=xy)&&(i<LCD_SIZE));
00001e  4afb              LDR      r2,|L1.1036|
000020  2000              MOVS     r0,#0                 ;31
                  |L1.34|
000022  1c40              ADDS     r0,r0,#1              ;32
000024  b2c0              UXTB     r0,r0                 ;32
000026  5c13              LDRB     r3,[r2,r0]
000028  428b              CMP      r3,r1
00002a  d001              BEQ      |L1.48|
00002c  28c8              CMP      r0,#0xc8
00002e  d3f8              BCC      |L1.34|
                  |L1.48|
;;;34     //if(i==(LCD_SIZE)) i++;
;;;35     return i;
;;;36     }
000030  4770              BX       lr
;;;37     
                          ENDP

                  bin2bcd_int PROC
;;;39     //-----------------------------------------------
;;;40     void bin2bcd_int(unsigned int in)
000032  b510              PUSH     {r4,lr}
;;;41     {
;;;42     
;;;43     char i=5;
;;;44     for(i=0;i<5;i++)
000034  2100              MOVS     r1,#0
;;;45     	{
;;;46     	dig[i]=in%10;
000036  4cf6              LDR      r4,|L1.1040|
000038  220a              MOVS     r2,#0xa
00003a  bf00              NOP      
                  |L1.60|
00003c  fbb0f3f2          UDIV     r3,r0,r2
000040  fb020013          MLS      r0,r2,r3,r0
000044  5460              STRB     r0,[r4,r1]
000046  1c49              ADDS     r1,r1,#1              ;44
000048  b2c9              UXTB     r1,r1                 ;44
00004a  4618              MOV      r0,r3
00004c  2905              CMP      r1,#5                 ;44
00004e  d3f5              BCC      |L1.60|
;;;47     	in/=10;
;;;48     	}   
;;;49     }
000050  bd10              POP      {r4,pc}
;;;50     //-----------------------------------------------
                          ENDP

                  bcd2lcd_zero PROC
;;;51     void bcd2lcd_zero(char sig)
000052  b5f0              PUSH     {r4-r7,lr}
;;;52     {
;;;53     char i;
;;;54     zero_on=1;
000054  4bef              LDR      r3,|L1.1044|
000056  2101              MOVS     r1,#1
;;;55     for (i=5;i>0;i--)
;;;56     	{
;;;57     	if(zero_on&&(!dig[i-1])&&(i>sig))
;;;58     		{
;;;59     		dig[i-1]=0x20;
000058  2720              MOVS     r7,#0x20
00005a  7019              STRB     r1,[r3,#0]            ;54
00005c  2105              MOVS     r1,#5                 ;55
00005e  4aec              LDR      r2,|L1.1040|
000060  2600              MOVS     r6,#0                 ;54
000062  e001              B        |L1.104|
                  |L1.100|
000064  781c              LDRB     r4,[r3,#0]            ;57  ; zero_on
000066  b144              CBZ      r4,|L1.122|
                  |L1.104|
000068  1854              ADDS     r4,r2,r1              ;57
00006a  f8145c01          LDRB     r5,[r4,#-1]           ;57
00006e  b925              CBNZ     r5,|L1.122|
000070  4281              CMP      r1,r0                 ;57
000072  d902              BLS      |L1.122|
000074  f8047c01          STRB     r7,[r4,#-1]
000078  e005              B        |L1.134|
                  |L1.122|
;;;60     		}
;;;61     	else
;;;62     		{
;;;63     		dig[i-1]=dig[i-1]+0x30;
00007a  1854              ADDS     r4,r2,r1
00007c  f8145d01          LDRB     r5,[r4,#-1]!
000080  3530              ADDS     r5,r5,#0x30
000082  7025              STRB     r5,[r4,#0]
;;;64     		zero_on=0;
000084  701e              STRB     r6,[r3,#0]
                  |L1.134|
000086  1e49              SUBS     r1,r1,#1              ;55
000088  f01101ff          ANDS     r1,r1,#0xff           ;55
00008c  d1ea              BNE      |L1.100|
;;;65     		}	
;;;66     	}
;;;67     }             
00008e  bdf0              POP      {r4-r7,pc}
;;;68     
                          ENDP

                  int2lcd_m PROC
;;;69     //-----------------------------------------------
;;;70     void int2lcd_m(signed short in,char xy,char des)
000090  b570              PUSH     {r4-r6,lr}
;;;71     {
000092  460d              MOV      r5,r1
000094  4614              MOV      r4,r2
;;;72     char i;
;;;73     char n;
;;;74     char bMinus;
;;;75     bMinus=0;
;;;76     if(in<0)
000096  2800              CMP      r0,#0
000098  da02              BGE      |L1.160|
;;;77     	{
;;;78     	bMinus=1;
;;;79     	in=(~in+1);
00009a  43c0              MVNS     r0,r0
00009c  1c40              ADDS     r0,r0,#1
00009e  b200              SXTH     r0,r0
                  |L1.160|
;;;80     	}
;;;81     bin2bcd_int(in);
0000a0  f7fffffe          BL       bin2bcd_int
;;;82     bcd2lcd_zero(des+1);
0000a4  1c60              ADDS     r0,r4,#1
0000a6  b2c0              UXTB     r0,r0
0000a8  f7fffffe          BL       bcd2lcd_zero
;;;83     i=find(xy);
0000ac  4628              MOV      r0,r5
0000ae  f7fffffe          BL       find
;;;84     if(i!=255)
0000b2  28ff              CMP      r0,#0xff
0000b4  d019              BEQ      |L1.234|
;;;85     	{
;;;86     	for (n=0;n<5;n++)
;;;87     		{ 
;;;88     		if(n<des)
;;;89     			{
;;;90     			lcd_buffer[i]=dig[n];
0000b6  4ad6              LDR      r2,|L1.1040|
0000b8  4bd4              LDR      r3,|L1.1036|
0000ba  2100              MOVS     r1,#0                 ;86
                  |L1.188|
0000bc  42a1              CMP      r1,r4                 ;88
0000be  d201              BCS      |L1.196|
0000c0  5c55              LDRB     r5,[r2,r1]
0000c2  e013              B        |L1.236|
                  |L1.196|
;;;91     			} 
;;;92     		else if (n==des)
0000c4  d104              BNE      |L1.208|
;;;93        			{
;;;94        			lcd_buffer[i]='.';
0000c6  f04f052e          MOV      r5,#0x2e
0000ca  541d              STRB     r5,[r3,r0]
;;;95        			lcd_buffer[i-1]=dig[n];
0000cc  5c55              LDRB     r5,[r2,r1]
0000ce  e003              B        |L1.216|
                  |L1.208|
;;;96        			} 	  
;;;97     		else if((n>=des)&&(dig[n]!=0x20))
0000d0  5c55              LDRB     r5,[r2,r1]
0000d2  2d20              CMP      r5,#0x20
0000d4  d003              BEQ      |L1.222|
;;;98     			{
;;;99     			if(!des)lcd_buffer[i]=dig[n];	
0000d6  b14c              CBZ      r4,|L1.236|
                  |L1.216|
;;;100    			else lcd_buffer[i-1]=dig[n];
0000d8  181e              ADDS     r6,r3,r0
0000da  f8065c01          STRB     r5,[r6,#-1]
                  |L1.222|
;;;101       			}
;;;102       		else if((n>=des)&&(dig[n]!=0x20)&&(bMinus))
;;;103    	   		{
;;;104    			if(!des)lcd_buffer[i]='-';	
;;;105    			else lcd_buffer[i-1]='-';
;;;106    			n=5;
;;;107       			}	   
;;;108    		i--;	
0000de  1e40              SUBS     r0,r0,#1
0000e0  1c49              ADDS     r1,r1,#1              ;86
0000e2  b2c9              UXTB     r1,r1                 ;86
0000e4  b2c0              UXTB     r0,r0
0000e6  2905              CMP      r1,#5                 ;86
0000e8  d3e8              BCC      |L1.188|
                  |L1.234|
;;;109    		}
;;;110    	}
;;;111    }
0000ea  bd70              POP      {r4-r6,pc}
                  |L1.236|
0000ec  541d              STRB     r5,[r3,r0]            ;99
0000ee  e7f6              B        |L1.222|
;;;112    
                          ENDP

                  int2lcd_mm PROC
;;;113    //-----------------------------------------------
;;;114    void int2lcd_mm(signed short in,char xy,char des)
0000f0  b5f0              PUSH     {r4-r7,lr}
;;;115    {
0000f2  460d              MOV      r5,r1
0000f4  4614              MOV      r4,r2
;;;116    char i;
;;;117    char n;
;;;118    char minus='+';
;;;119    if(in<0)
0000f6  2800              CMP      r0,#0
0000f8  da01              BGE      |L1.254|
;;;120    	{
;;;121    	in=-in;
0000fa  4240              RSBS     r0,r0,#0
0000fc  b200              SXTH     r0,r0
                  |L1.254|
;;;122    	minus='-';
;;;123    	}
;;;124    minus='-';	
;;;125    bin2bcd_int(in);
0000fe  f7fffffe          BL       bin2bcd_int
;;;126    bcd2lcd_zero(des+1);
000102  1c60              ADDS     r0,r4,#1
000104  b2c0              UXTB     r0,r0
000106  f7fffffe          BL       bcd2lcd_zero
;;;127    i=find(xy);
00010a  4628              MOV      r0,r5
00010c  f7fffffe          BL       find
;;;128    for (n=0;n<5;n++)
;;;129    	{
;;;130       	if(!des&&(dig[n]!=' '))
000110  4abf              LDR      r2,|L1.1040|
;;;131       		{
;;;132       		if((dig[n+1]==' ')&&(minus=='-'))lcd_buffer[i-1]='-';
000112  4bbe              LDR      r3,|L1.1036|
000114  2100              MOVS     r1,#0                 ;128
                  |L1.278|
000116  b964              CBNZ     r4,|L1.306|
000118  5c55              LDRB     r5,[r2,r1]            ;130
00011a  2d20              CMP      r5,#0x20              ;130
00011c  d009              BEQ      |L1.306|
00011e  1856              ADDS     r6,r2,r1
000120  7876              LDRB     r6,[r6,#1]
000122  2e20              CMP      r6,#0x20
000124  d103              BNE      |L1.302|
000126  262d              MOVS     r6,#0x2d
000128  181f              ADDS     r7,r3,r0
00012a  f8076c01          STRB     r6,[r7,#-1]
                  |L1.302|
;;;133       		lcd_buffer[i]=dig[n];	 
00012e  541d              STRB     r5,[r3,r0]
000130  e00f              B        |L1.338|
                  |L1.306|
;;;134       		}
;;;135       	else 
;;;136       		{
;;;137       		if(n<des)lcd_buffer[i]=dig[n];
000132  42a1              CMP      r1,r4
000134  d201              BCS      |L1.314|
000136  5c55              LDRB     r5,[r2,r1]
000138  e7f9              B        |L1.302|
                  |L1.314|
;;;138       		else if (n==des)
00013a  d104              BNE      |L1.326|
;;;139       			{
;;;140       			lcd_buffer[i]='.';
00013c  f04f052e          MOV      r5,#0x2e
000140  541d              STRB     r5,[r3,r0]
;;;141       			lcd_buffer[i-1]=dig[n];
000142  5c55              LDRB     r5,[r2,r1]
000144  e002              B        |L1.332|
                  |L1.326|
;;;142       			} 
;;;143       		else if ((n>des)&&(dig[n]!=' ')) lcd_buffer[i-1]=dig[n]; 
000146  5c55              LDRB     r5,[r2,r1]
000148  2d20              CMP      r5,#0x20
00014a  d002              BEQ      |L1.338|
                  |L1.332|
00014c  181e              ADDS     r6,r3,r0
00014e  f8065c01          STRB     r5,[r6,#-1]
                  |L1.338|
;;;144       		else if ((minus=='-')&&(n>des)&&(dig[n]!=' ')&&(dig[n+1]==' ')) lcd_buffer[i]='-';  		
;;;145       		}  
;;;146    		
;;;147    	i--;	
000152  1e40              SUBS     r0,r0,#1
000154  1c49              ADDS     r1,r1,#1              ;128
000156  b2c9              UXTB     r1,r1                 ;128
000158  b2c0              UXTB     r0,r0
00015a  2905              CMP      r1,#5                 ;128
00015c  d3db              BCC      |L1.278|
;;;148    	}
;;;149    }
00015e  bdf0              POP      {r4-r7,pc}
;;;150    
                          ENDP

                  int2lcd_mmm PROC
;;;151    //-----------------------------------------------
;;;152    void int2lcd_mmm(signed short in,char xy,char des)
000160  b5fe              PUSH     {r1-r7,lr}
;;;153    {
;;;154    signed char i;
;;;155    char n;
;;;156    char s[10];
;;;157    char minus='+';
000162  232b              MOVS     r3,#0x2b
;;;158    char zero_on;
;;;159    char simb_num;
;;;160    
;;;161    if(in<0)
000164  2800              CMP      r0,#0
000166  da02              BGE      |L1.366|
;;;162    	{
;;;163    	in=-in;
000168  4240              RSBS     r0,r0,#0
00016a  b200              SXTH     r0,r0
;;;164    	minus='-';
00016c  232d              MOVS     r3,#0x2d
                  |L1.366|
;;;165    	}
;;;166    
;;;167    for(i=0;i<10;i++)
00016e  2500              MOVS     r5,#0
;;;168    	{
;;;169    	s[i]=in%10;
000170  260a              MOVS     r6,#0xa
000172  466c              MOV      r4,sp                 ;156
                  |L1.372|
000174  fb90f7f6          SDIV     r7,r0,r6
000178  fb060017          MLS      r0,r6,r7,r0
00017c  5560              STRB     r0,[r4,r5]
00017e  1c6d              ADDS     r5,r5,#1              ;167
000180  b26d              SXTB     r5,r5                 ;167
;;;170    	in/=10;
000182  b238              SXTH     r0,r7
000184  2d0a              CMP      r5,#0xa               ;167
000186  dbf5              BLT      |L1.372|
;;;171    	}   
;;;172    
;;;173    zero_on=1;
000188  2601              MOVS     r6,#1
;;;174    simb_num=0;
00018a  2500              MOVS     r5,#0
;;;175    
;;;176    for (i=9;i>=0;i--)
00018c  2009              MOVS     r0,#9
;;;177    	{
;;;178    	if(zero_on&&(!s[i])&&(i>(des)))
;;;179    	     {
;;;180    	     s[i]=0x20;
00018e  2720              MOVS     r7,#0x20
000190  e000              B        |L1.404|
                  |L1.402|
000192  b146              CBZ      r6,|L1.422|
                  |L1.404|
000194  f814c000          LDRB     r12,[r4,r0]           ;178
000198  f1bc0f00          CMP      r12,#0                ;178
00019c  d103              BNE      |L1.422|
00019e  4290              CMP      r0,r2                 ;178
0001a0  dd01              BLE      |L1.422|
0001a2  5427              STRB     r7,[r4,r0]
0001a4  e005              B        |L1.434|
                  |L1.422|
;;;181    	     }
;;;182    	else 
;;;183    	     {
;;;184    	     s[i]=s[i]+0x30;
0001a6  5c26              LDRB     r6,[r4,r0]
0001a8  3630              ADDS     r6,r6,#0x30
0001aa  5426              STRB     r6,[r4,r0]
;;;185    	     zero_on=0;
0001ac  2600              MOVS     r6,#0
;;;186    	     simb_num++;
0001ae  1c6d              ADDS     r5,r5,#1
0001b0  b2ed              UXTB     r5,r5
                  |L1.434|
0001b2  1e40              SUBS     r0,r0,#1              ;176
0001b4  b240              SXTB     r0,r0                 ;176
0001b6  2800              CMP      r0,#0                 ;176
0001b8  daeb              BGE      |L1.402|
;;;187    	     }
;;;188    	 }
;;;189    	          
;;;190    if(minus=='-')	
0001ba  2b2d              CMP      r3,#0x2d
0001bc  d102              BNE      |L1.452|
;;;191         {
;;;192         s[simb_num++]=minus; 
0001be  5563              STRB     r3,[r4,r5]
0001c0  1c6d              ADDS     r5,r5,#1
0001c2  b2ed              UXTB     r5,r5
                  |L1.452|
;;;193         }    
;;;194    if(des)
0001c4  b16a              CBZ      r2,|L1.482|
;;;195         {
;;;196         for(i=simb_num;i>des;i--)
0001c6  b268              SXTB     r0,r5
0001c8  e005              B        |L1.470|
                  |L1.458|
;;;197              {
;;;198              s[i]=s[i-1];
0001ca  1823              ADDS     r3,r4,r0
0001cc  f8133c01          LDRB     r3,[r3,#-1]
0001d0  5423              STRB     r3,[r4,r0]
0001d2  1e40              SUBS     r0,r0,#1              ;196
0001d4  b240              SXTB     r0,r0                 ;196
                  |L1.470|
0001d6  4290              CMP      r0,r2                 ;196
0001d8  dcf7              BGT      |L1.458|
;;;199              }
;;;200         s[des]='.';
0001da  202e              MOVS     r0,#0x2e
;;;201         simb_num++;     
0001dc  1c6d              ADDS     r5,r5,#1
0001de  54a0              STRB     r0,[r4,r2]            ;200
0001e0  b2ed              UXTB     r5,r5
                  |L1.482|
;;;202         }
;;;203    	
;;;204    n=find(xy);
0001e2  4608              MOV      r0,r1
0001e4  f7fffffe          BL       find
;;;205    for (i=0;i<simb_num;i++)
0001e8  2100              MOVS     r1,#0
;;;206    	{
;;;207         lcd_buffer[n-i]=s[i];
0001ea  4a88              LDR      r2,|L1.1036|
0001ec  e004              B        |L1.504|
                  |L1.494|
0001ee  5c63              LDRB     r3,[r4,r1]
0001f0  1a46              SUBS     r6,r0,r1
0001f2  1c49              ADDS     r1,r1,#1              ;205
0001f4  5593              STRB     r3,[r2,r6]
0001f6  b249              SXTB     r1,r1                 ;205
                  |L1.504|
0001f8  42a9              CMP      r1,r5                 ;205
0001fa  dbf8              BLT      |L1.494|
;;;208    	}
;;;209    }
0001fc  bdfe              POP      {r1-r7,pc}
;;;210    
                          ENDP

                  int2lcdyx_mmm PROC
;;;211    //-----------------------------------------------
;;;212    void int2lcdyx_mmm(signed short in, char y,char x,char des)
0001fe  b5fe              PUSH     {r1-r7,lr}
;;;213    {
;;;214    signed char i;
;;;215    char n;
;;;216    char s[10];
;;;217    char minus='+';
000200  262b              MOVS     r6,#0x2b
;;;218    char zero_on;
;;;219    char simb_num;
;;;220    
;;;221    if(in<0)
000202  2800              CMP      r0,#0
000204  da02              BGE      |L1.524|
;;;222    	{
;;;223    	in=-in;
000206  4240              RSBS     r0,r0,#0
000208  b200              SXTH     r0,r0
;;;224    	minus='-';
00020a  262d              MOVS     r6,#0x2d
                  |L1.524|
;;;225    	}
;;;226    
;;;227    for(i=0;i<10;i++)
00020c  2400              MOVS     r4,#0
;;;228    	{
;;;229    	s[i]=in%10;
00020e  270a              MOVS     r7,#0xa
000210  ea4f050d          MOV.W    r5,sp                 ;216
                  |L1.532|
000214  fb90fcf7          SDIV     r12,r0,r7
000218  fb07001c          MLS      r0,r7,r12,r0
00021c  5528              STRB     r0,[r5,r4]
00021e  1c64              ADDS     r4,r4,#1              ;227
000220  b264              SXTB     r4,r4                 ;227
;;;230    	in/=10;
000222  fa0ff08c          SXTH     r0,r12
000226  2c0a              CMP      r4,#0xa               ;227
000228  dbf4              BLT      |L1.532|
;;;231    	}   
;;;232    
;;;233    zero_on=1;
00022a  2701              MOVS     r7,#1
;;;234    simb_num=0;
00022c  2000              MOVS     r0,#0
;;;235    
;;;236    for (i=9;i>=0;i--)
00022e  2409              MOVS     r4,#9
;;;237    	{
;;;238    	if(zero_on&&(!s[i])&&(i>(des)))
;;;239    	     {
;;;240    	     s[i]=0x20;
000230  f04f0c20          MOV      r12,#0x20
000234  e000              B        |L1.568|
                  |L1.566|
000236  b14f              CBZ      r7,|L1.588|
                  |L1.568|
000238  f815e004          LDRB     lr,[r5,r4]            ;238
00023c  f1be0f00          CMP      lr,#0                 ;238
000240  d104              BNE      |L1.588|
000242  429c              CMP      r4,r3                 ;238
000244  dd02              BLE      |L1.588|
000246  f805c004          STRB     r12,[r5,r4]
00024a  e005              B        |L1.600|
                  |L1.588|
;;;241    	     }
;;;242    	else 
;;;243    	     {
;;;244    	     s[i]=s[i]+0x30;
00024c  5d2f              LDRB     r7,[r5,r4]
00024e  3730              ADDS     r7,r7,#0x30
000250  552f              STRB     r7,[r5,r4]
;;;245    	     zero_on=0;
000252  2700              MOVS     r7,#0
;;;246    	     simb_num++;
000254  1c40              ADDS     r0,r0,#1
000256  b2c0              UXTB     r0,r0
                  |L1.600|
000258  1e64              SUBS     r4,r4,#1              ;236
00025a  b264              SXTB     r4,r4                 ;236
00025c  2c00              CMP      r4,#0                 ;236
00025e  daea              BGE      |L1.566|
;;;247    	     }
;;;248    	 }
;;;249    	          
;;;250    if(minus=='-')	
000260  2e2d              CMP      r6,#0x2d
000262  d102              BNE      |L1.618|
;;;251         {
;;;252         s[simb_num++]=minus; 
000264  542e              STRB     r6,[r5,r0]
000266  1c40              ADDS     r0,r0,#1
000268  b2c0              UXTB     r0,r0
                  |L1.618|
;;;253         }    
;;;254    if(des)
00026a  b16b              CBZ      r3,|L1.648|
;;;255         {
;;;256         for(i=simb_num;i>des;i--)
00026c  b244              SXTB     r4,r0
00026e  e005              B        |L1.636|
                  |L1.624|
;;;257              {
;;;258              s[i]=s[i-1];
000270  192e              ADDS     r6,r5,r4
000272  f8166c01          LDRB     r6,[r6,#-1]
000276  552e              STRB     r6,[r5,r4]
000278  1e64              SUBS     r4,r4,#1              ;256
00027a  b264              SXTB     r4,r4                 ;256
                  |L1.636|
00027c  429c              CMP      r4,r3                 ;256
00027e  dcf7              BGT      |L1.624|
;;;259              }
;;;260         s[des]='.';
000280  242e              MOVS     r4,#0x2e
;;;261         simb_num++;     
000282  1c40              ADDS     r0,r0,#1
000284  54ec              STRB     r4,[r5,r3]            ;260
000286  b2c0              UXTB     r0,r0
                  |L1.648|
;;;262         }
;;;263    	
;;;264    n=x+(20*y);
000288  eb010181          ADD      r1,r1,r1,LSL #2
00028c  eb020181          ADD      r1,r2,r1,LSL #2
000290  b2ca              UXTB     r2,r1
;;;265    for (i=0;i<simb_num;i++)
000292  2100              MOVS     r1,#0
;;;266    	{
;;;267         lcd_buffer[n-i]=s[i];
000294  4b5d              LDR      r3,|L1.1036|
000296  e004              B        |L1.674|
                  |L1.664|
000298  5c6c              LDRB     r4,[r5,r1]
00029a  1a56              SUBS     r6,r2,r1
00029c  1c49              ADDS     r1,r1,#1              ;265
00029e  559c              STRB     r4,[r3,r6]
0002a0  b249              SXTB     r1,r1                 ;265
                  |L1.674|
0002a2  4281              CMP      r1,r0                 ;265
0002a4  dbf8              BLT      |L1.664|
;;;268    	}
;;;269    }
0002a6  bdfe              POP      {r1-r7,pc}
;;;270    
                          ENDP

                  long2lcd_mmm PROC
;;;271    //-----------------------------------------------
;;;272    void long2lcd_mmm(signed long in,char xy,char des)
0002a8  b5fe              PUSH     {r1-r7,lr}
;;;273    {
;;;274    signed char i;
;;;275    char n;
;;;276    char s[10];
;;;277    char minus='+';
0002aa  232b              MOVS     r3,#0x2b
;;;278    char zero_on;
;;;279    char simb_num;
;;;280    
;;;281    if(in<0)
0002ac  2800              CMP      r0,#0
0002ae  da01              BGE      |L1.692|
;;;282    	{
;;;283    	in=-in;
0002b0  4240              RSBS     r0,r0,#0
;;;284    	minus='-';
0002b2  232d              MOVS     r3,#0x2d
                  |L1.692|
;;;285    	}
;;;286    
;;;287    for(i=0;i<10;i++)
0002b4  2500              MOVS     r5,#0
;;;288    	{
;;;289    	s[i]=in%10;
0002b6  260a              MOVS     r6,#0xa
0002b8  466c              MOV      r4,sp                 ;276
                  |L1.698|
0002ba  4607              MOV      r7,r0
0002bc  fb90f0f6          SDIV     r0,r0,r6
0002c0  fb067710          MLS      r7,r6,r0,r7
0002c4  5567              STRB     r7,[r4,r5]
0002c6  1c6d              ADDS     r5,r5,#1              ;287
0002c8  b26d              SXTB     r5,r5                 ;287
0002ca  2d0a              CMP      r5,#0xa               ;287
0002cc  dbf5              BLT      |L1.698|
;;;290    	in/=10;
;;;291    	}   
;;;292    
;;;293    zero_on=1;
0002ce  2601              MOVS     r6,#1
;;;294    simb_num=0;
0002d0  2500              MOVS     r5,#0
;;;295    
;;;296    for (i=9;i>=0;i--)
0002d2  2009              MOVS     r0,#9
;;;297    	{
;;;298    	if(zero_on&&(!s[i])&&(i>(des)))
;;;299    	     {
;;;300    	     s[i]=0x20;
0002d4  2720              MOVS     r7,#0x20
0002d6  e000              B        |L1.730|
                  |L1.728|
0002d8  b146              CBZ      r6,|L1.748|
                  |L1.730|
0002da  f814c000          LDRB     r12,[r4,r0]           ;298
0002de  f1bc0f00          CMP      r12,#0                ;298
0002e2  d103              BNE      |L1.748|
0002e4  4290              CMP      r0,r2                 ;298
0002e6  dd01              BLE      |L1.748|
0002e8  5427              STRB     r7,[r4,r0]
0002ea  e005              B        |L1.760|
                  |L1.748|
;;;301    	     }
;;;302    	else 
;;;303    	     {
;;;304    	     s[i]=s[i]+0x30;
0002ec  5c26              LDRB     r6,[r4,r0]
0002ee  3630              ADDS     r6,r6,#0x30
0002f0  5426              STRB     r6,[r4,r0]
;;;305    	     zero_on=0;
0002f2  2600              MOVS     r6,#0
;;;306    	     simb_num++;
0002f4  1c6d              ADDS     r5,r5,#1
0002f6  b2ed              UXTB     r5,r5
                  |L1.760|
0002f8  1e40              SUBS     r0,r0,#1              ;296
0002fa  b240              SXTB     r0,r0                 ;296
0002fc  2800              CMP      r0,#0                 ;296
0002fe  daeb              BGE      |L1.728|
;;;307    	     }
;;;308    	 }
;;;309    	          
;;;310    if(minus=='-')	
000300  2b2d              CMP      r3,#0x2d
000302  d102              BNE      |L1.778|
;;;311         {
;;;312         s[simb_num++]=minus; 
000304  5563              STRB     r3,[r4,r5]
000306  1c6d              ADDS     r5,r5,#1
000308  b2ed              UXTB     r5,r5
                  |L1.778|
;;;313         }    
;;;314    if(des)
00030a  b16a              CBZ      r2,|L1.808|
;;;315         {
;;;316         for(i=simb_num;i>des;i--)
00030c  b268              SXTB     r0,r5
00030e  e005              B        |L1.796|
                  |L1.784|
;;;317              {
;;;318              s[i]=s[i-1];
000310  1823              ADDS     r3,r4,r0
000312  f8133c01          LDRB     r3,[r3,#-1]
000316  5423              STRB     r3,[r4,r0]
000318  1e40              SUBS     r0,r0,#1              ;316
00031a  b240              SXTB     r0,r0                 ;316
                  |L1.796|
00031c  4290              CMP      r0,r2                 ;316
00031e  dcf7              BGT      |L1.784|
;;;319              }
;;;320         s[des]='.';
000320  202e              MOVS     r0,#0x2e
;;;321         simb_num++;     
000322  1c6d              ADDS     r5,r5,#1
000324  54a0              STRB     r0,[r4,r2]            ;320
000326  b2ed              UXTB     r5,r5
                  |L1.808|
;;;322         }
;;;323    	
;;;324    n=find(xy);
000328  4608              MOV      r0,r1
00032a  f7fffffe          BL       find
;;;325    for (i=0;i<simb_num;i++)
00032e  2100              MOVS     r1,#0
;;;326    	{
;;;327         lcd_buffer[n-i]=s[i];
000330  4a36              LDR      r2,|L1.1036|
000332  e004              B        |L1.830|
                  |L1.820|
000334  5c63              LDRB     r3,[r4,r1]
000336  1a46              SUBS     r6,r0,r1
000338  1c49              ADDS     r1,r1,#1              ;325
00033a  5593              STRB     r3,[r2,r6]
00033c  b249              SXTB     r1,r1                 ;325
                  |L1.830|
00033e  42a9              CMP      r1,r5                 ;325
000340  dbf8              BLT      |L1.820|
;;;328    	}
;;;329    }
000342  bdfe              POP      {r1-r7,pc}
;;;330    
                          ENDP

                  long2lcdyx_mmm PROC
;;;331    //-----------------------------------------------
;;;332    void long2lcdyx_mmm(signed long in,char y,char x,char des)
000344  b5fe              PUSH     {r1-r7,lr}
;;;333    {
;;;334    signed char i;
;;;335    char n;
;;;336    char s[10];
;;;337    char minus='+';
000346  262b              MOVS     r6,#0x2b
;;;338    char zero_on;
;;;339    char simb_num;
;;;340    
;;;341    if(in<0)
000348  2800              CMP      r0,#0
00034a  da01              BGE      |L1.848|
;;;342    	{
;;;343    	in=-in;
00034c  4240              RSBS     r0,r0,#0
;;;344    	minus='-';
00034e  262d              MOVS     r6,#0x2d
                  |L1.848|
;;;345    	}
;;;346    
;;;347    for(i=0;i<10;i++)
000350  2400              MOVS     r4,#0
;;;348    	{
;;;349    	s[i]=in%10;
000352  270a              MOVS     r7,#0xa
000354  466d              MOV      r5,sp                 ;336
                  |L1.854|
000356  4684              MOV      r12,r0
000358  fb90f0f7          SDIV     r0,r0,r7
00035c  fb07cc10          MLS      r12,r7,r0,r12
000360  f805c004          STRB     r12,[r5,r4]
000364  1c64              ADDS     r4,r4,#1              ;347
000366  b264              SXTB     r4,r4                 ;347
000368  2c0a              CMP      r4,#0xa               ;347
00036a  dbf4              BLT      |L1.854|
;;;350    	in/=10;
;;;351    	}   
;;;352    
;;;353    zero_on=1;
00036c  2701              MOVS     r7,#1
;;;354    simb_num=0;
00036e  2000              MOVS     r0,#0
;;;355    
;;;356    for (i=9;i>=0;i--)
000370  2409              MOVS     r4,#9
;;;357    	{
;;;358    	if(zero_on&&(!s[i])&&(i>(des)))
;;;359    	     {
;;;360    	     s[i]=0x20;
000372  f04f0c20          MOV      r12,#0x20
000376  e000              B        |L1.890|
                  |L1.888|
000378  b14f              CBZ      r7,|L1.910|
                  |L1.890|
00037a  f815e004          LDRB     lr,[r5,r4]            ;358
00037e  f1be0f00          CMP      lr,#0                 ;358
000382  d104              BNE      |L1.910|
000384  429c              CMP      r4,r3                 ;358
000386  dd02              BLE      |L1.910|
000388  f805c004          STRB     r12,[r5,r4]
00038c  e005              B        |L1.922|
                  |L1.910|
;;;361    	     }
;;;362    	else 
;;;363    	     {
;;;364    	     s[i]=s[i]+0x30;
00038e  5d2f              LDRB     r7,[r5,r4]
000390  3730              ADDS     r7,r7,#0x30
000392  552f              STRB     r7,[r5,r4]
;;;365    	     zero_on=0;
000394  2700              MOVS     r7,#0
;;;366    	     simb_num++;
000396  1c40              ADDS     r0,r0,#1
000398  b2c0              UXTB     r0,r0
                  |L1.922|
00039a  1e64              SUBS     r4,r4,#1              ;356
00039c  b264              SXTB     r4,r4                 ;356
00039e  2c00              CMP      r4,#0                 ;356
0003a0  daea              BGE      |L1.888|
;;;367    	     }
;;;368    	 }
;;;369    	          
;;;370    if(minus=='-')	
0003a2  2e2d              CMP      r6,#0x2d
0003a4  d102              BNE      |L1.940|
;;;371         {
;;;372         s[simb_num++]=minus; 
0003a6  542e              STRB     r6,[r5,r0]
0003a8  1c40              ADDS     r0,r0,#1
0003aa  b2c0              UXTB     r0,r0
                  |L1.940|
;;;373         }    
;;;374    if(des)
0003ac  b16b              CBZ      r3,|L1.970|
;;;375         {
;;;376         for(i=simb_num;i>des;i--)
0003ae  b244              SXTB     r4,r0
0003b0  e005              B        |L1.958|
                  |L1.946|
;;;377              {
;;;378              s[i]=s[i-1];
0003b2  192e              ADDS     r6,r5,r4
0003b4  f8166c01          LDRB     r6,[r6,#-1]
0003b8  552e              STRB     r6,[r5,r4]
0003ba  1e64              SUBS     r4,r4,#1              ;376
0003bc  b264              SXTB     r4,r4                 ;376
                  |L1.958|
0003be  429c              CMP      r4,r3                 ;376
0003c0  dcf7              BGT      |L1.946|
;;;379              }
;;;380         s[des]='.';
0003c2  242e              MOVS     r4,#0x2e
;;;381         simb_num++;     
0003c4  1c40              ADDS     r0,r0,#1
0003c6  54ec              STRB     r4,[r5,r3]            ;380
0003c8  b2c0              UXTB     r0,r0
                  |L1.970|
;;;382         }
;;;383    	
;;;384    n=(20*y)+x;
0003ca  eb010181          ADD      r1,r1,r1,LSL #2
0003ce  eb020181          ADD      r1,r2,r1,LSL #2
0003d2  b2ca              UXTB     r2,r1
;;;385    for (i=0;i<simb_num;i++)
0003d4  2100              MOVS     r1,#0
;;;386    	{
;;;387         lcd_buffer[n-i]=s[i];
0003d6  4b0d              LDR      r3,|L1.1036|
0003d8  e004              B        |L1.996|
                  |L1.986|
0003da  5c6c              LDRB     r4,[r5,r1]
0003dc  1a56              SUBS     r6,r2,r1
0003de  1c49              ADDS     r1,r1,#1              ;385
0003e0  559c              STRB     r4,[r3,r6]
0003e2  b249              SXTB     r1,r1                 ;385
                  |L1.996|
0003e4  4281              CMP      r1,r0                 ;385
0003e6  dbf8              BLT      |L1.986|
;;;388    	}
;;;389    
;;;390    
;;;391    
;;;392    }
0003e8  bdfe              POP      {r1-r7,pc}
;;;393    
                          ENDP

                  int2lcdyx PROC
;;;394    //-----------------------------------------------
;;;395    void int2lcdyx(unsigned short in,char y,char x,char des)
0003ea  b570              PUSH     {r4-r6,lr}
;;;396    {
0003ec  460d              MOV      r5,r1
0003ee  4616              MOV      r6,r2
0003f0  461c              MOV      r4,r3
;;;397    char i;
;;;398    char n;
;;;399    bin2bcd_int(in);
0003f2  f7fffffe          BL       bin2bcd_int
;;;400    bcd2lcd_zero(des+1);
0003f6  1c60              ADDS     r0,r4,#1
0003f8  b2c0              UXTB     r0,r0
0003fa  f7fffffe          BL       bcd2lcd_zero
;;;401    i=(y*20)+x;
0003fe  eb050085          ADD      r0,r5,r5,LSL #2
000402  eb060080          ADD      r0,r6,r0,LSL #2
000406  b2c1              UXTB     r1,r0
;;;402    for (n=0;n<5;n++)
000408  2000              MOVS     r0,#0
;;;403    	{ 
;;;404    	if(n<des)
;;;405    		{
;;;406    		lcd_buffer[i]=dig[n];
00040a  e005              B        |L1.1048|
                  |L1.1036|
                          DCD      lcd_buffer
                  |L1.1040|
                          DCD      ||dig||
                  |L1.1044|
                          DCD      zero_on
                  |L1.1048|
000418  4af8              LDR      r2,|L1.2044|
00041a  4bf9              LDR      r3,|L1.2048|
                  |L1.1052|
00041c  42a0              CMP      r0,r4                 ;404
00041e  d201              BCS      |L1.1060|
000420  5c15              LDRB     r5,[r2,r0]
000422  545d              STRB     r5,[r3,r1]
                  |L1.1060|
;;;407    		}   
;;;408    	if((n>=des)&&(dig[n]!=0x20))
000424  d306              BCC      |L1.1076|
000426  5c15              LDRB     r5,[r2,r0]
000428  2d20              CMP      r5,#0x20
00042a  d003              BEQ      |L1.1076|
;;;409    		{
;;;410    		if(!des)lcd_buffer[i]=dig[n];	
00042c  b14c              CBZ      r4,|L1.1090|
;;;411    		else lcd_buffer[i-1]=dig[n];
00042e  185e              ADDS     r6,r3,r1
000430  f8065c01          STRB     r5,[r6,#-1]
                  |L1.1076|
;;;412       		}   
;;;413    	i--;	
000434  1e49              SUBS     r1,r1,#1
000436  1c40              ADDS     r0,r0,#1              ;402
000438  b2c0              UXTB     r0,r0                 ;402
00043a  b2c9              UXTB     r1,r1
00043c  2805              CMP      r0,#5                 ;402
00043e  d3ed              BCC      |L1.1052|
;;;414    	}
;;;415    }
000440  bd70              POP      {r4-r6,pc}
                  |L1.1090|
000442  545d              STRB     r5,[r3,r1]            ;410
000444  e7f6              B        |L1.1076|
;;;416    
                          ENDP

                  event2ind PROC
;;;418    //-----------------------------------------------
;;;419    void event2ind(char num, char simbol)
000446  4770              BX       lr
;;;420    {
;;;421    
;;;422    }	
;;;423    
                          ENDP

                  community2lcd PROC
;;;424    //-----------------------------------------------
;;;425    void community2lcd(char* in,
000448  b570              PUSH     {r4-r6,lr}
;;;426    			char xy,
;;;427    			char flash_pos,
;;;428    			char flash_on)
;;;429    {
00044a  4604              MOV      r4,r0
00044c  4608              MOV      r0,r1
00044e  4615              MOV      r5,r2
000450  461e              MOV      r6,r3
;;;430    char temp;
;;;431    char i;
;;;432    //char n;
;;;433    
;;;434    
;;;435    i=find(xy);
000452  f7fffffe          BL       find
;;;436    
;;;437    //in1=192;
;;;438    
;;;439    //in2=34;
;;;440    
;;;441    
;;;442    
;;;443    temp=i;
;;;444    
;;;445    //ptr_ram=&lcd_buffer[find(xy)];
;;;446    if(temp!=255)
;;;447    while (*in)
;;;448    	{
;;;449    	lcd_buffer[temp]=*in++;
000456  4bea              LDR      r3,|L1.2048|
000458  4601              MOV      r1,r0                 ;435
00045a  28ff              CMP      r0,#0xff              ;446
00045c  d104              BNE      |L1.1128|
00045e  e006              B        |L1.1134|
                  |L1.1120|
000460  541a              STRB     r2,[r3,r0]
000462  1c64              ADDS     r4,r4,#1
;;;450    	temp++;
000464  1c40              ADDS     r0,r0,#1
000466  b2c0              UXTB     r0,r0
                  |L1.1128|
000468  7822              LDRB     r2,[r4,#0]            ;447
00046a  2a00              CMP      r2,#0                 ;447
00046c  d1f8              BNE      |L1.1120|
                  |L1.1134|
;;;451        	}
;;;452    
;;;453    
;;;454    
;;;455    if((bFL2)&&(flash_on))
00046e  48e5              LDR      r0,|L1.2052|
000470  7800              LDRB     r0,[r0,#0]  ; bFL2
000472  2800              CMP      r0,#0
000474  d004              BEQ      |L1.1152|
000476  2e00              CMP      r6,#0
000478  d002              BEQ      |L1.1152|
;;;456    	{
;;;457    	lcd_buffer[i+flash_pos]=95;
00047a  4429              ADD      r1,r1,r5
00047c  205f              MOVS     r0,#0x5f
00047e  5458              STRB     r0,[r3,r1]
                  |L1.1152|
;;;458    	}
;;;459    
;;;460    }
000480  bd70              POP      {r4-r6,pc}
;;;461    
                          ENDP

                  ip2lcd PROC
;;;462    //-----------------------------------------------
;;;463    void ip2lcd(	short in1,
000482  e92d4fff          PUSH     {r0-r11,lr}
;;;464    			short in2,
;;;465    			short in3,
;;;466    			short in4,
;;;467    			char xy,
;;;468    			char flash_pos)
;;;469    {
000486  4681              MOV      r9,r0
000488  e9dd040d          LDRD     r0,r4,[sp,#0x34]
00048c  468a              MOV      r10,r1
00048e  4693              MOV      r11,r2
;;;470    char i;
;;;471    //char n;
;;;472    
;;;473    //bin2bcd_int(in);
;;;474    //bcd2lcd_zero(des+1);
;;;475    i=find(xy);
000490  f7fffffe          BL       find
;;;476    
;;;477    //in1=192;
;;;478    
;;;479    //in2=34;
;;;480    
;;;481    if((flash_pos==1)&&(bFL2))
;;;482    	{
;;;483    	lcd_buffer[i-12]=' ';
000494  2220              MOVS     r2,#0x20
000496  f8df836c          LDR      r8,|L1.2052|
00049a  49d9              LDR      r1,|L1.2048|
;;;484    	lcd_buffer[i-13]=' ';
;;;485    	lcd_buffer[i-14]=' ';
;;;486    	}
;;;487    else 
;;;488    	{
;;;489    	lcd_buffer[i-12]=0x30+(in1%10);
00049c  230a              MOVS     r3,#0xa
;;;490    	lcd_buffer[i-13]=0x30+(in1/10)%10;
;;;491    	lcd_buffer[i-14]=0x30+(in1/100);
00049e  f04f0c64          MOV      r12,#0x64
0004a2  2c01              CMP      r4,#1                 ;481
0004a4  d109              BNE      |L1.1210|
0004a6  f8985000          LDRB     r5,[r8,#0]            ;481  ; bFL2
0004aa  b135              CBZ      r5,|L1.1210|
0004ac  180d              ADDS     r5,r1,r0              ;483
0004ae  f1a5050e          SUB      r5,r5,#0xe            ;483
0004b2  70aa              STRB     r2,[r5,#2]            ;483
0004b4  706a              STRB     r2,[r5,#1]            ;484
0004b6  702a              STRB     r2,[r5,#0]            ;485
0004b8  e020              B        |L1.1276|
                  |L1.1210|
0004ba  fb99f6f3          SDIV     r6,r9,r3              ;489
0004be  fb039716          MLS      r7,r3,r6,r9           ;489
0004c2  180d              ADDS     r5,r1,r0              ;489
0004c4  3730              ADDS     r7,r7,#0x30           ;489
0004c6  f1a5050e          SUB      r5,r5,#0xe            ;489
;;;492    	}
;;;493    
;;;494    if((flash_pos==2)&&(bFL2))
0004ca  2c02              CMP      r4,#2
0004cc  70af              STRB     r7,[r5,#2]            ;489
0004ce  fb96f7f3          SDIV     r7,r6,r3              ;490
0004d2  fb036617          MLS      r6,r3,r7,r6           ;490
0004d6  f1060630          ADD      r6,r6,#0x30           ;490
0004da  706e              STRB     r6,[r5,#1]            ;490
0004dc  fb99f6fc          SDIV     r6,r9,r12             ;491
0004e0  f1060630          ADD      r6,r6,#0x30           ;491
0004e4  f8056b0e          STRB     r6,[r5],#0xe          ;491
0004e8  d108              BNE      |L1.1276|
0004ea  f8986000          LDRB     r6,[r8,#0]  ; bFL2
0004ee  b12e              CBZ      r6,|L1.1276|
0004f0  f1a5050a          SUB      r5,r5,#0xa
;;;495    	{
;;;496    	lcd_buffer[i-8]=' ';
0004f4  70aa              STRB     r2,[r5,#2]
;;;497    	lcd_buffer[i-9]=' ';
0004f6  706a              STRB     r2,[r5,#1]
;;;498    	lcd_buffer[i-10]=' ';
0004f8  702a              STRB     r2,[r5,#0]
0004fa  e021              B        |L1.1344|
                  |L1.1276|
;;;499    	}
;;;500    else 
;;;501    	{
;;;502    	lcd_buffer[i-8]=0x30+(in2%10);
0004fc  fb9af6f3          SDIV     r6,r10,r3
000500  fb03a716          MLS      r7,r3,r6,r10
000504  180d              ADDS     r5,r1,r0
000506  3730              ADDS     r7,r7,#0x30
000508  f1a5050a          SUB      r5,r5,#0xa
;;;503    	lcd_buffer[i-9]=0x30+(in2/10)%10;
;;;504    	lcd_buffer[i-10]=0x30+(in2/100);
;;;505    	}
;;;506    
;;;507    if((flash_pos==3)&&(bFL2))
00050c  2c03              CMP      r4,#3
00050e  70af              STRB     r7,[r5,#2]            ;502
000510  fb96f7f3          SDIV     r7,r6,r3              ;503
000514  fb036617          MLS      r6,r3,r7,r6           ;503
000518  f1060630          ADD      r6,r6,#0x30           ;503
00051c  706e              STRB     r6,[r5,#1]            ;503
00051e  fb9af6fc          SDIV     r6,r10,r12            ;504
000522  f1060630          ADD      r6,r6,#0x30           ;504
000526  4667              MOV      r7,r12                ;504
000528  f8056b0a          STRB     r6,[r5],#0xa          ;504
00052c  d108              BNE      |L1.1344|
00052e  f8986000          LDRB     r6,[r8,#0]  ; bFL2
000532  b12e              CBZ      r6,|L1.1344|
000534  f1a50506          SUB      r5,r5,#6
;;;508    	{
;;;509    	lcd_buffer[i-4]=' ';
000538  70aa              STRB     r2,[r5,#2]
;;;510    	lcd_buffer[i-5]=' ';
00053a  706a              STRB     r2,[r5,#1]
;;;511    	lcd_buffer[i-6]=' ';
00053c  702a              STRB     r2,[r5,#0]
00053e  e022              B        |L1.1414|
                  |L1.1344|
;;;512    	}
;;;513    else 
;;;514    	{
;;;515    	lcd_buffer[i-4]=0x30+in3%10;
000540  fb9bf6f3          SDIV     r6,r11,r3
000544  fb03b716          MLS      r7,r3,r6,r11
000548  180d              ADDS     r5,r1,r0
00054a  3730              ADDS     r7,r7,#0x30
00054c  f1a50506          SUB      r5,r5,#6
;;;516    	lcd_buffer[i-5]=0x30+(in3/10)%10;
;;;517    	lcd_buffer[i-6]=0x30+(in3/100);
;;;518    	}
;;;519    
;;;520    if((flash_pos==4)&&(bFL2))
000550  2c04              CMP      r4,#4
000552  70af              STRB     r7,[r5,#2]            ;515
000554  fb96f7f3          SDIV     r7,r6,r3              ;516
000558  fb036617          MLS      r6,r3,r7,r6           ;516
00055c  f1060630          ADD      r6,r6,#0x30           ;516
000560  706e              STRB     r6,[r5,#1]            ;516
000562  fb9bf6fc          SDIV     r6,r11,r12            ;517
000566  f1060630          ADD      r6,r6,#0x30           ;517
00056a  4667              MOV      r7,r12                ;517
00056c  f8056b06          STRB     r6,[r5],#6            ;517
000570  d109              BNE      |L1.1414|
000572  f8984000          LDRB     r4,[r8,#0]  ; bFL2
000576  b134              CBZ      r4,|L1.1414|
;;;521    	{
;;;522    	lcd_buffer[i]=' ';
000578  f1a50502          SUB      r5,r5,#2
00057c  540a              STRB     r2,[r1,r0]
;;;523    	lcd_buffer[i-1]=' ';
00057e  706a              STRB     r2,[r5,#1]
;;;524    	lcd_buffer[i-2]=' ';
000580  702a              STRB     r2,[r5,#0]
                  |L1.1410|
;;;525    	}
;;;526    else 
;;;527    	{
;;;528    	lcd_buffer[i]=0x30+in4%10;
;;;529    	lcd_buffer[i-1]=0x30+(in4/10)%10;
;;;530    	lcd_buffer[i-2]=0x30+(in4/100);
;;;531    	}
;;;532    }
000582  e8bd8fff          POP      {r0-r11,pc}
                  |L1.1414|
000586  9c03              LDR      r4,[sp,#0xc]          ;528
000588  fb94f2f3          SDIV     r2,r4,r3              ;528
00058c  fb034412          MLS      r4,r3,r2,r4           ;528
000590  3430              ADDS     r4,r4,#0x30           ;528
000592  540c              STRB     r4,[r1,r0]            ;528
000594  fb92f4f3          SDIV     r4,r2,r3              ;529
000598  fb032214          MLS      r2,r3,r4,r2           ;529
00059c  4408              ADD      r0,r0,r1              ;529
00059e  f1a00002          SUB      r0,r0,#2              ;529
0005a2  3230              ADDS     r2,r2,#0x30           ;529
0005a4  7042              STRB     r2,[r0,#1]            ;529
0005a6  9903              LDR      r1,[sp,#0xc]          ;530
0005a8  fb91f1f7          SDIV     r1,r1,r7              ;530
0005ac  f1010130          ADD      r1,r1,#0x30           ;530
0005b0  7001              STRB     r1,[r0,#0]            ;530
0005b2  e7e6              B        |L1.1410|
;;;533    
                          ENDP

                  int2lcd PROC
;;;534    //-----------------------------------------------
;;;535    void int2lcd(unsigned short in,char xy,char des)
0005b4  b570              PUSH     {r4-r6,lr}
;;;536    {
0005b6  460d              MOV      r5,r1
0005b8  4614              MOV      r4,r2
;;;537    char i;
;;;538    char n;
;;;539    
;;;540    bin2bcd_int(in);
0005ba  f7fffffe          BL       bin2bcd_int
;;;541    bcd2lcd_zero(des+1);
0005be  1c60              ADDS     r0,r4,#1
0005c0  b2c0              UXTB     r0,r0
0005c2  f7fffffe          BL       bcd2lcd_zero
;;;542    i=find(xy);
0005c6  4628              MOV      r0,r5
0005c8  f7fffffe          BL       find
;;;543    for (n=0;n<5;n++)
;;;544    	{
;;;545       	if(!des&&(dig[n]!=' '))
0005cc  4b8b              LDR      r3,|L1.2044|
;;;546       		{
;;;547       		lcd_buffer[i]=dig[n];	 
0005ce  4a8c              LDR      r2,|L1.2048|
0005d0  2100              MOVS     r1,#0                 ;543
                  |L1.1490|
0005d2  b924              CBNZ     r4,|L1.1502|
0005d4  5c5d              LDRB     r5,[r3,r1]            ;545
0005d6  2d20              CMP      r5,#0x20              ;545
0005d8  d001              BEQ      |L1.1502|
                  |L1.1498|
0005da  5415              STRB     r5,[r2,r0]
0005dc  e00f              B        |L1.1534|
                  |L1.1502|
;;;548       		}
;;;549       	else 
;;;550       		{
;;;551       		if(n<des)lcd_buffer[i]=dig[n];
0005de  42a1              CMP      r1,r4
0005e0  d201              BCS      |L1.1510|
0005e2  5c5d              LDRB     r5,[r3,r1]
0005e4  e7f9              B        |L1.1498|
                  |L1.1510|
;;;552       		else if (n==des)
0005e6  d104              BNE      |L1.1522|
;;;553       			{
;;;554       			lcd_buffer[i]='.';
0005e8  f04f052e          MOV      r5,#0x2e
0005ec  5415              STRB     r5,[r2,r0]
;;;555       			lcd_buffer[i-1]=dig[n];
0005ee  5c5d              LDRB     r5,[r3,r1]
0005f0  e002              B        |L1.1528|
                  |L1.1522|
;;;556       			} 
;;;557       		else if ((n>des)&&(dig[n]!=' ')) lcd_buffer[i-1]=dig[n];   		
0005f2  5c5d              LDRB     r5,[r3,r1]
0005f4  2d20              CMP      r5,#0x20
0005f6  d002              BEQ      |L1.1534|
                  |L1.1528|
0005f8  1816              ADDS     r6,r2,r0
0005fa  f8065c01          STRB     r5,[r6,#-1]
                  |L1.1534|
;;;558       		}  
;;;559    		
;;;560    	i--;	
0005fe  1e40              SUBS     r0,r0,#1
000600  1c49              ADDS     r1,r1,#1              ;543
000602  b2c9              UXTB     r1,r1                 ;543
000604  b2c0              UXTB     r0,r0
000606  2905              CMP      r1,#5                 ;543
000608  d3e3              BCC      |L1.1490|
;;;561    	}
;;;562    }
00060a  bd70              POP      {r4-r6,pc}
;;;563    
                          ENDP

                  long2lcdhyx PROC
;;;564    //-----------------------------------------------
;;;565    void long2lcdhyx(unsigned long in,char y,char x)
00060c  b517              PUSH     {r0-r2,r4,lr}
;;;566    {
;;;567    char i;
;;;568    char n;
;;;569    
;;;570    i=(20*y)+x;
00060e  eb010081          ADD      r0,r1,r1,LSL #2
000612  eb020080          ADD      r0,r2,r0,LSL #2
000616  b2c2              UXTB     r2,r0
;;;571    
;;;572    n=*((char*)&in);
000618  f89d3000          LDRB     r3,[sp,#0]
;;;573    lcd_buffer[i]=ABCDEF[n%16];
00061c  487a              LDR      r0,|L1.2056|
00061e  f003010f          AND      r1,r3,#0xf
;;;574    i--;
;;;575    lcd_buffer[i]=ABCDEF[n/16];
000622  eb001313          ADD      r3,r0,r3,LSR #4
000626  5c44              LDRB     r4,[r0,r1]            ;573
000628  4975              LDR      r1,|L1.2048|
00062a  548c              STRB     r4,[r1,r2]            ;573
00062c  1e52              SUBS     r2,r2,#1              ;574
00062e  b2d2              UXTB     r2,r2                 ;574
000630  781b              LDRB     r3,[r3,#0]
000632  548b              STRB     r3,[r1,r2]
;;;576    i--;
;;;577    
;;;578    n=*(((char*)&in)+1);
000634  f89d3001          LDRB     r3,[sp,#1]
000638  1e52              SUBS     r2,r2,#1              ;576
;;;579    lcd_buffer[i]=ABCDEF[n%16];
00063a  f003040f          AND      r4,r3,#0xf
00063e  b2d2              UXTB     r2,r2                 ;576
000640  5d04              LDRB     r4,[r0,r4]
000642  548c              STRB     r4,[r1,r2]
;;;580    i--;
000644  1e52              SUBS     r2,r2,#1
;;;581    lcd_buffer[i]=ABCDEF[n/16];
000646  eb001313          ADD      r3,r0,r3,LSR #4
00064a  b2d2              UXTB     r2,r2                 ;580
00064c  781b              LDRB     r3,[r3,#0]
00064e  548b              STRB     r3,[r1,r2]
;;;582    i--;
;;;583    
;;;584    n=*(((char*)&in)+2);
000650  f89d3002          LDRB     r3,[sp,#2]
000654  1e52              SUBS     r2,r2,#1              ;582
;;;585    lcd_buffer[i]=ABCDEF[n%16];
000656  f003040f          AND      r4,r3,#0xf
00065a  b2d2              UXTB     r2,r2                 ;582
00065c  5d04              LDRB     r4,[r0,r4]
00065e  548c              STRB     r4,[r1,r2]
;;;586    i--;
000660  1e52              SUBS     r2,r2,#1
;;;587    lcd_buffer[i]=ABCDEF[n/16];
000662  eb001313          ADD      r3,r0,r3,LSR #4
000666  b2d2              UXTB     r2,r2                 ;586
000668  781b              LDRB     r3,[r3,#0]
00066a  548b              STRB     r3,[r1,r2]
;;;588    i--;
;;;589    
;;;590    n=*(((char*)&in)+3);
00066c  f89d3003          LDRB     r3,[sp,#3]
000670  1e52              SUBS     r2,r2,#1              ;588
;;;591    lcd_buffer[i]=ABCDEF[n%16];
000672  f003040f          AND      r4,r3,#0xf
000676  b2d2              UXTB     r2,r2                 ;588
000678  5d04              LDRB     r4,[r0,r4]
00067a  548c              STRB     r4,[r1,r2]
;;;592    i--;
00067c  1e52              SUBS     r2,r2,#1
;;;593    lcd_buffer[i]=ABCDEF[n/16];
00067e  eb001013          ADD      r0,r0,r3,LSR #4
000682  b2d2              UXTB     r2,r2                 ;592
000684  7800              LDRB     r0,[r0,#0]
000686  5488              STRB     r0,[r1,r2]
;;;594    i--;
;;;595    }
000688  bd1e              POP      {r1-r4,pc}
;;;596    
                          ENDP

                  char2lcdh PROC
;;;597    //-----------------------------------------------
;;;598    void char2lcdh(char in,char yx)
00068a  b510              PUSH     {r4,lr}
;;;599    {
00068c  4604              MOV      r4,r0
00068e  4608              MOV      r0,r1
;;;600    char i;
;;;601    
;;;602    i=find(yx);
000690  f7fffffe          BL       find
;;;603    
;;;604    lcd_buffer[i]=ABCDEF[in%16];
000694  495c              LDR      r1,|L1.2056|
000696  f004020f          AND      r2,r4,#0xf
00069a  5c8b              LDRB     r3,[r1,r2]
00069c  4a58              LDR      r2,|L1.2048|
;;;605    i--;
;;;606    lcd_buffer[i]=ABCDEF[in/16];
00069e  eb011114          ADD      r1,r1,r4,LSR #4
0006a2  5413              STRB     r3,[r2,r0]            ;604
0006a4  1e40              SUBS     r0,r0,#1              ;605
0006a6  b2c0              UXTB     r0,r0                 ;605
0006a8  7809              LDRB     r1,[r1,#0]
0006aa  5411              STRB     r1,[r2,r0]
;;;607    i--;
;;;608    }
0006ac  bd10              POP      {r4,pc}
;;;609    
                          ENDP

                  char2lcdhyx PROC
;;;610    //-----------------------------------------------
;;;611    void char2lcdhyx(char in,char y,char x)
0006ae  eb010181          ADD      r1,r1,r1,LSL #2
;;;612    {
;;;613    char i;
;;;614    
;;;615    i=(20*y)+x;
0006b2  eb020181          ADD      r1,r2,r1,LSL #2
;;;616    
;;;617    lcd_buffer[i]=ABCDEF[in%16];
0006b6  4a54              LDR      r2,|L1.2056|
0006b8  b510              PUSH     {r4,lr}               ;612
0006ba  f000030f          AND      r3,r0,#0xf
0006be  b2c9              UXTB     r1,r1                 ;615
0006c0  5cd4              LDRB     r4,[r2,r3]
0006c2  4b4f              LDR      r3,|L1.2048|
;;;618    i--;
;;;619    lcd_buffer[i]=ABCDEF[in/16];
0006c4  eb021010          ADD      r0,r2,r0,LSR #4
0006c8  545c              STRB     r4,[r3,r1]            ;617
0006ca  1e49              SUBS     r1,r1,#1              ;618
0006cc  b2c9              UXTB     r1,r1                 ;618
0006ce  7800              LDRB     r0,[r0,#0]
0006d0  5458              STRB     r0,[r3,r1]
;;;620    i--;
;;;621    }
0006d2  bd10              POP      {r4,pc}
;;;622    
                          ENDP

                  int2lcdhyx PROC
;;;623    //-----------------------------------------------
;;;624    void int2lcdhyx(unsigned short in,char y,char x)
0006d4  eb010181          ADD      r1,r1,r1,LSL #2
;;;625    {
;;;626    char i;
;;;627    
;;;628    i=(20*y)+x;
0006d8  eb020181          ADD      r1,r2,r1,LSL #2
0006dc  b2cb              UXTB     r3,r1
;;;629    
;;;630    lcd_buffer[i]=ABCDEF[in%16];
0006de  494a              LDR      r1,|L1.2056|
0006e0  b510              PUSH     {r4,lr}               ;625
0006e2  f000020f          AND      r2,r0,#0xf
0006e6  5c8c              LDRB     r4,[r1,r2]
0006e8  4a45              LDR      r2,|L1.2048|
0006ea  54d4              STRB     r4,[r2,r3]
;;;631    i--;
;;;632    in/=16;
0006ec  0904              LSRS     r4,r0,#4
0006ee  1e5b              SUBS     r3,r3,#1              ;631
;;;633    lcd_buffer[i]=ABCDEF[in%16];
0006f0  f004000f          AND      r0,r4,#0xf
0006f4  b2db              UXTB     r3,r3                 ;631
0006f6  5c08              LDRB     r0,[r1,r0]
0006f8  54d0              STRB     r0,[r2,r3]
;;;634    i--;
0006fa  1e5b              SUBS     r3,r3,#1
0006fc  b2d8              UXTB     r0,r3
;;;635    in/=16;
0006fe  0923              LSRS     r3,r4,#4
;;;636    lcd_buffer[i]=ABCDEF[in%16];
000700  f003040f          AND      r4,r3,#0xf
000704  5d0c              LDRB     r4,[r1,r4]
000706  5414              STRB     r4,[r2,r0]
;;;637    i--;
000708  1e40              SUBS     r0,r0,#1
;;;638    in/=16;
00070a  091b              LSRS     r3,r3,#4
00070c  b2c0              UXTB     r0,r0                 ;637
;;;639    lcd_buffer[i]=ABCDEF[in];
00070e  5cc9              LDRB     r1,[r1,r3]
000710  5411              STRB     r1,[r2,r0]
;;;640    
;;;641    }
000712  bd10              POP      {r4,pc}
;;;642    
                          ENDP

                  char2lcdbyx PROC
;;;643    //-----------------------------------------------
;;;644    void char2lcdbyx(char in,char y,char x)
000714  eb010181          ADD      r1,r1,r1,LSL #2
;;;645    {
;;;646    char i;
;;;647    
;;;648    i=(20*y)+x;
000718  eb020181          ADD      r1,r2,r1,LSL #2
00071c  b2cb              UXTB     r3,r1
;;;649    
;;;650    lcd_buffer[i--]=ABCDEF[in%2];
00071e  493a              LDR      r1,|L1.2056|
000720  b510              PUSH     {r4,lr}               ;645
000722  f0000201          AND      r2,r0,#1
000726  5c8c              LDRB     r4,[r1,r2]
000728  4a35              LDR      r2,|L1.2048|
00072a  54d4              STRB     r4,[r2,r3]
;;;651    in/=2;
00072c  0844              LSRS     r4,r0,#1
00072e  1e5b              SUBS     r3,r3,#1              ;650
;;;652    lcd_buffer[i--]=ABCDEF[in%2];
000730  f0040001          AND      r0,r4,#1
000734  b2db              UXTB     r3,r3                 ;650
000736  5c08              LDRB     r0,[r1,r0]
000738  54d0              STRB     r0,[r2,r3]
00073a  1e5b              SUBS     r3,r3,#1
00073c  b2d8              UXTB     r0,r3
;;;653    in/=2;
00073e  0863              LSRS     r3,r4,#1
;;;654    lcd_buffer[i--]=ABCDEF[in%2];
000740  f0030401          AND      r4,r3,#1
;;;655    in/=2;
000744  085b              LSRS     r3,r3,#1
000746  5d0c              LDRB     r4,[r1,r4]            ;654
000748  5414              STRB     r4,[r2,r0]            ;654
00074a  1e40              SUBS     r0,r0,#1              ;654
;;;656    lcd_buffer[i--]=ABCDEF[in%2];
00074c  f0030401          AND      r4,r3,#1
000750  b2c0              UXTB     r0,r0                 ;654
000752  5d0c              LDRB     r4,[r1,r4]
000754  5414              STRB     r4,[r2,r0]
;;;657    in/=2;
000756  085b              LSRS     r3,r3,#1
000758  1e40              SUBS     r0,r0,#1              ;656
;;;658    lcd_buffer[i--]=ABCDEF[in%2];
00075a  f0030401          AND      r4,r3,#1
00075e  b2c0              UXTB     r0,r0                 ;656
000760  5d0c              LDRB     r4,[r1,r4]
000762  5414              STRB     r4,[r2,r0]
;;;659    in/=2;
000764  085b              LSRS     r3,r3,#1
000766  1e40              SUBS     r0,r0,#1              ;658
;;;660    lcd_buffer[i--]=ABCDEF[in%2];
000768  f0030401          AND      r4,r3,#1
00076c  b2c0              UXTB     r0,r0                 ;658
00076e  5d0c              LDRB     r4,[r1,r4]
000770  5414              STRB     r4,[r2,r0]
;;;661    in/=2;
000772  085b              LSRS     r3,r3,#1
000774  1e40              SUBS     r0,r0,#1              ;660
;;;662    lcd_buffer[i--]=ABCDEF[in%2];
000776  f0030401          AND      r4,r3,#1
00077a  b2c0              UXTB     r0,r0                 ;660
00077c  5d0c              LDRB     r4,[r1,r4]
00077e  5414              STRB     r4,[r2,r0]
000780  1e40              SUBS     r0,r0,#1
000782  b2c4              UXTB     r4,r0
;;;663    in/=2;
000784  0858              LSRS     r0,r3,#1
;;;664    lcd_buffer[i--]=ABCDEF[in%2];
000786  5c08              LDRB     r0,[r1,r0]
000788  5510              STRB     r0,[r2,r4]
;;;665    in/=2;
;;;666    }
00078a  bd10              POP      {r4,pc}
;;;667    
                          ENDP

                  pointer_set PROC
;;;668    //-----------------------------------------------
;;;669    void pointer_set(char num_of_first_row)
00078c  b530              PUSH     {r4,r5,lr}
;;;670    {
;;;671    if(sub_ind==index_set)lcd_buffer[num_of_first_row*20]=1;
00078e  491f              LDR      r1,|L1.2060|
000790  2301              MOVS     r3,#1
000792  4d1b              LDR      r5,|L1.2048|
000794  f9912001          LDRSB    r2,[r1,#1]  ; a_ind
000798  f9911004          LDRSB    r1,[r1,#4]  ; a_ind
00079c  eb000480          ADD      r4,r0,r0,LSL #2
0007a0  428a              CMP      r2,r1
0007a2  d102              BNE      |L1.1962|
0007a4  f8053024          STRB     r3,[r5,r4,LSL #2]
;;;672    else if(sub_ind==(index_set+1))lcd_buffer[(num_of_first_row+1)*20]=1;
;;;673    else if(sub_ind==(index_set+2))lcd_buffer[(num_of_first_row+2)*20]=1;
;;;674    else if(sub_ind==(index_set+3))lcd_buffer[(num_of_first_row+3)*20]=1;
;;;675    else if(sub_ind==(index_set+4))lcd_buffer[(num_of_first_row+4)*20]=1;
;;;676    else if(sub_ind==(index_set+5))lcd_buffer[(num_of_first_row+5)*20]=1;
;;;677    else if(sub_ind==(index_set+6))lcd_buffer[(num_of_first_row+6)*20]=1;
;;;678    else if(sub_ind==(index_set+7))lcd_buffer[(num_of_first_row+7)*20]=1;
;;;679    }
0007a8  bd30              POP      {r4,r5,pc}
                  |L1.1962|
0007aa  4d15              LDR      r5,|L1.2048|
0007ac  1c4c              ADDS     r4,r1,#1              ;672
0007ae  eb000080          ADD      r0,r0,r0,LSL #2       ;671
0007b2  eb050080          ADD      r0,r5,r0,LSL #2       ;671
0007b6  42a2              CMP      r2,r4                 ;672
0007b8  d101              BNE      |L1.1982|
0007ba  7503              STRB     r3,[r0,#0x14]         ;672
0007bc  bd30              POP      {r4,r5,pc}
                  |L1.1982|
0007be  1c8c              ADDS     r4,r1,#2              ;673
0007c0  42a2              CMP      r2,r4                 ;673
0007c2  d102              BNE      |L1.1994|
0007c4  f8803028          STRB     r3,[r0,#0x28]         ;673
0007c8  bd30              POP      {r4,r5,pc}
                  |L1.1994|
0007ca  1ccc              ADDS     r4,r1,#3              ;674
0007cc  42a2              CMP      r2,r4                 ;674
0007ce  d102              BNE      |L1.2006|
0007d0  f880303c          STRB     r3,[r0,#0x3c]         ;674
0007d4  bd30              POP      {r4,r5,pc}
                  |L1.2006|
0007d6  1d0c              ADDS     r4,r1,#4              ;675
0007d8  42a2              CMP      r2,r4                 ;675
0007da  d102              BNE      |L1.2018|
0007dc  f8803050          STRB     r3,[r0,#0x50]         ;675
0007e0  bd30              POP      {r4,r5,pc}
                  |L1.2018|
0007e2  1d4c              ADDS     r4,r1,#5              ;676
0007e4  42a2              CMP      r2,r4                 ;676
0007e6  d102              BNE      |L1.2030|
0007e8  f8803064          STRB     r3,[r0,#0x64]         ;676
0007ec  bd30              POP      {r4,r5,pc}
                  |L1.2030|
0007ee  1d8c              ADDS     r4,r1,#6              ;677
0007f0  42a2              CMP      r2,r4                 ;677
0007f2  d10d              BNE      |L1.2064|
0007f4  f8803078          STRB     r3,[r0,#0x78]         ;677
                  |L1.2040|
0007f8  bd30              POP      {r4,r5,pc}
0007fa  0000              DCW      0x0000
                  |L1.2044|
                          DCD      ||dig||
                  |L1.2048|
                          DCD      lcd_buffer
                  |L1.2052|
                          DCD      bFL2
                  |L1.2056|
                          DCD      ABCDEF
                  |L1.2060|
                          DCD      a_ind
                  |L1.2064|
000810  1dc9              ADDS     r1,r1,#7              ;678
000812  428a              CMP      r2,r1                 ;678
000814  d1f0              BNE      |L1.2040|
000816  f880308c          STRB     r3,[r0,#0x8c]         ;678
00081a  e7ed              B        |L1.2040|
;;;680    
                          ENDP

                  tree_down PROC
;;;682    //-----------------------------------------------
;;;683    void tree_down(signed char offset_ind,signed char offset_sub_ind)
00081c  4b7f              LDR      r3,|L1.2588|
;;;684    {
;;;685    ind_pointer--;
00081e  881a              LDRH     r2,[r3,#0]  ; ind_pointer
000820  1e52              SUBS     r2,r2,#1
;;;686    ind_pointer+=offset_ind;
000822  4410              ADD      r0,r0,r2
000824  b200              SXTH     r0,r0
000826  8018              STRH     r0,[r3,#0]
;;;687    a_ind=b_ind[ind_pointer];
000828  4a7d              LDR      r2,|L1.2592|
00082a  eb000080          ADD      r0,r0,r0,LSL #2
00082e  4402              ADD      r2,r2,r0
000830  487c              LDR      r0,|L1.2596|
000832  6813              LDR      r3,[r2,#0]
000834  6003              STR      r3,[r0,#0]  ; a_ind
000836  7912              LDRB     r2,[r2,#4]
000838  7102              STRB     r2,[r0,#4]
;;;688    
;;;689    sub_ind+=offset_sub_ind;
00083a  7842              LDRB     r2,[r0,#1]  ; a_ind
00083c  4411              ADD      r1,r1,r2
00083e  7041              STRB     r1,[r0,#1]
;;;690    }
000840  4770              BX       lr
;;;691    
                          ENDP

                  tree_up PROC
;;;692    //-----------------------------------------------
;;;693    void tree_up(char tind, char tsub_ind, char tindex_set, char tsub_ind1)
000842  b5f0              PUSH     {r4-r7,lr}
;;;694    {
;;;695    b_ind[ind_pointer++]=a_ind;
000844  4d75              LDR      r5,|L1.2588|
000846  4f76              LDR      r7,|L1.2592|
000848  f9b54000          LDRSH    r4,[r5,#0]  ; ind_pointer
00084c  eb040684          ADD      r6,r4,r4,LSL #2
000850  1c64              ADDS     r4,r4,#1
000852  802c              STRH     r4,[r5,#0]
000854  4c73              LDR      r4,|L1.2596|
000856  443e              ADD      r6,r6,r7
000858  6825              LDR      r5,[r4,#0]  ; a_ind
00085a  6035              STR      r5,[r6,#0]
00085c  7925              LDRB     r5,[r4,#4]  ; a_ind
00085e  7135              STRB     r5,[r6,#4]
;;;696    ind=(i_enum)tind;
000860  7020              STRB     r0,[r4,#0]
;;;697    sub_ind=tsub_ind;
000862  7061              STRB     r1,[r4,#1]
;;;698    index_set=tindex_set;
000864  7122              STRB     r2,[r4,#4]
;;;699    sub_ind1=tsub_ind1;
000866  70a3              STRB     r3,[r4,#2]
;;;700    }
000868  bdf0              POP      {r4-r7,pc}
;;;701    
                          ENDP

                  bgnd_par PROC
;;;702    //-----------------------------------------------
;;;703    void bgnd_par(char const *ptr0,char const *ptr1,char const *ptr2,char const *ptr3)
00086a  b5f0              PUSH     {r4-r7,lr}
;;;704    {
00086c  4605              MOV      r5,r0
00086e  460e              MOV      r6,r1
000870  4617              MOV      r7,r2
;;;705    char i,*ptr_ram;
;;;706    clr_scrn();
000872  f7fffffe          BL       clr_scrn
;;;707    
;;;708    ptr_ram=lcd_buffer;
000876  4c6c              LDR      r4,|L1.2600|
;;;709    for(i=0;i<20;i++)
000878  f05f0000          MOVS.W   r0,#0
                  |L1.2172|
00087c  1c40              ADDS     r0,r0,#1
;;;710    	{
;;;711    	*ptr_ram++=*ptr0++;
00087e  f8151b01          LDRB     r1,[r5],#1
000882  b2c0              UXTB     r0,r0                 ;709
000884  f8041b01          STRB     r1,[r4],#1
000888  2814              CMP      r0,#0x14              ;709
00088a  d3f7              BCC      |L1.2172|
;;;712    	}
;;;713    for(i=0;i<20;i++)
00088c  f05f0000          MOVS.W   r0,#0
                  |L1.2192|
000890  1c40              ADDS     r0,r0,#1
;;;714    	{
;;;715    	*ptr_ram++=*ptr1++;
000892  f8161b01          LDRB     r1,[r6],#1
000896  b2c0              UXTB     r0,r0                 ;713
000898  f8041b01          STRB     r1,[r4],#1
00089c  2814              CMP      r0,#0x14              ;713
00089e  d3f7              BCC      |L1.2192|
;;;716    	}
;;;717    for(i=0;i<20;i++)
0008a0  f05f0000          MOVS.W   r0,#0
                  |L1.2212|
0008a4  1c40              ADDS     r0,r0,#1
;;;718    	{
;;;719    	*ptr_ram++=*ptr2++;
0008a6  f8171b01          LDRB     r1,[r7],#1
0008aa  b2c0              UXTB     r0,r0                 ;717
0008ac  f8041b01          STRB     r1,[r4],#1
0008b0  2814              CMP      r0,#0x14              ;717
0008b2  d3f7              BCC      |L1.2212|
;;;720    	}
;;;721    for(i=0;i<20;i++)
0008b4  f05f0000          MOVS.W   r0,#0
                  |L1.2232|
0008b8  1c40              ADDS     r0,r0,#1
;;;722    	{
;;;723    	*ptr_ram++=*ptr3++;
0008ba  f8131b01          LDRB     r1,[r3],#1
0008be  b2c0              UXTB     r0,r0                 ;721
0008c0  f8041b01          STRB     r1,[r4],#1
0008c4  2814              CMP      r0,#0x14              ;721
0008c6  d3f7              BCC      |L1.2232|
;;;724    	}
;;;725    
;;;726    
;;;727    }
0008c8  bdf0              POP      {r4-r7,pc}
;;;728    
                          ENDP

                  sub_bgnd PROC
;;;729    //-----------------------------------------------
;;;730    void sub_bgnd(char const *adr,char xy,signed char offset)
0008ca  b530              PUSH     {r4,r5,lr}
;;;731    {
0008cc  4604              MOV      r4,r0
0008ce  4608              MOV      r0,r1
0008d0  4615              MOV      r5,r2
;;;732    char temp;
;;;733    temp=find(xy);
0008d2  f7fffffe          BL       find
;;;734    
;;;735    //ptr_ram=&lcd_buffer[find(xy)];
;;;736    if(temp!=255)
0008d6  28ff              CMP      r0,#0xff
0008d8  d08e              BEQ      |L1.2040|
;;;737    while (*adr)
;;;738    	{
;;;739    	lcd_buffer[temp+offset]=*adr++;
0008da  4a53              LDR      r2,|L1.2600|
                  |L1.2268|
0008dc  7821              LDRB     r1,[r4,#0]            ;737
0008de  2900              CMP      r1,#0                 ;737
0008e0  d08a              BEQ      |L1.2040|
0008e2  1943              ADDS     r3,r0,r5
0008e4  1c64              ADDS     r4,r4,#1
;;;740    	temp++;
0008e6  1c40              ADDS     r0,r0,#1
0008e8  54d1              STRB     r1,[r2,r3]            ;739
0008ea  b2c0              UXTB     r0,r0
0008ec  e7f6              B        |L1.2268|
;;;741        	}
;;;742    }
0008ee  e783              B        |L1.2040|
;;;743    
                          ENDP

                  show_mess PROC
;;;744    //-----------------------------------------------
;;;745    void show_mess(char* p1, char* p2, char* p3, char* p4,int m_sec)
0008f0  b510              PUSH     {r4,lr}
;;;746    {
;;;747    bgnd_par(p1,p2,p3,p4);
0008f2  9c02              LDR      r4,[sp,#8]
0008f4  f7fffffe          BL       bgnd_par
;;;748    tree_up(iSM,sub_ind,sub_ind1,sub_ind2);
0008f8  484a              LDR      r0,|L1.2596|
0008fa  78c3              LDRB     r3,[r0,#3]  ; a_ind
0008fc  7882              LDRB     r2,[r0,#2]  ; a_ind
0008fe  7841              LDRB     r1,[r0,#1]  ; a_ind
000900  2065              MOVS     r0,#0x65
000902  f7fffffe          BL       tree_up
;;;749    ret((char)(m_sec/100));
000906  2064              MOVS     r0,#0x64
000908  fb94f0f0          SDIV     r0,r4,r0
00090c  e8bd4010          POP      {r4,lr}
000910  b2c0              UXTB     r0,r0
000912  f7ffbffe          B.W      ||ret||
;;;750    }
;;;751    
                          ENDP

                  ptr_carry PROC
;;;752    //-----------------------------------------------
;;;753    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000916  1880              ADDS     r0,r0,r2
;;;754    {
;;;755    signed int tempSI;
;;;756    tempSI=in;                                                             
;;;757    tempSI+=carry;
;;;758    if(tempSI<0)tempSI+=modul;
000918  d501              BPL      |L1.2334|
00091a  4408              ADD      r0,r0,r1
00091c  e002              B        |L1.2340|
                  |L1.2334|
;;;759    else if(tempSI>=modul)tempSI-=modul;
00091e  4288              CMP      r0,r1
000920  db00              BLT      |L1.2340|
000922  1a40              SUBS     r0,r0,r1
                  |L1.2340|
;;;760    
;;;761    return (char)tempSI;
000924  b2c0              UXTB     r0,r0
;;;762    }
000926  4770              BX       lr
;;;763    
                          ENDP

                  event_data2ind PROC
;;;764    //-----------------------------------------------
;;;765    void event_data2ind(char num, char simbol)
000928  e92d43fe          PUSH     {r1-r9,lr}
;;;766    {
00092c  460d              MOV      r5,r1
;;;767    char iii;
;;;768    char dt[4],dt_[4],dt__[4];
;;;769    unsigned int tempii;    
;;;770    		
;;;771    /*tempii=lc640_read_int(PTR_EVENT_LOG);
;;;772    tempii=ptr_carry(tempii,64,-1*((signed)num));*/
;;;773    tempii=(signed)num;
;;;774    tempii*=32;
00092e  0144              LSLS     r4,r0,#5
;;;775    ///tempii+=EVENT_LOG;
;;;776         
;;;777    lc640_read_long_ptr(tempii,dt);
000930  a902              ADD      r1,sp,#8
000932  4620              MOV      r0,r4
000934  f7fffffe          BL       lc640_read_long_ptr
;;;778    lc640_read_long_ptr(tempii+8,dt_);
000938  4669              MOV      r1,sp
00093a  f1040008          ADD      r0,r4,#8
00093e  f7fffffe          BL       lc640_read_long_ptr
;;;779    lc640_read_long_ptr(tempii+12,dt__);
000942  a901              ADD      r1,sp,#4
000944  f104000c          ADD      r0,r4,#0xc
000948  f7fffffe          BL       lc640_read_long_ptr
;;;780    
;;;781    iii=find(simbol);
00094c  4628              MOV      r0,r5
00094e  f7fffffe          BL       find
;;;782    
;;;783    lcd_buffer[iii++]=' ';
000952  4c35              LDR      r4,|L1.2600|
000954  2520              MOVS     r5,#0x20
;;;784    lcd_buffer[iii++]='0';
000956  f04f0c30          MOV      r12,#0x30
00095a  5425              STRB     r5,[r4,r0]            ;783
00095c  1c40              ADDS     r0,r0,#1              ;783
00095e  b2c0              UXTB     r0,r0                 ;783
;;;785    lcd_buffer[iii++]='!';
000960  2721              MOVS     r7,#0x21
000962  f804c000          STRB     r12,[r4,r0]           ;784
000966  1c40              ADDS     r0,r0,#1              ;784
000968  b2c0              UXTB     r0,r0                 ;784
;;;786    lcd_buffer[iii++]='@'; 
00096a  f04f0840          MOV      r8,#0x40
00096e  5427              STRB     r7,[r4,r0]            ;785
000970  1c40              ADDS     r0,r0,#1              ;785
000972  b2c0              UXTB     r0,r0                 ;785
;;;787    lcd_buffer[iii++]=' ';
;;;788    lcd_buffer[iii++]=' ';
;;;789    lcd_buffer[iii++]='0';
;;;790    lcd_buffer[iii++]='#';
000974  2123              MOVS     r1,#0x23
000976  f8048000          STRB     r8,[r4,r0]            ;786
00097a  1c40              ADDS     r0,r0,#1              ;786
00097c  b2c0              UXTB     r0,r0                 ;786
;;;791    int2lcd(dt_[2],'!',0);
00097e  2200              MOVS     r2,#0
000980  5425              STRB     r5,[r4,r0]            ;787
000982  1c40              ADDS     r0,r0,#1              ;787
000984  b2c0              UXTB     r0,r0                 ;787
000986  5425              STRB     r5,[r4,r0]            ;788
000988  1c40              ADDS     r0,r0,#1              ;788
00098a  b2c0              UXTB     r0,r0                 ;788
00098c  f804c000          STRB     r12,[r4,r0]           ;789
000990  1c40              ADDS     r0,r0,#1              ;789
000992  b2c0              UXTB     r0,r0                 ;789
000994  5421              STRB     r1,[r4,r0]            ;790
000996  1c40              ADDS     r0,r0,#1              ;790
000998  b2c6              UXTB     r6,r0                 ;790
00099a  f89d0002          LDRB     r0,[sp,#2]
00099e  2121              MOVS     r1,#0x21
0009a0  f7fffffe          BL       int2lcd
;;;792    int2lcd(dt_[0],'#',0);   
0009a4  f89d0000          LDRB     r0,[sp,#0]
0009a8  2200              MOVS     r2,#0
0009aa  2123              MOVS     r1,#0x23
0009ac  f7fffffe          BL       int2lcd
;;;793    if(!((dt_[1]>=1)&&(dt_[1]<=12)))dt_[1]=1;
0009b0  f89d0001          LDRB     r0,[sp,#1]
0009b4  1e40              SUBS     r0,r0,#1
0009b6  280c              CMP      r0,#0xc
0009b8  d302              BCC      |L1.2496|
0009ba  2001              MOVS     r0,#1
0009bc  f88d0001          STRB     r0,[sp,#1]
                  |L1.2496|
;;;794    sub_bgnd(sm_mont[dt_[1]],'@',0); 
0009c0  f89d0001          LDRB     r0,[sp,#1]
0009c4  4919              LDR      r1,|L1.2604|
0009c6  2200              MOVS     r2,#0
0009c8  eb010080          ADD      r0,r1,r0,LSL #2
0009cc  2140              MOVS     r1,#0x40
0009ce  f7fffffe          BL       sub_bgnd
;;;795    lcd_buffer[iii++]=' ';		
0009d2  55a5              STRB     r5,[r4,r6]
0009d4  1c76              ADDS     r6,r6,#1
0009d6  b2f0              UXTB     r0,r6
;;;796    lcd_buffer[iii++]='0';
;;;797    lcd_buffer[iii++]='!';
;;;798    lcd_buffer[iii++]=':'; 
0009d8  213a              MOVS     r1,#0x3a
0009da  f804c000          STRB     r12,[r4,r0]           ;796
0009de  1c40              ADDS     r0,r0,#1              ;796
0009e0  b2c0              UXTB     r0,r0                 ;796
;;;799    lcd_buffer[iii++]='0';
;;;800    lcd_buffer[iii++]='@';
;;;801    int2lcd(dt__[0],'!',0);
0009e2  2200              MOVS     r2,#0
0009e4  5427              STRB     r7,[r4,r0]            ;797
0009e6  1c40              ADDS     r0,r0,#1              ;797
0009e8  b2c0              UXTB     r0,r0                 ;797
0009ea  5421              STRB     r1,[r4,r0]            ;798
0009ec  1c40              ADDS     r0,r0,#1              ;798
0009ee  b2c0              UXTB     r0,r0                 ;798
0009f0  2121              MOVS     r1,#0x21
0009f2  f804c000          STRB     r12,[r4,r0]           ;799
0009f6  1c40              ADDS     r0,r0,#1              ;799
0009f8  b2c0              UXTB     r0,r0                 ;799
0009fa  f8048000          STRB     r8,[r4,r0]            ;800
0009fe  1c40              ADDS     r0,r0,#1              ;800
000a00  b2c6              UXTB     r6,r0                 ;800
000a02  f89d0004          LDRB     r0,[sp,#4]
000a06  f7fffffe          BL       int2lcd
;;;802    int2lcd(dt__[1],'@',0);
000a0a  f89d0005          LDRB     r0,[sp,#5]
000a0e  2200              MOVS     r2,#0
000a10  2140              MOVS     r1,#0x40
000a12  f7fffffe          BL       int2lcd
;;;803       		     		
;;;804    lcd_buffer[iii++]=' ';
000a16  55a5              STRB     r5,[r4,r6]
;;;805    }	
000a18  e8bd83fe          POP      {r1-r9,pc}
                          ENDP

                  |L1.2588|
                          DCD      ind_pointer
                  |L1.2592|
                          DCD      b_ind
                  |L1.2596|
                          DCD      a_ind
                  |L1.2600|
                          DCD      lcd_buffer
                  |L1.2604|
                          DCD      sm_mont

;*** Start embedded assembler ***

#line 1 "common_func.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_common_func_c_abs____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_common_func_c_abs____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_common_func_c_abs____REVSH|
#line 130
|__asm___13_common_func_c_abs____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
