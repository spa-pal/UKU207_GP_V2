; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\common_func.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\common_func.d --feedback=.\EXE\UKU2071x_GALV_IBv2_WG12232L3.fed --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 -DWG12232L3 --omf_browse=.\EXE\common_func.crf common_func.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  abs PROC
;;;11     //-----------------------------------------------
;;;12     signed short abs(signed short in)
000000  2800              CMP      r0,#0
;;;13     {
;;;14     if(in<0)in=-in;
000002  da01              BGE      |L1.8|
000004  4240              RSBS     r0,r0,#0
000006  b200              SXTH     r0,r0
                  |L1.8|
;;;15     return in;
;;;16     }
000008  4770              BX       lr
;;;17     
                          ENDP

                  clr_scrn PROC
;;;18     //-----------------------------------------------
;;;19     void clr_scrn(void)
00000a  2000              MOVS     r0,#0
;;;20     {
;;;21     char i;
;;;22     for (i=0;i<LCD_SIZE;i++)
;;;23     	{
;;;24     	lcd_buffer[i]=' ';
00000c  4afb              LDR      r2,|L1.1020|
00000e  2120              MOVS     r1,#0x20
                  |L1.16|
000010  5411              STRB     r1,[r2,r0]
000012  1c40              ADDS     r0,r0,#1              ;22
000014  b2c0              UXTB     r0,r0                 ;22
000016  28c8              CMP      r0,#0xc8              ;22
000018  d3fa              BCC      |L1.16|
;;;25     	}
;;;26     }
00001a  4770              BX       lr
;;;27     
                          ENDP

                  find PROC
;;;28     //-----------------------------------------------
;;;29     char find(char xy)
00001c  4601              MOV      r1,r0
;;;30     {
;;;31     char i=0;
;;;32     do i++;
;;;33     while ((lcd_buffer[i]!=xy)&&(i<LCD_SIZE));
00001e  4af7              LDR      r2,|L1.1020|
000020  2000              MOVS     r0,#0                 ;31
                  |L1.34|
000022  1c40              ADDS     r0,r0,#1              ;32
000024  b2c0              UXTB     r0,r0                 ;32
000026  5c13              LDRB     r3,[r2,r0]
000028  428b              CMP      r3,r1
00002a  d001              BEQ      |L1.48|
00002c  28c8              CMP      r0,#0xc8
00002e  d3f8              BCC      |L1.34|
                  |L1.48|
;;;34     //if(i==(LCD_SIZE)) i++;
;;;35     return i;
;;;36     }
000030  4770              BX       lr
;;;37     
                          ENDP

                  bin2bcd_int PROC
;;;39     //-----------------------------------------------
;;;40     void bin2bcd_int(unsigned int in)
000032  b510              PUSH     {r4,lr}
;;;41     {
;;;42     
;;;43     char i=5;
;;;44     for(i=0;i<5;i++)
000034  2100              MOVS     r1,#0
;;;45     	{
;;;46     	dig[i]=in%10;
000036  4cf2              LDR      r4,|L1.1024|
000038  220a              MOVS     r2,#0xa
00003a  bf00              NOP      
                  |L1.60|
00003c  fbb0f3f2          UDIV     r3,r0,r2
000040  fb020013          MLS      r0,r2,r3,r0
000044  5460              STRB     r0,[r4,r1]
000046  1c49              ADDS     r1,r1,#1              ;44
000048  b2c9              UXTB     r1,r1                 ;44
00004a  4618              MOV      r0,r3
00004c  2905              CMP      r1,#5                 ;44
00004e  d3f5              BCC      |L1.60|
;;;47     	in/=10;
;;;48     	}   
;;;49     }
000050  bd10              POP      {r4,pc}
;;;50     //-----------------------------------------------
                          ENDP

                  bcd2lcd_zero PROC
;;;51     void bcd2lcd_zero(char sig)
000052  b5f0              PUSH     {r4-r7,lr}
;;;52     {
;;;53     char i;
;;;54     zero_on=1;
000054  4beb              LDR      r3,|L1.1028|
000056  2101              MOVS     r1,#1
;;;55     for (i=5;i>0;i--)
;;;56     	{
;;;57     	if(zero_on&&(!dig[i-1])&&(i>sig))
;;;58     		{
;;;59     		dig[i-1]=0x20;
000058  2720              MOVS     r7,#0x20
00005a  7019              STRB     r1,[r3,#0]            ;54
00005c  2105              MOVS     r1,#5                 ;55
00005e  4ae8              LDR      r2,|L1.1024|
000060  2600              MOVS     r6,#0                 ;54
000062  e001              B        |L1.104|
                  |L1.100|
000064  781c              LDRB     r4,[r3,#0]            ;57  ; zero_on
000066  b144              CBZ      r4,|L1.122|
                  |L1.104|
000068  1854              ADDS     r4,r2,r1              ;57
00006a  f8145c01          LDRB     r5,[r4,#-1]           ;57
00006e  b925              CBNZ     r5,|L1.122|
000070  4281              CMP      r1,r0                 ;57
000072  d902              BLS      |L1.122|
000074  f8047c01          STRB     r7,[r4,#-1]
000078  e005              B        |L1.134|
                  |L1.122|
;;;60     		}
;;;61     	else
;;;62     		{
;;;63     		dig[i-1]=dig[i-1]+0x30;
00007a  1854              ADDS     r4,r2,r1
00007c  f8145d01          LDRB     r5,[r4,#-1]!
000080  3530              ADDS     r5,r5,#0x30
000082  7025              STRB     r5,[r4,#0]
;;;64     		zero_on=0;
000084  701e              STRB     r6,[r3,#0]
                  |L1.134|
000086  1e49              SUBS     r1,r1,#1              ;55
000088  f01101ff          ANDS     r1,r1,#0xff           ;55
00008c  d1ea              BNE      |L1.100|
;;;65     		}	
;;;66     	}
;;;67     }             
00008e  bdf0              POP      {r4-r7,pc}
;;;68     
                          ENDP

                  int2lcd_mmm PROC
;;;151    //-----------------------------------------------
;;;152    void int2lcd_mmm(signed short in,char xy,char des)
000090  b5fe              PUSH     {r1-r7,lr}
;;;153    {
;;;154    signed char i;
;;;155    char n;
;;;156    char s[10];
;;;157    char minus='+';
000092  232b              MOVS     r3,#0x2b
;;;158    char zero_on;
;;;159    char simb_num;
;;;160    
;;;161    if(in<0)
000094  2800              CMP      r0,#0
000096  da02              BGE      |L1.158|
;;;162    	{
;;;163    	in=-in;
000098  4240              RSBS     r0,r0,#0
00009a  b200              SXTH     r0,r0
;;;164    	minus='-';
00009c  232d              MOVS     r3,#0x2d
                  |L1.158|
;;;165    	}
;;;166    
;;;167    for(i=0;i<10;i++)
00009e  2500              MOVS     r5,#0
;;;168    	{
;;;169    	s[i]=in%10;
0000a0  260a              MOVS     r6,#0xa
0000a2  466c              MOV      r4,sp                 ;156
                  |L1.164|
0000a4  fb90f7f6          SDIV     r7,r0,r6
0000a8  fb060017          MLS      r0,r6,r7,r0
0000ac  5560              STRB     r0,[r4,r5]
0000ae  1c6d              ADDS     r5,r5,#1              ;167
0000b0  b26d              SXTB     r5,r5                 ;167
;;;170    	in/=10;
0000b2  b238              SXTH     r0,r7
0000b4  2d0a              CMP      r5,#0xa               ;167
0000b6  dbf5              BLT      |L1.164|
;;;171    	}   
;;;172    
;;;173    zero_on=1;
0000b8  2601              MOVS     r6,#1
;;;174    simb_num=0;
0000ba  2500              MOVS     r5,#0
;;;175    
;;;176    for (i=9;i>=0;i--)
0000bc  2009              MOVS     r0,#9
;;;177    	{
;;;178    	if(zero_on&&(!s[i])&&(i>(des)))
;;;179    	     {
;;;180    	     s[i]=0x20;
0000be  2720              MOVS     r7,#0x20
0000c0  e000              B        |L1.196|
                  |L1.194|
0000c2  b146              CBZ      r6,|L1.214|
                  |L1.196|
0000c4  f814c000          LDRB     r12,[r4,r0]           ;178
0000c8  f1bc0f00          CMP      r12,#0                ;178
0000cc  d103              BNE      |L1.214|
0000ce  4290              CMP      r0,r2                 ;178
0000d0  dd01              BLE      |L1.214|
0000d2  5427              STRB     r7,[r4,r0]
0000d4  e005              B        |L1.226|
                  |L1.214|
;;;181    	     }
;;;182    	else 
;;;183    	     {
;;;184    	     s[i]=s[i]+0x30;
0000d6  5c26              LDRB     r6,[r4,r0]
0000d8  3630              ADDS     r6,r6,#0x30
0000da  5426              STRB     r6,[r4,r0]
;;;185    	     zero_on=0;
0000dc  2600              MOVS     r6,#0
;;;186    	     simb_num++;
0000de  1c6d              ADDS     r5,r5,#1
0000e0  b2ed              UXTB     r5,r5
                  |L1.226|
0000e2  1e40              SUBS     r0,r0,#1              ;176
0000e4  b240              SXTB     r0,r0                 ;176
0000e6  2800              CMP      r0,#0                 ;176
0000e8  daeb              BGE      |L1.194|
;;;187    	     }
;;;188    	 }
;;;189    	          
;;;190    if(minus=='-')	
0000ea  2b2d              CMP      r3,#0x2d
0000ec  d102              BNE      |L1.244|
;;;191         {
;;;192         s[simb_num++]=minus; 
0000ee  5563              STRB     r3,[r4,r5]
0000f0  1c6d              ADDS     r5,r5,#1
0000f2  b2ed              UXTB     r5,r5
                  |L1.244|
;;;193         }    
;;;194    if(des)
0000f4  b16a              CBZ      r2,|L1.274|
;;;195         {
;;;196         for(i=simb_num;i>des;i--)
0000f6  b268              SXTB     r0,r5
0000f8  e005              B        |L1.262|
                  |L1.250|
;;;197              {
;;;198              s[i]=s[i-1];
0000fa  1823              ADDS     r3,r4,r0
0000fc  f8133c01          LDRB     r3,[r3,#-1]
000100  5423              STRB     r3,[r4,r0]
000102  1e40              SUBS     r0,r0,#1              ;196
000104  b240              SXTB     r0,r0                 ;196
                  |L1.262|
000106  4290              CMP      r0,r2                 ;196
000108  dcf7              BGT      |L1.250|
;;;199              }
;;;200         s[des]='.';
00010a  202e              MOVS     r0,#0x2e
;;;201         simb_num++;     
00010c  1c6d              ADDS     r5,r5,#1
00010e  54a0              STRB     r0,[r4,r2]            ;200
000110  b2ed              UXTB     r5,r5
                  |L1.274|
;;;202         }
;;;203    	
;;;204    n=find(xy);
000112  4608              MOV      r0,r1
000114  f7fffffe          BL       find
;;;205    for (i=0;i<simb_num;i++)
000118  2100              MOVS     r1,#0
;;;206    	{
;;;207         lcd_buffer[n-i]=s[i];
00011a  4ab8              LDR      r2,|L1.1020|
00011c  e004              B        |L1.296|
                  |L1.286|
00011e  5c63              LDRB     r3,[r4,r1]
000120  1a46              SUBS     r6,r0,r1
000122  1c49              ADDS     r1,r1,#1              ;205
000124  5593              STRB     r3,[r2,r6]
000126  b249              SXTB     r1,r1                 ;205
                  |L1.296|
000128  42a9              CMP      r1,r5                 ;205
00012a  dbf8              BLT      |L1.286|
;;;208    	}
;;;209    }
00012c  bdfe              POP      {r1-r7,pc}
;;;210    
                          ENDP

                  long2lcd_mmm PROC
;;;211    //-----------------------------------------------
;;;212    void long2lcd_mmm(signed long in,char xy,char des)
00012e  b5fe              PUSH     {r1-r7,lr}
;;;213    {
;;;214    signed char i;
;;;215    char n;
;;;216    char s[10];
;;;217    char minus='+';
000130  232b              MOVS     r3,#0x2b
;;;218    char zero_on;
;;;219    char simb_num;
;;;220    
;;;221    if(in<0)
000132  2800              CMP      r0,#0
000134  da01              BGE      |L1.314|
;;;222    	{
;;;223    	in=-in;
000136  4240              RSBS     r0,r0,#0
;;;224    	minus='-';
000138  232d              MOVS     r3,#0x2d
                  |L1.314|
;;;225    	}
;;;226    
;;;227    for(i=0;i<10;i++)
00013a  2500              MOVS     r5,#0
;;;228    	{
;;;229    	s[i]=in%10;
00013c  260a              MOVS     r6,#0xa
00013e  466c              MOV      r4,sp                 ;216
                  |L1.320|
000140  4607              MOV      r7,r0
000142  fb90f0f6          SDIV     r0,r0,r6
000146  fb067710          MLS      r7,r6,r0,r7
00014a  5567              STRB     r7,[r4,r5]
00014c  1c6d              ADDS     r5,r5,#1              ;227
00014e  b26d              SXTB     r5,r5                 ;227
000150  2d0a              CMP      r5,#0xa               ;227
000152  dbf5              BLT      |L1.320|
;;;230    	in/=10;
;;;231    	}   
;;;232    
;;;233    zero_on=1;
000154  2601              MOVS     r6,#1
;;;234    simb_num=0;
000156  2500              MOVS     r5,#0
;;;235    
;;;236    for (i=9;i>=0;i--)
000158  2009              MOVS     r0,#9
;;;237    	{
;;;238    	if(zero_on&&(!s[i])&&(i>(des)))
;;;239    	     {
;;;240    	     s[i]=0x20;
00015a  2720              MOVS     r7,#0x20
00015c  e000              B        |L1.352|
                  |L1.350|
00015e  b146              CBZ      r6,|L1.370|
                  |L1.352|
000160  f814c000          LDRB     r12,[r4,r0]           ;238
000164  f1bc0f00          CMP      r12,#0                ;238
000168  d103              BNE      |L1.370|
00016a  4290              CMP      r0,r2                 ;238
00016c  dd01              BLE      |L1.370|
00016e  5427              STRB     r7,[r4,r0]
000170  e005              B        |L1.382|
                  |L1.370|
;;;241    	     }
;;;242    	else 
;;;243    	     {
;;;244    	     s[i]=s[i]+0x30;
000172  5c26              LDRB     r6,[r4,r0]
000174  3630              ADDS     r6,r6,#0x30
000176  5426              STRB     r6,[r4,r0]
;;;245    	     zero_on=0;
000178  2600              MOVS     r6,#0
;;;246    	     simb_num++;
00017a  1c6d              ADDS     r5,r5,#1
00017c  b2ed              UXTB     r5,r5
                  |L1.382|
00017e  1e40              SUBS     r0,r0,#1              ;236
000180  b240              SXTB     r0,r0                 ;236
000182  2800              CMP      r0,#0                 ;236
000184  daeb              BGE      |L1.350|
;;;247    	     }
;;;248    	 }
;;;249    	          
;;;250    if(minus=='-')	
000186  2b2d              CMP      r3,#0x2d
000188  d102              BNE      |L1.400|
;;;251         {
;;;252         s[simb_num++]=minus; 
00018a  5563              STRB     r3,[r4,r5]
00018c  1c6d              ADDS     r5,r5,#1
00018e  b2ed              UXTB     r5,r5
                  |L1.400|
;;;253         }    
;;;254    if(des)
000190  b16a              CBZ      r2,|L1.430|
;;;255         {
;;;256         for(i=simb_num;i>des;i--)
000192  b268              SXTB     r0,r5
000194  e005              B        |L1.418|
                  |L1.406|
;;;257              {
;;;258              s[i]=s[i-1];
000196  1823              ADDS     r3,r4,r0
000198  f8133c01          LDRB     r3,[r3,#-1]
00019c  5423              STRB     r3,[r4,r0]
00019e  1e40              SUBS     r0,r0,#1              ;256
0001a0  b240              SXTB     r0,r0                 ;256
                  |L1.418|
0001a2  4290              CMP      r0,r2                 ;256
0001a4  dcf7              BGT      |L1.406|
;;;259              }
;;;260         s[des]='.';
0001a6  202e              MOVS     r0,#0x2e
;;;261         simb_num++;     
0001a8  1c6d              ADDS     r5,r5,#1
0001aa  54a0              STRB     r0,[r4,r2]            ;260
0001ac  b2ed              UXTB     r5,r5
                  |L1.430|
;;;262         }
;;;263    	
;;;264    n=find(xy);
0001ae  4608              MOV      r0,r1
0001b0  f7fffffe          BL       find
;;;265    for (i=0;i<simb_num;i++)
0001b4  2100              MOVS     r1,#0
;;;266    	{
;;;267         lcd_buffer[n-i]=s[i];
0001b6  4a91              LDR      r2,|L1.1020|
0001b8  e004              B        |L1.452|
                  |L1.442|
0001ba  5c63              LDRB     r3,[r4,r1]
0001bc  1a46              SUBS     r6,r0,r1
0001be  1c49              ADDS     r1,r1,#1              ;265
0001c0  5593              STRB     r3,[r2,r6]
0001c2  b249              SXTB     r1,r1                 ;265
                  |L1.452|
0001c4  42a9              CMP      r1,r5                 ;265
0001c6  dbf8              BLT      |L1.442|
;;;268    	}
;;;269    }
0001c8  bdfe              POP      {r1-r7,pc}
;;;270    
                          ENDP

                  long2lcdyx_mmm PROC
;;;271    //-----------------------------------------------
;;;272    void long2lcdyx_mmm(signed long in,char y,char x,char des)
0001ca  b5fe              PUSH     {r1-r7,lr}
;;;273    {
;;;274    signed char i;
;;;275    char n;
;;;276    char s[10];
;;;277    char minus='+';
0001cc  262b              MOVS     r6,#0x2b
;;;278    char zero_on;
;;;279    char simb_num;
;;;280    
;;;281    if(in<0)
0001ce  2800              CMP      r0,#0
0001d0  da01              BGE      |L1.470|
;;;282    	{
;;;283    	in=-in;
0001d2  4240              RSBS     r0,r0,#0
;;;284    	minus='-';
0001d4  262d              MOVS     r6,#0x2d
                  |L1.470|
;;;285    	}
;;;286    
;;;287    for(i=0;i<10;i++)
0001d6  2400              MOVS     r4,#0
;;;288    	{
;;;289    	s[i]=in%10;
0001d8  270a              MOVS     r7,#0xa
0001da  466d              MOV      r5,sp                 ;276
                  |L1.476|
0001dc  4684              MOV      r12,r0
0001de  fb90f0f7          SDIV     r0,r0,r7
0001e2  fb07cc10          MLS      r12,r7,r0,r12
0001e6  f805c004          STRB     r12,[r5,r4]
0001ea  1c64              ADDS     r4,r4,#1              ;287
0001ec  b264              SXTB     r4,r4                 ;287
0001ee  2c0a              CMP      r4,#0xa               ;287
0001f0  dbf4              BLT      |L1.476|
;;;290    	in/=10;
;;;291    	}   
;;;292    
;;;293    zero_on=1;
0001f2  2701              MOVS     r7,#1
;;;294    simb_num=0;
0001f4  2000              MOVS     r0,#0
;;;295    
;;;296    for (i=9;i>=0;i--)
0001f6  2409              MOVS     r4,#9
;;;297    	{
;;;298    	if(zero_on&&(!s[i])&&(i>(des)))
;;;299    	     {
;;;300    	     s[i]=0x20;
0001f8  f04f0c20          MOV      r12,#0x20
0001fc  e000              B        |L1.512|
                  |L1.510|
0001fe  b14f              CBZ      r7,|L1.532|
                  |L1.512|
000200  f815e004          LDRB     lr,[r5,r4]            ;298
000204  f1be0f00          CMP      lr,#0                 ;298
000208  d104              BNE      |L1.532|
00020a  429c              CMP      r4,r3                 ;298
00020c  dd02              BLE      |L1.532|
00020e  f805c004          STRB     r12,[r5,r4]
000212  e005              B        |L1.544|
                  |L1.532|
;;;301    	     }
;;;302    	else 
;;;303    	     {
;;;304    	     s[i]=s[i]+0x30;
000214  5d2f              LDRB     r7,[r5,r4]
000216  3730              ADDS     r7,r7,#0x30
000218  552f              STRB     r7,[r5,r4]
;;;305    	     zero_on=0;
00021a  2700              MOVS     r7,#0
;;;306    	     simb_num++;
00021c  1c40              ADDS     r0,r0,#1
00021e  b2c0              UXTB     r0,r0
                  |L1.544|
000220  1e64              SUBS     r4,r4,#1              ;296
000222  b264              SXTB     r4,r4                 ;296
000224  2c00              CMP      r4,#0                 ;296
000226  daea              BGE      |L1.510|
;;;307    	     }
;;;308    	 }
;;;309    	          
;;;310    if(minus=='-')	
000228  2e2d              CMP      r6,#0x2d
00022a  d102              BNE      |L1.562|
;;;311         {
;;;312         s[simb_num++]=minus; 
00022c  542e              STRB     r6,[r5,r0]
00022e  1c40              ADDS     r0,r0,#1
000230  b2c0              UXTB     r0,r0
                  |L1.562|
;;;313         }    
;;;314    if(des)
000232  b16b              CBZ      r3,|L1.592|
;;;315         {
;;;316         for(i=simb_num;i>des;i--)
000234  b244              SXTB     r4,r0
000236  e005              B        |L1.580|
                  |L1.568|
;;;317              {
;;;318              s[i]=s[i-1];
000238  192e              ADDS     r6,r5,r4
00023a  f8166c01          LDRB     r6,[r6,#-1]
00023e  552e              STRB     r6,[r5,r4]
000240  1e64              SUBS     r4,r4,#1              ;316
000242  b264              SXTB     r4,r4                 ;316
                  |L1.580|
000244  429c              CMP      r4,r3                 ;316
000246  dcf7              BGT      |L1.568|
;;;319              }
;;;320         s[des]='.';
000248  242e              MOVS     r4,#0x2e
;;;321         simb_num++;     
00024a  1c40              ADDS     r0,r0,#1
00024c  54ec              STRB     r4,[r5,r3]            ;320
00024e  b2c0              UXTB     r0,r0
                  |L1.592|
;;;322         }
;;;323    	
;;;324    n=(20*y)+x;
000250  eb010181          ADD      r1,r1,r1,LSL #2
000254  eb020181          ADD      r1,r2,r1,LSL #2
000258  b2ca              UXTB     r2,r1
;;;325    for (i=0;i<simb_num;i++)
00025a  2100              MOVS     r1,#0
;;;326    	{
;;;327         lcd_buffer[n-i]=s[i];
00025c  4b67              LDR      r3,|L1.1020|
00025e  e004              B        |L1.618|
                  |L1.608|
000260  5c6c              LDRB     r4,[r5,r1]
000262  1a56              SUBS     r6,r2,r1
000264  1c49              ADDS     r1,r1,#1              ;325
000266  559c              STRB     r4,[r3,r6]
000268  b249              SXTB     r1,r1                 ;325
                  |L1.618|
00026a  4281              CMP      r1,r0                 ;325
00026c  dbf8              BLT      |L1.608|
;;;328    	}
;;;329    
;;;330    
;;;331    
;;;332    }
00026e  bdfe              POP      {r1-r7,pc}
;;;333    
                          ENDP

                  int2lcdyx PROC
;;;334    //-----------------------------------------------
;;;335    void int2lcdyx(unsigned short in,char y,char x,char des)
000270  b570              PUSH     {r4-r6,lr}
;;;336    {
000272  460d              MOV      r5,r1
000274  4616              MOV      r6,r2
000276  461c              MOV      r4,r3
;;;337    char i;
;;;338    char n;
;;;339    bin2bcd_int(in);
000278  f7fffffe          BL       bin2bcd_int
;;;340    bcd2lcd_zero(des+1);
00027c  1c60              ADDS     r0,r4,#1
00027e  b2c0              UXTB     r0,r0
000280  f7fffffe          BL       bcd2lcd_zero
;;;341    i=(y*20)+x;
000284  eb050085          ADD      r0,r5,r5,LSL #2
000288  eb060080          ADD      r0,r6,r0,LSL #2
00028c  b2c1              UXTB     r1,r0
;;;342    for (n=0;n<5;n++)
;;;343    	{ 
;;;344    	if(n<des)
;;;345    		{
;;;346    		lcd_buffer[i]=dig[n];
00028e  4a5c              LDR      r2,|L1.1024|
000290  4b5a              LDR      r3,|L1.1020|
000292  2000              MOVS     r0,#0                 ;342
                  |L1.660|
000294  42a0              CMP      r0,r4                 ;344
000296  d201              BCS      |L1.668|
000298  5c15              LDRB     r5,[r2,r0]
00029a  545d              STRB     r5,[r3,r1]
                  |L1.668|
;;;347    		}   
;;;348    	if((n>=des)&&(dig[n]!=0x20))
00029c  d306              BCC      |L1.684|
00029e  5c15              LDRB     r5,[r2,r0]
0002a0  2d20              CMP      r5,#0x20
0002a2  d003              BEQ      |L1.684|
;;;349    		{
;;;350    		if(!des)lcd_buffer[i]=dig[n];	
0002a4  b14c              CBZ      r4,|L1.698|
;;;351    		else lcd_buffer[i-1]=dig[n];
0002a6  185e              ADDS     r6,r3,r1
0002a8  f8065c01          STRB     r5,[r6,#-1]
                  |L1.684|
;;;352       		}   
;;;353    	i--;	
0002ac  1e49              SUBS     r1,r1,#1
0002ae  1c40              ADDS     r0,r0,#1              ;342
0002b0  b2c0              UXTB     r0,r0                 ;342
0002b2  b2c9              UXTB     r1,r1
0002b4  2805              CMP      r0,#5                 ;342
0002b6  d3ed              BCC      |L1.660|
;;;354    	}
;;;355    }
0002b8  bd70              POP      {r4-r6,pc}
                  |L1.698|
0002ba  545d              STRB     r5,[r3,r1]            ;350
0002bc  e7f6              B        |L1.684|
;;;356    
                          ENDP

                  community2lcd PROC
;;;364    //-----------------------------------------------
;;;365    void community2lcd(char* in,
0002be  b570              PUSH     {r4-r6,lr}
;;;366    			char xy,
;;;367    			char flash_pos,
;;;368    			char flash_on)
;;;369    {
0002c0  4604              MOV      r4,r0
0002c2  4608              MOV      r0,r1
0002c4  4615              MOV      r5,r2
0002c6  461e              MOV      r6,r3
;;;370    char temp;
;;;371    char i;
;;;372    //char n;
;;;373    
;;;374    
;;;375    i=find(xy);
0002c8  f7fffffe          BL       find
;;;376    
;;;377    //in1=192;
;;;378    
;;;379    //in2=34;
;;;380    
;;;381    
;;;382    
;;;383    temp=i;
;;;384    
;;;385    //ptr_ram=&lcd_buffer[find(xy)];
;;;386    if(temp!=255)
;;;387    while (*in)
;;;388    	{
;;;389    	lcd_buffer[temp]=*in++;
0002cc  4b4b              LDR      r3,|L1.1020|
0002ce  4601              MOV      r1,r0                 ;375
0002d0  28ff              CMP      r0,#0xff              ;386
0002d2  d104              BNE      |L1.734|
0002d4  e006              B        |L1.740|
                  |L1.726|
0002d6  541a              STRB     r2,[r3,r0]
0002d8  1c64              ADDS     r4,r4,#1
;;;390    	temp++;
0002da  1c40              ADDS     r0,r0,#1
0002dc  b2c0              UXTB     r0,r0
                  |L1.734|
0002de  7822              LDRB     r2,[r4,#0]            ;387
0002e0  2a00              CMP      r2,#0                 ;387
0002e2  d1f8              BNE      |L1.726|
                  |L1.740|
;;;391        	}
;;;392    
;;;393    
;;;394    
;;;395    if((bFL2)&&(flash_on))
0002e4  4848              LDR      r0,|L1.1032|
0002e6  7800              LDRB     r0,[r0,#0]  ; bFL2
0002e8  2800              CMP      r0,#0
0002ea  d004              BEQ      |L1.758|
0002ec  2e00              CMP      r6,#0
0002ee  d002              BEQ      |L1.758|
;;;396    	{
;;;397    	lcd_buffer[i+flash_pos]=95;
0002f0  4429              ADD      r1,r1,r5
0002f2  205f              MOVS     r0,#0x5f
0002f4  5458              STRB     r0,[r3,r1]
                  |L1.758|
;;;398    	}
;;;399    
;;;400    }
0002f6  bd70              POP      {r4-r6,pc}
;;;401    
                          ENDP

                  ip2lcd PROC
;;;402    //-----------------------------------------------
;;;403    void ip2lcd(	short in1,
0002f8  e92d4fff          PUSH     {r0-r11,lr}
;;;404    			short in2,
;;;405    			short in3,
;;;406    			short in4,
;;;407    			char xy,
;;;408    			char flash_pos)
;;;409    {
0002fc  4681              MOV      r9,r0
0002fe  e9dd040d          LDRD     r0,r4,[sp,#0x34]
000302  468a              MOV      r10,r1
000304  4693              MOV      r11,r2
;;;410    char i;
;;;411    //char n;
;;;412    
;;;413    //bin2bcd_int(in);
;;;414    //bcd2lcd_zero(des+1);
;;;415    i=find(xy);
000306  f7fffffe          BL       find
;;;416    
;;;417    //in1=192;
;;;418    
;;;419    //in2=34;
;;;420    
;;;421    if((flash_pos==1)&&(bFL2))
;;;422    	{
;;;423    	lcd_buffer[i-12]=' ';
00030a  2220              MOVS     r2,#0x20
00030c  f8df80f8          LDR      r8,|L1.1032|
000310  493a              LDR      r1,|L1.1020|
;;;424    	lcd_buffer[i-13]=' ';
;;;425    	lcd_buffer[i-14]=' ';
;;;426    	}
;;;427    else 
;;;428    	{
;;;429    	lcd_buffer[i-12]=0x30+(in1%10);
000312  230a              MOVS     r3,#0xa
;;;430    	lcd_buffer[i-13]=0x30+(in1/10)%10;
;;;431    	lcd_buffer[i-14]=0x30+(in1/100);
000314  f04f0c64          MOV      r12,#0x64
000318  2c01              CMP      r4,#1                 ;421
00031a  d109              BNE      |L1.816|
00031c  f8985000          LDRB     r5,[r8,#0]            ;421  ; bFL2
000320  b135              CBZ      r5,|L1.816|
000322  180d              ADDS     r5,r1,r0              ;423
000324  f1a5050e          SUB      r5,r5,#0xe            ;423
000328  70aa              STRB     r2,[r5,#2]            ;423
00032a  706a              STRB     r2,[r5,#1]            ;424
00032c  702a              STRB     r2,[r5,#0]            ;425
00032e  e020              B        |L1.882|
                  |L1.816|
000330  fb99f6f3          SDIV     r6,r9,r3              ;429
000334  fb039716          MLS      r7,r3,r6,r9           ;429
000338  180d              ADDS     r5,r1,r0              ;429
00033a  3730              ADDS     r7,r7,#0x30           ;429
00033c  f1a5050e          SUB      r5,r5,#0xe            ;429
;;;432    	}
;;;433    
;;;434    if((flash_pos==2)&&(bFL2))
000340  2c02              CMP      r4,#2
000342  70af              STRB     r7,[r5,#2]            ;429
000344  fb96f7f3          SDIV     r7,r6,r3              ;430
000348  fb036617          MLS      r6,r3,r7,r6           ;430
00034c  f1060630          ADD      r6,r6,#0x30           ;430
000350  706e              STRB     r6,[r5,#1]            ;430
000352  fb99f6fc          SDIV     r6,r9,r12             ;431
000356  f1060630          ADD      r6,r6,#0x30           ;431
00035a  f8056b0e          STRB     r6,[r5],#0xe          ;431
00035e  d108              BNE      |L1.882|
000360  f8986000          LDRB     r6,[r8,#0]  ; bFL2
000364  b12e              CBZ      r6,|L1.882|
000366  f1a5050a          SUB      r5,r5,#0xa
;;;435    	{
;;;436    	lcd_buffer[i-8]=' ';
00036a  70aa              STRB     r2,[r5,#2]
;;;437    	lcd_buffer[i-9]=' ';
00036c  706a              STRB     r2,[r5,#1]
;;;438    	lcd_buffer[i-10]=' ';
00036e  702a              STRB     r2,[r5,#0]
000370  e021              B        |L1.950|
                  |L1.882|
;;;439    	}
;;;440    else 
;;;441    	{
;;;442    	lcd_buffer[i-8]=0x30+(in2%10);
000372  fb9af6f3          SDIV     r6,r10,r3
000376  fb03a716          MLS      r7,r3,r6,r10
00037a  180d              ADDS     r5,r1,r0
00037c  3730              ADDS     r7,r7,#0x30
00037e  f1a5050a          SUB      r5,r5,#0xa
;;;443    	lcd_buffer[i-9]=0x30+(in2/10)%10;
;;;444    	lcd_buffer[i-10]=0x30+(in2/100);
;;;445    	}
;;;446    
;;;447    if((flash_pos==3)&&(bFL2))
000382  2c03              CMP      r4,#3
000384  70af              STRB     r7,[r5,#2]            ;442
000386  fb96f7f3          SDIV     r7,r6,r3              ;443
00038a  fb036617          MLS      r6,r3,r7,r6           ;443
00038e  f1060630          ADD      r6,r6,#0x30           ;443
000392  706e              STRB     r6,[r5,#1]            ;443
000394  fb9af6fc          SDIV     r6,r10,r12            ;444
000398  f1060630          ADD      r6,r6,#0x30           ;444
00039c  4667              MOV      r7,r12                ;444
00039e  f8056b0a          STRB     r6,[r5],#0xa          ;444
0003a2  d108              BNE      |L1.950|
0003a4  f8986000          LDRB     r6,[r8,#0]  ; bFL2
0003a8  b12e              CBZ      r6,|L1.950|
0003aa  f1a50506          SUB      r5,r5,#6
;;;448    	{
;;;449    	lcd_buffer[i-4]=' ';
0003ae  70aa              STRB     r2,[r5,#2]
;;;450    	lcd_buffer[i-5]=' ';
0003b0  706a              STRB     r2,[r5,#1]
;;;451    	lcd_buffer[i-6]=' ';
0003b2  702a              STRB     r2,[r5,#0]
0003b4  e02a              B        |L1.1036|
                  |L1.950|
;;;452    	}
;;;453    else 
;;;454    	{
;;;455    	lcd_buffer[i-4]=0x30+in3%10;
0003b6  fb9bf6f3          SDIV     r6,r11,r3
0003ba  fb03b716          MLS      r7,r3,r6,r11
0003be  180d              ADDS     r5,r1,r0
0003c0  3730              ADDS     r7,r7,#0x30
0003c2  f1a50506          SUB      r5,r5,#6
;;;456    	lcd_buffer[i-5]=0x30+(in3/10)%10;
;;;457    	lcd_buffer[i-6]=0x30+(in3/100);
;;;458    	}
;;;459    
;;;460    if((flash_pos==4)&&(bFL2))
0003c6  2c04              CMP      r4,#4
0003c8  70af              STRB     r7,[r5,#2]            ;455
0003ca  fb96f7f3          SDIV     r7,r6,r3              ;456
0003ce  fb036617          MLS      r6,r3,r7,r6           ;456
0003d2  f1060630          ADD      r6,r6,#0x30           ;456
0003d6  706e              STRB     r6,[r5,#1]            ;456
0003d8  fb9bf6fc          SDIV     r6,r11,r12            ;457
0003dc  f1060630          ADD      r6,r6,#0x30           ;457
0003e0  4667              MOV      r7,r12                ;457
0003e2  f8056b06          STRB     r6,[r5],#6            ;457
0003e6  d111              BNE      |L1.1036|
0003e8  f8984000          LDRB     r4,[r8,#0]  ; bFL2
0003ec  b174              CBZ      r4,|L1.1036|
;;;461    	{
;;;462    	lcd_buffer[i]=' ';
0003ee  f1a50502          SUB      r5,r5,#2
0003f2  540a              STRB     r2,[r1,r0]
;;;463    	lcd_buffer[i-1]=' ';
0003f4  706a              STRB     r2,[r5,#1]
;;;464    	lcd_buffer[i-2]=' ';
0003f6  702a              STRB     r2,[r5,#0]
                  |L1.1016|
;;;465    	}
;;;466    else 
;;;467    	{
;;;468    	lcd_buffer[i]=0x30+in4%10;
;;;469    	lcd_buffer[i-1]=0x30+(in4/10)%10;
;;;470    	lcd_buffer[i-2]=0x30+(in4/100);
;;;471    	}
;;;472    }
0003f8  e8bd8fff          POP      {r0-r11,pc}
                  |L1.1020|
                          DCD      lcd_buffer
                  |L1.1024|
                          DCD      ||dig||
                  |L1.1028|
                          DCD      zero_on
                  |L1.1032|
                          DCD      bFL2
                  |L1.1036|
00040c  9c03              LDR      r4,[sp,#0xc]          ;468
00040e  fb94f2f3          SDIV     r2,r4,r3              ;468
000412  fb034412          MLS      r4,r3,r2,r4           ;468
000416  3430              ADDS     r4,r4,#0x30           ;468
000418  540c              STRB     r4,[r1,r0]            ;468
00041a  fb92f4f3          SDIV     r4,r2,r3              ;469
00041e  fb032214          MLS      r2,r3,r4,r2           ;469
000422  4408              ADD      r0,r0,r1              ;469
000424  f1a00002          SUB      r0,r0,#2              ;469
000428  3230              ADDS     r2,r2,#0x30           ;469
00042a  7042              STRB     r2,[r0,#1]            ;469
00042c  9903              LDR      r1,[sp,#0xc]          ;470
00042e  fb91f1f7          SDIV     r1,r1,r7              ;470
000432  f1010130          ADD      r1,r1,#0x30           ;470
000436  7001              STRB     r1,[r0,#0]            ;470
000438  e7de              B        |L1.1016|
;;;473    
                          ENDP

                  int2lcd PROC
;;;474    //-----------------------------------------------
;;;475    void int2lcd(unsigned short in,char xy,char des)
00043a  b570              PUSH     {r4-r6,lr}
;;;476    {
00043c  460d              MOV      r5,r1
00043e  4614              MOV      r4,r2
;;;477    char i;
;;;478    char n;
;;;479    
;;;480    bin2bcd_int(in);
000440  f7fffffe          BL       bin2bcd_int
;;;481    bcd2lcd_zero(des+1);
000444  1c60              ADDS     r0,r4,#1
000446  b2c0              UXTB     r0,r0
000448  f7fffffe          BL       bcd2lcd_zero
;;;482    i=find(xy);
00044c  4628              MOV      r0,r5
00044e  f7fffffe          BL       find
;;;483    for (n=0;n<5;n++)
;;;484    	{
;;;485       	if(!des&&(dig[n]!=' '))
000452  4bb4              LDR      r3,|L1.1828|
;;;486       		{
;;;487       		lcd_buffer[i]=dig[n];	 
000454  4ab4              LDR      r2,|L1.1832|
000456  2100              MOVS     r1,#0                 ;483
                  |L1.1112|
000458  b924              CBNZ     r4,|L1.1124|
00045a  5c5d              LDRB     r5,[r3,r1]            ;485
00045c  2d20              CMP      r5,#0x20              ;485
00045e  d001              BEQ      |L1.1124|
                  |L1.1120|
000460  5415              STRB     r5,[r2,r0]
000462  e00f              B        |L1.1156|
                  |L1.1124|
;;;488       		}
;;;489       	else 
;;;490       		{
;;;491       		if(n<des)lcd_buffer[i]=dig[n];
000464  42a1              CMP      r1,r4
000466  d201              BCS      |L1.1132|
000468  5c5d              LDRB     r5,[r3,r1]
00046a  e7f9              B        |L1.1120|
                  |L1.1132|
;;;492       		else if (n==des)
00046c  d104              BNE      |L1.1144|
;;;493       			{
;;;494       			lcd_buffer[i]='.';
00046e  f04f052e          MOV      r5,#0x2e
000472  5415              STRB     r5,[r2,r0]
;;;495       			lcd_buffer[i-1]=dig[n];
000474  5c5d              LDRB     r5,[r3,r1]
000476  e002              B        |L1.1150|
                  |L1.1144|
;;;496       			} 
;;;497       		else if ((n>des)&&(dig[n]!=' ')) lcd_buffer[i-1]=dig[n];   		
000478  5c5d              LDRB     r5,[r3,r1]
00047a  2d20              CMP      r5,#0x20
00047c  d002              BEQ      |L1.1156|
                  |L1.1150|
00047e  1816              ADDS     r6,r2,r0
000480  f8065c01          STRB     r5,[r6,#-1]
                  |L1.1156|
;;;498       		}  
;;;499    		
;;;500    	i--;	
000484  1e40              SUBS     r0,r0,#1
000486  1c49              ADDS     r1,r1,#1              ;483
000488  b2c9              UXTB     r1,r1                 ;483
00048a  b2c0              UXTB     r0,r0
00048c  2905              CMP      r1,#5                 ;483
00048e  d3e3              BCC      |L1.1112|
;;;501    	}
;;;502    }
000490  bd70              POP      {r4-r6,pc}
;;;503    
                          ENDP

                  long2lcdhyx PROC
;;;504    //-----------------------------------------------
;;;505    void long2lcdhyx(unsigned long in,char y,char x)
000492  b517              PUSH     {r0-r2,r4,lr}
;;;506    {
;;;507    char i;
;;;508    char n;
;;;509    
;;;510    i=(20*y)+x;
000494  eb010081          ADD      r0,r1,r1,LSL #2
000498  eb020080          ADD      r0,r2,r0,LSL #2
00049c  b2c2              UXTB     r2,r0
;;;511    
;;;512    n=*((char*)&in);
00049e  f89d3000          LDRB     r3,[sp,#0]
;;;513    lcd_buffer[i]=ABCDEF[n%16];
0004a2  48a2              LDR      r0,|L1.1836|
0004a4  f003010f          AND      r1,r3,#0xf
;;;514    i--;
;;;515    lcd_buffer[i]=ABCDEF[n/16];
0004a8  eb001313          ADD      r3,r0,r3,LSR #4
0004ac  5c44              LDRB     r4,[r0,r1]            ;513
0004ae  499e              LDR      r1,|L1.1832|
0004b0  548c              STRB     r4,[r1,r2]            ;513
0004b2  1e52              SUBS     r2,r2,#1              ;514
0004b4  b2d2              UXTB     r2,r2                 ;514
0004b6  781b              LDRB     r3,[r3,#0]
0004b8  548b              STRB     r3,[r1,r2]
;;;516    i--;
;;;517    
;;;518    n=*(((char*)&in)+1);
0004ba  f89d3001          LDRB     r3,[sp,#1]
0004be  1e52              SUBS     r2,r2,#1              ;516
;;;519    lcd_buffer[i]=ABCDEF[n%16];
0004c0  f003040f          AND      r4,r3,#0xf
0004c4  b2d2              UXTB     r2,r2                 ;516
0004c6  5d04              LDRB     r4,[r0,r4]
0004c8  548c              STRB     r4,[r1,r2]
;;;520    i--;
0004ca  1e52              SUBS     r2,r2,#1
;;;521    lcd_buffer[i]=ABCDEF[n/16];
0004cc  eb001313          ADD      r3,r0,r3,LSR #4
0004d0  b2d2              UXTB     r2,r2                 ;520
0004d2  781b              LDRB     r3,[r3,#0]
0004d4  548b              STRB     r3,[r1,r2]
;;;522    i--;
;;;523    
;;;524    n=*(((char*)&in)+2);
0004d6  f89d3002          LDRB     r3,[sp,#2]
0004da  1e52              SUBS     r2,r2,#1              ;522
;;;525    lcd_buffer[i]=ABCDEF[n%16];
0004dc  f003040f          AND      r4,r3,#0xf
0004e0  b2d2              UXTB     r2,r2                 ;522
0004e2  5d04              LDRB     r4,[r0,r4]
0004e4  548c              STRB     r4,[r1,r2]
;;;526    i--;
0004e6  1e52              SUBS     r2,r2,#1
;;;527    lcd_buffer[i]=ABCDEF[n/16];
0004e8  eb001313          ADD      r3,r0,r3,LSR #4
0004ec  b2d2              UXTB     r2,r2                 ;526
0004ee  781b              LDRB     r3,[r3,#0]
0004f0  548b              STRB     r3,[r1,r2]
;;;528    i--;
;;;529    
;;;530    n=*(((char*)&in)+3);
0004f2  f89d3003          LDRB     r3,[sp,#3]
0004f6  1e52              SUBS     r2,r2,#1              ;528
;;;531    lcd_buffer[i]=ABCDEF[n%16];
0004f8  f003040f          AND      r4,r3,#0xf
0004fc  b2d2              UXTB     r2,r2                 ;528
0004fe  5d04              LDRB     r4,[r0,r4]
000500  548c              STRB     r4,[r1,r2]
;;;532    i--;
000502  1e52              SUBS     r2,r2,#1
;;;533    lcd_buffer[i]=ABCDEF[n/16];
000504  eb001013          ADD      r0,r0,r3,LSR #4
000508  b2d2              UXTB     r2,r2                 ;532
00050a  7800              LDRB     r0,[r0,#0]
00050c  5488              STRB     r0,[r1,r2]
;;;534    i--;
;;;535    }
00050e  bd1e              POP      {r1-r4,pc}
;;;536    
                          ENDP

                  char2lcdhyx PROC
;;;550    //-----------------------------------------------
;;;551    void char2lcdhyx(char in,char y,char x)
000510  eb010181          ADD      r1,r1,r1,LSL #2
;;;552    {
;;;553    char i;
;;;554    
;;;555    i=(20*y)+x;
000514  eb020181          ADD      r1,r2,r1,LSL #2
;;;556    
;;;557    lcd_buffer[i]=ABCDEF[in%16];
000518  4a84              LDR      r2,|L1.1836|
00051a  b510              PUSH     {r4,lr}               ;552
00051c  f000030f          AND      r3,r0,#0xf
000520  b2c9              UXTB     r1,r1                 ;555
000522  5cd4              LDRB     r4,[r2,r3]
000524  4b80              LDR      r3,|L1.1832|
;;;558    i--;
;;;559    lcd_buffer[i]=ABCDEF[in/16];
000526  eb021010          ADD      r0,r2,r0,LSR #4
00052a  545c              STRB     r4,[r3,r1]            ;557
00052c  1e49              SUBS     r1,r1,#1              ;558
00052e  b2c9              UXTB     r1,r1                 ;558
000530  7800              LDRB     r0,[r0,#0]
000532  5458              STRB     r0,[r3,r1]
;;;560    i--;
;;;561    }
000534  bd10              POP      {r4,pc}
;;;562    
                          ENDP

                  char2lcdbyx PROC
;;;583    //-----------------------------------------------
;;;584    void char2lcdbyx(char in,char y,char x)
000536  eb010181          ADD      r1,r1,r1,LSL #2
;;;585    {
;;;586    char i;
;;;587    
;;;588    i=(20*y)+x;
00053a  eb020181          ADD      r1,r2,r1,LSL #2
00053e  b2cb              UXTB     r3,r1
;;;589    
;;;590    lcd_buffer[i--]=ABCDEF[in%2];
000540  497a              LDR      r1,|L1.1836|
000542  b510              PUSH     {r4,lr}               ;585
000544  f0000201          AND      r2,r0,#1
000548  5c8c              LDRB     r4,[r1,r2]
00054a  4a77              LDR      r2,|L1.1832|
00054c  54d4              STRB     r4,[r2,r3]
;;;591    in/=2;
00054e  0844              LSRS     r4,r0,#1
000550  1e5b              SUBS     r3,r3,#1              ;590
;;;592    lcd_buffer[i--]=ABCDEF[in%2];
000552  f0040001          AND      r0,r4,#1
000556  b2db              UXTB     r3,r3                 ;590
000558  5c08              LDRB     r0,[r1,r0]
00055a  54d0              STRB     r0,[r2,r3]
00055c  1e5b              SUBS     r3,r3,#1
00055e  b2d8              UXTB     r0,r3
;;;593    in/=2;
000560  0863              LSRS     r3,r4,#1
;;;594    lcd_buffer[i--]=ABCDEF[in%2];
000562  f0030401          AND      r4,r3,#1
;;;595    in/=2;
000566  085b              LSRS     r3,r3,#1
000568  5d0c              LDRB     r4,[r1,r4]            ;594
00056a  5414              STRB     r4,[r2,r0]            ;594
00056c  1e40              SUBS     r0,r0,#1              ;594
;;;596    lcd_buffer[i--]=ABCDEF[in%2];
00056e  f0030401          AND      r4,r3,#1
000572  b2c0              UXTB     r0,r0                 ;594
000574  5d0c              LDRB     r4,[r1,r4]
000576  5414              STRB     r4,[r2,r0]
;;;597    in/=2;
000578  085b              LSRS     r3,r3,#1
00057a  1e40              SUBS     r0,r0,#1              ;596
;;;598    lcd_buffer[i--]=ABCDEF[in%2];
00057c  f0030401          AND      r4,r3,#1
000580  b2c0              UXTB     r0,r0                 ;596
000582  5d0c              LDRB     r4,[r1,r4]
000584  5414              STRB     r4,[r2,r0]
;;;599    in/=2;
000586  085b              LSRS     r3,r3,#1
000588  1e40              SUBS     r0,r0,#1              ;598
;;;600    lcd_buffer[i--]=ABCDEF[in%2];
00058a  f0030401          AND      r4,r3,#1
00058e  b2c0              UXTB     r0,r0                 ;598
000590  5d0c              LDRB     r4,[r1,r4]
000592  5414              STRB     r4,[r2,r0]
;;;601    in/=2;
000594  085b              LSRS     r3,r3,#1
000596  1e40              SUBS     r0,r0,#1              ;600
;;;602    lcd_buffer[i--]=ABCDEF[in%2];
000598  f0030401          AND      r4,r3,#1
00059c  b2c0              UXTB     r0,r0                 ;600
00059e  5d0c              LDRB     r4,[r1,r4]
0005a0  5414              STRB     r4,[r2,r0]
0005a2  1e40              SUBS     r0,r0,#1
0005a4  b2c4              UXTB     r4,r0
;;;603    in/=2;
0005a6  0858              LSRS     r0,r3,#1
;;;604    lcd_buffer[i--]=ABCDEF[in%2];
0005a8  5c08              LDRB     r0,[r1,r0]
0005aa  5510              STRB     r0,[r2,r4]
;;;605    in/=2;
;;;606    }
0005ac  bd10              POP      {r4,pc}
;;;607    
                          ENDP

                  pointer_set PROC
;;;608    //-----------------------------------------------
;;;609    void pointer_set(char num_of_first_row)
0005ae  b530              PUSH     {r4,r5,lr}
;;;610    {
;;;611    if(sub_ind==index_set)lcd_buffer[num_of_first_row*20]=1;
0005b0  495f              LDR      r1,|L1.1840|
0005b2  2301              MOVS     r3,#1
0005b4  4d5c              LDR      r5,|L1.1832|
0005b6  f9912001          LDRSB    r2,[r1,#1]  ; a_ind
0005ba  f9911004          LDRSB    r1,[r1,#4]  ; a_ind
0005be  eb000480          ADD      r4,r0,r0,LSL #2
0005c2  428a              CMP      r2,r1
0005c4  d102              BNE      |L1.1484|
0005c6  f8053024          STRB     r3,[r5,r4,LSL #2]
;;;612    else if(sub_ind==(index_set+1))lcd_buffer[(num_of_first_row+1)*20]=1;
;;;613    else if(sub_ind==(index_set+2))lcd_buffer[(num_of_first_row+2)*20]=1;
;;;614    else if(sub_ind==(index_set+3))lcd_buffer[(num_of_first_row+3)*20]=1;
;;;615    else if(sub_ind==(index_set+4))lcd_buffer[(num_of_first_row+4)*20]=1;
;;;616    else if(sub_ind==(index_set+5))lcd_buffer[(num_of_first_row+5)*20]=1;
;;;617    else if(sub_ind==(index_set+6))lcd_buffer[(num_of_first_row+6)*20]=1;
;;;618    else if(sub_ind==(index_set+7))lcd_buffer[(num_of_first_row+7)*20]=1;
;;;619    }
0005ca  bd30              POP      {r4,r5,pc}
                  |L1.1484|
0005cc  4d56              LDR      r5,|L1.1832|
0005ce  1c4c              ADDS     r4,r1,#1              ;612
0005d0  eb000080          ADD      r0,r0,r0,LSL #2       ;611
0005d4  eb050080          ADD      r0,r5,r0,LSL #2       ;611
0005d8  42a2              CMP      r2,r4                 ;612
0005da  d101              BNE      |L1.1504|
0005dc  7503              STRB     r3,[r0,#0x14]         ;612
0005de  bd30              POP      {r4,r5,pc}
                  |L1.1504|
0005e0  1c8c              ADDS     r4,r1,#2              ;613
0005e2  42a2              CMP      r2,r4                 ;613
0005e4  d102              BNE      |L1.1516|
0005e6  f8803028          STRB     r3,[r0,#0x28]         ;613
0005ea  bd30              POP      {r4,r5,pc}
                  |L1.1516|
0005ec  1ccc              ADDS     r4,r1,#3              ;614
0005ee  42a2              CMP      r2,r4                 ;614
0005f0  d102              BNE      |L1.1528|
0005f2  f880303c          STRB     r3,[r0,#0x3c]         ;614
0005f6  bd30              POP      {r4,r5,pc}
                  |L1.1528|
0005f8  1d0c              ADDS     r4,r1,#4              ;615
0005fa  42a2              CMP      r2,r4                 ;615
0005fc  d102              BNE      |L1.1540|
0005fe  f8803050          STRB     r3,[r0,#0x50]         ;615
000602  bd30              POP      {r4,r5,pc}
                  |L1.1540|
000604  1d4c              ADDS     r4,r1,#5              ;616
000606  42a2              CMP      r2,r4                 ;616
000608  d102              BNE      |L1.1552|
00060a  f8803064          STRB     r3,[r0,#0x64]         ;616
00060e  bd30              POP      {r4,r5,pc}
                  |L1.1552|
000610  1d8c              ADDS     r4,r1,#6              ;617
000612  42a2              CMP      r2,r4                 ;617
000614  d102              BNE      |L1.1564|
000616  f8803078          STRB     r3,[r0,#0x78]         ;617
                  |L1.1562|
00061a  bd30              POP      {r4,r5,pc}
                  |L1.1564|
00061c  1dc9              ADDS     r1,r1,#7              ;618
00061e  428a              CMP      r2,r1                 ;618
000620  d1fb              BNE      |L1.1562|
000622  f880308c          STRB     r3,[r0,#0x8c]         ;618
000626  bd30              POP      {r4,r5,pc}
;;;620    
                          ENDP

                  tree_down PROC
;;;622    //-----------------------------------------------
;;;623    void tree_down(signed char offset_ind,signed char offset_sub_ind)
000628  4b42              LDR      r3,|L1.1844|
;;;624    {
;;;625    ind_pointer--;
00062a  881a              LDRH     r2,[r3,#0]  ; ind_pointer
00062c  1e52              SUBS     r2,r2,#1
;;;626    ind_pointer+=offset_ind;
00062e  4410              ADD      r0,r0,r2
000630  b200              SXTH     r0,r0
000632  8018              STRH     r0,[r3,#0]
;;;627    a_ind=b_ind[ind_pointer];
000634  4a40              LDR      r2,|L1.1848|
000636  eb000080          ADD      r0,r0,r0,LSL #2
00063a  4402              ADD      r2,r2,r0
00063c  483c              LDR      r0,|L1.1840|
00063e  6813              LDR      r3,[r2,#0]
000640  6003              STR      r3,[r0,#0]  ; a_ind
000642  7912              LDRB     r2,[r2,#4]
000644  7102              STRB     r2,[r0,#4]
;;;628    
;;;629    sub_ind+=offset_sub_ind;
000646  7842              LDRB     r2,[r0,#1]  ; a_ind
000648  4411              ADD      r1,r1,r2
00064a  7041              STRB     r1,[r0,#1]
;;;630    }
00064c  4770              BX       lr
;;;631    
                          ENDP

                  tree_up PROC
;;;632    //-----------------------------------------------
;;;633    void tree_up(char tind, char tsub_ind, char tindex_set, char tsub_ind1)
00064e  b5f0              PUSH     {r4-r7,lr}
;;;634    {
;;;635    b_ind[ind_pointer++]=a_ind;
000650  4d38              LDR      r5,|L1.1844|
000652  4f39              LDR      r7,|L1.1848|
000654  f9b54000          LDRSH    r4,[r5,#0]  ; ind_pointer
000658  eb040684          ADD      r6,r4,r4,LSL #2
00065c  1c64              ADDS     r4,r4,#1
00065e  802c              STRH     r4,[r5,#0]
000660  4c33              LDR      r4,|L1.1840|
000662  443e              ADD      r6,r6,r7
000664  6825              LDR      r5,[r4,#0]  ; a_ind
000666  6035              STR      r5,[r6,#0]
000668  7925              LDRB     r5,[r4,#4]  ; a_ind
00066a  7135              STRB     r5,[r6,#4]
;;;636    ind=(i_enum)tind;
00066c  7020              STRB     r0,[r4,#0]
;;;637    sub_ind=tsub_ind;
00066e  7061              STRB     r1,[r4,#1]
;;;638    index_set=tindex_set;
000670  7122              STRB     r2,[r4,#4]
;;;639    sub_ind1=tsub_ind1;
000672  70a3              STRB     r3,[r4,#2]
;;;640    }
000674  bdf0              POP      {r4-r7,pc}
;;;641    
                          ENDP

                  bgnd_par PROC
;;;642    //-----------------------------------------------
;;;643    void bgnd_par(char const *ptr0,char const *ptr1,char const *ptr2,char const *ptr3)
000676  b5f0              PUSH     {r4-r7,lr}
;;;644    {
000678  4605              MOV      r5,r0
00067a  460e              MOV      r6,r1
00067c  4617              MOV      r7,r2
;;;645    char i,*ptr_ram;
;;;646    clr_scrn();
00067e  f7fffffe          BL       clr_scrn
;;;647    
;;;648    ptr_ram=lcd_buffer;
000682  4c29              LDR      r4,|L1.1832|
;;;649    for(i=0;i<20;i++)
000684  f05f0000          MOVS.W   r0,#0
                  |L1.1672|
000688  1c40              ADDS     r0,r0,#1
;;;650    	{
;;;651    	*ptr_ram++=*ptr0++;
00068a  f8151b01          LDRB     r1,[r5],#1
00068e  b2c0              UXTB     r0,r0                 ;649
000690  f8041b01          STRB     r1,[r4],#1
000694  2814              CMP      r0,#0x14              ;649
000696  d3f7              BCC      |L1.1672|
;;;652    	}
;;;653    for(i=0;i<20;i++)
000698  f05f0000          MOVS.W   r0,#0
                  |L1.1692|
00069c  1c40              ADDS     r0,r0,#1
;;;654    	{
;;;655    	*ptr_ram++=*ptr1++;
00069e  f8161b01          LDRB     r1,[r6],#1
0006a2  b2c0              UXTB     r0,r0                 ;653
0006a4  f8041b01          STRB     r1,[r4],#1
0006a8  2814              CMP      r0,#0x14              ;653
0006aa  d3f7              BCC      |L1.1692|
;;;656    	}
;;;657    for(i=0;i<20;i++)
0006ac  f05f0000          MOVS.W   r0,#0
                  |L1.1712|
0006b0  1c40              ADDS     r0,r0,#1
;;;658    	{
;;;659    	*ptr_ram++=*ptr2++;
0006b2  f8171b01          LDRB     r1,[r7],#1
0006b6  b2c0              UXTB     r0,r0                 ;657
0006b8  f8041b01          STRB     r1,[r4],#1
0006bc  2814              CMP      r0,#0x14              ;657
0006be  d3f7              BCC      |L1.1712|
;;;660    	}
;;;661    for(i=0;i<20;i++)
0006c0  f05f0000          MOVS.W   r0,#0
                  |L1.1732|
0006c4  1c40              ADDS     r0,r0,#1
;;;662    	{
;;;663    	*ptr_ram++=*ptr3++;
0006c6  f8131b01          LDRB     r1,[r3],#1
0006ca  b2c0              UXTB     r0,r0                 ;661
0006cc  f8041b01          STRB     r1,[r4],#1
0006d0  2814              CMP      r0,#0x14              ;661
0006d2  d3f7              BCC      |L1.1732|
;;;664    	}
;;;665    
;;;666    
;;;667    }
0006d4  bdf0              POP      {r4-r7,pc}
;;;668    
                          ENDP

                  sub_bgnd PROC
;;;669    //-----------------------------------------------
;;;670    void sub_bgnd(char const *adr,char xy,signed char offset)
0006d6  b530              PUSH     {r4,r5,lr}
;;;671    {
0006d8  4604              MOV      r4,r0
0006da  4608              MOV      r0,r1
0006dc  4615              MOV      r5,r2
;;;672    char temp;
;;;673    temp=find(xy);
0006de  f7fffffe          BL       find
;;;674    
;;;675    //ptr_ram=&lcd_buffer[find(xy)];
;;;676    if(temp!=255)
0006e2  28ff              CMP      r0,#0xff
0006e4  d009              BEQ      |L1.1786|
;;;677    while (*adr)
;;;678    	{
;;;679    	lcd_buffer[temp+offset]=*adr++;
0006e6  4a10              LDR      r2,|L1.1832|
                  |L1.1768|
0006e8  7821              LDRB     r1,[r4,#0]            ;677
0006ea  2900              CMP      r1,#0                 ;677
0006ec  d005              BEQ      |L1.1786|
0006ee  1943              ADDS     r3,r0,r5
0006f0  1c64              ADDS     r4,r4,#1
;;;680    	temp++;
0006f2  1c40              ADDS     r0,r0,#1
0006f4  54d1              STRB     r1,[r2,r3]            ;679
0006f6  b2c0              UXTB     r0,r0
0006f8  e7f6              B        |L1.1768|
                  |L1.1786|
;;;681        	}
;;;682    }
0006fa  bd30              POP      {r4,r5,pc}
;;;683    
                          ENDP

                  show_mess PROC
;;;684    //-----------------------------------------------
;;;685    void show_mess(char* p1, char* p2, char* p3, char* p4,int m_sec)
0006fc  b510              PUSH     {r4,lr}
;;;686    {
;;;687    bgnd_par(p1,p2,p3,p4);
0006fe  9c02              LDR      r4,[sp,#8]
000700  f7fffffe          BL       bgnd_par
;;;688    tree_up(iSM,sub_ind,sub_ind1,sub_ind2);
000704  480a              LDR      r0,|L1.1840|
000706  78c3              LDRB     r3,[r0,#3]  ; a_ind
000708  7882              LDRB     r2,[r0,#2]  ; a_ind
00070a  7841              LDRB     r1,[r0,#1]  ; a_ind
00070c  2065              MOVS     r0,#0x65
00070e  f7fffffe          BL       tree_up
;;;689    ret((char)(m_sec/100));
000712  2064              MOVS     r0,#0x64
000714  fb94f0f0          SDIV     r0,r4,r0
000718  e8bd4010          POP      {r4,lr}
00071c  b2c0              UXTB     r0,r0
00071e  f7ffbffe          B.W      ||ret||
;;;690    }
;;;691    
                          ENDP

000722  0000              DCW      0x0000
                  |L1.1828|
                          DCD      ||dig||
                  |L1.1832|
                          DCD      lcd_buffer
                  |L1.1836|
                          DCD      ABCDEF
                  |L1.1840|
                          DCD      a_ind
                  |L1.1844|
                          DCD      ind_pointer
                  |L1.1848|
                          DCD      b_ind

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  int2lcd_m PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  b570              PUSH     {r4-r6,lr}
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
000002  460d              MOV      r5,r1
000004  4614              MOV      r4,r2
000006  2800              CMP      r0,#0
;;;699    else if(tempSI>=modul)tempSI-=modul;
000008  da02              BGE      |L2.16|
00000a  43c0              MVNS     r0,r0
00000c  1c40              ADDS     r0,r0,#1
;;;700    
;;;701    return (char)tempSI;
00000e  b200              SXTH     r0,r0
                  |L2.16|
;;;702    }
000010  f7fffffe          BL       bin2bcd_int
000014  1c60              ADDS     r0,r4,#1
000016  b2c0              UXTB     r0,r0
000018  f7fffffe          BL       bcd2lcd_zero
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       find
000022  28ff              CMP      r0,#0xff
000024  d019              BEQ      |L2.90|
000026  4a0e              LDR      r2,|L2.96|
000028  4b0e              LDR      r3,|L2.100|
00002a  2100              MOVS     r1,#0
                  |L2.44|
00002c  42a1              CMP      r1,r4
00002e  d201              BCS      |L2.52|
000030  5c55              LDRB     r5,[r2,r1]
000032  e013              B        |L2.92|
                  |L2.52|
000034  d104              BNE      |L2.64|
000036  f04f052e          MOV      r5,#0x2e
00003a  541d              STRB     r5,[r3,r0]
00003c  5c55              LDRB     r5,[r2,r1]
00003e  e003              B        |L2.72|
                  |L2.64|
000040  5c55              LDRB     r5,[r2,r1]
000042  2d20              CMP      r5,#0x20
000044  d003              BEQ      |L2.78|
000046  b14c              CBZ      r4,|L2.92|
                  |L2.72|
000048  181e              ADDS     r6,r3,r0
00004a  f8065c01          STRB     r5,[r6,#-1]
                  |L2.78|
00004e  1e40              SUBS     r0,r0,#1
000050  1c49              ADDS     r1,r1,#1
000052  b2c9              UXTB     r1,r1
000054  b2c0              UXTB     r0,r0
000056  2905              CMP      r1,#5
000058  d3e8              BCC      |L2.44|
                  |L2.90|
00005a  bd70              POP      {r4-r6,pc}
                  |L2.92|
00005c  541d              STRB     r5,[r3,r0]
00005e  e7f6              B        |L2.78|
;;;703    
                          ENDP

                  |L2.96|
                          DCD      ||dig||
                  |L2.100|
                          DCD      lcd_buffer

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  int2lcd_mm PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  b5f0              PUSH     {r4-r7,lr}
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
000002  460d              MOV      r5,r1
000004  4614              MOV      r4,r2
000006  2800              CMP      r0,#0
;;;699    else if(tempSI>=modul)tempSI-=modul;
000008  da01              BGE      |L3.14|
00000a  4240              RSBS     r0,r0,#0
00000c  b200              SXTH     r0,r0
                  |L3.14|
;;;700    
;;;701    return (char)tempSI;
00000e  f7fffffe          BL       bin2bcd_int
;;;702    }
000012  1c60              ADDS     r0,r4,#1
000014  b2c0              UXTB     r0,r0
000016  f7fffffe          BL       bcd2lcd_zero
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       find
000020  4a13              LDR      r2,|L3.112|
000022  4b14              LDR      r3,|L3.116|
000024  2100              MOVS     r1,#0
                  |L3.38|
000026  b964              CBNZ     r4,|L3.66|
000028  5c55              LDRB     r5,[r2,r1]
00002a  2d20              CMP      r5,#0x20
00002c  d009              BEQ      |L3.66|
00002e  1856              ADDS     r6,r2,r1
000030  7876              LDRB     r6,[r6,#1]
000032  2e20              CMP      r6,#0x20
000034  d103              BNE      |L3.62|
000036  262d              MOVS     r6,#0x2d
000038  181f              ADDS     r7,r3,r0
00003a  f8076c01          STRB     r6,[r7,#-1]
                  |L3.62|
00003e  541d              STRB     r5,[r3,r0]
000040  e00f              B        |L3.98|
                  |L3.66|
000042  42a1              CMP      r1,r4
000044  d201              BCS      |L3.74|
000046  5c55              LDRB     r5,[r2,r1]
000048  e7f9              B        |L3.62|
                  |L3.74|
00004a  d104              BNE      |L3.86|
00004c  f04f052e          MOV      r5,#0x2e
000050  541d              STRB     r5,[r3,r0]
000052  5c55              LDRB     r5,[r2,r1]
000054  e002              B        |L3.92|
                  |L3.86|
000056  5c55              LDRB     r5,[r2,r1]
000058  2d20              CMP      r5,#0x20
00005a  d002              BEQ      |L3.98|
                  |L3.92|
00005c  181e              ADDS     r6,r3,r0
00005e  f8065c01          STRB     r5,[r6,#-1]
                  |L3.98|
000062  1e40              SUBS     r0,r0,#1
000064  1c49              ADDS     r1,r1,#1
000066  b2c9              UXTB     r1,r1
000068  b2c0              UXTB     r0,r0
00006a  2905              CMP      r1,#5
00006c  d3db              BCC      |L3.38|
00006e  bdf0              POP      {r4-r7,pc}
;;;703    
                          ENDP

                  |L3.112|
                          DCD      ||dig||
                  |L3.116|
                          DCD      lcd_buffer

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  event2ind PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  4770              BX       lr
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
;;;699    else if(tempSI>=modul)tempSI-=modul;
;;;700    
;;;701    return (char)tempSI;
;;;702    }
;;;703    
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  char2lcdh PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  b510              PUSH     {r4,lr}
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
000002  4604              MOV      r4,r0
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       find
;;;699    else if(tempSI>=modul)tempSI-=modul;
00000a  4906              LDR      r1,|L5.36|
00000c  f004020f          AND      r2,r4,#0xf
;;;700    
;;;701    return (char)tempSI;
;;;702    }
000010  5c8b              LDRB     r3,[r1,r2]
000012  4a05              LDR      r2,|L5.40|
000014  eb011114          ADD      r1,r1,r4,LSR #4
000018  5413              STRB     r3,[r2,r0]
00001a  1e40              SUBS     r0,r0,#1
00001c  b2c0              UXTB     r0,r0
00001e  7809              LDRB     r1,[r1,#0]
000020  5411              STRB     r1,[r2,r0]
000022  bd10              POP      {r4,pc}
;;;703    
                          ENDP

                  |L5.36|
                          DCD      ABCDEF
                  |L5.40|
                          DCD      lcd_buffer

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  int2lcdhyx PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  eb010181          ADD      r1,r1,r1,LSL #2
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
000004  eb020181          ADD      r1,r2,r1,LSL #2
;;;699    else if(tempSI>=modul)tempSI-=modul;
000008  b2cb              UXTB     r3,r1
00000a  490d              LDR      r1,|L6.64|
00000c  b510              PUSH     {r4,lr}
;;;700    
;;;701    return (char)tempSI;
00000e  f000020f          AND      r2,r0,#0xf
;;;702    }
000012  5c8c              LDRB     r4,[r1,r2]
000014  4a0b              LDR      r2,|L6.68|
000016  54d4              STRB     r4,[r2,r3]
000018  0904              LSRS     r4,r0,#4
00001a  1e5b              SUBS     r3,r3,#1
00001c  f004000f          AND      r0,r4,#0xf
000020  b2db              UXTB     r3,r3
000022  5c08              LDRB     r0,[r1,r0]
000024  54d0              STRB     r0,[r2,r3]
000026  1e5b              SUBS     r3,r3,#1
000028  b2d8              UXTB     r0,r3
00002a  0923              LSRS     r3,r4,#4
00002c  f003040f          AND      r4,r3,#0xf
000030  5d0c              LDRB     r4,[r1,r4]
000032  5414              STRB     r4,[r2,r0]
000034  1e40              SUBS     r0,r0,#1
000036  091b              LSRS     r3,r3,#4
000038  b2c0              UXTB     r0,r0
00003a  5cc9              LDRB     r1,[r1,r3]
00003c  5411              STRB     r1,[r2,r0]
00003e  bd10              POP      {r4,pc}
;;;703    
                          ENDP

                  |L6.64|
                          DCD      ABCDEF
                  |L6.68|
                          DCD      lcd_buffer

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.text||
                  ptr_carry PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  1880              ADDS     r0,r0,r2
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
000002  d501              BPL      |L7.8|
000004  4408              ADD      r0,r0,r1
000006  e002              B        |L7.14|
                  |L7.8|
;;;699    else if(tempSI>=modul)tempSI-=modul;
000008  4288              CMP      r0,r1
00000a  db00              BLT      |L7.14|
00000c  1a40              SUBS     r0,r0,r1
                  |L7.14|
;;;700    
;;;701    return (char)tempSI;
00000e  b2c0              UXTB     r0,r0
;;;702    }
000010  4770              BX       lr
;;;703    
                          ENDP


                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  event_data2ind PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
000004  460d              MOV      r5,r1
000006  0144              LSLS     r4,r0,#5
;;;699    else if(tempSI>=modul)tempSI-=modul;
000008  a902              ADD      r1,sp,#8
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       lc640_read_long_ptr
;;;700    
;;;701    return (char)tempSI;
;;;702    }
000010  4669              MOV      r1,sp
000012  f1040008          ADD      r0,r4,#8
000016  f7fffffe          BL       lc640_read_long_ptr
00001a  a901              ADD      r1,sp,#4
00001c  f104000c          ADD      r0,r4,#0xc
000020  f7fffffe          BL       lc640_read_long_ptr
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       find
00002a  4c32              LDR      r4,|L8.244|
00002c  2520              MOVS     r5,#0x20
00002e  f04f0930          MOV      r9,#0x30
000032  5425              STRB     r5,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b2c0              UXTB     r0,r0
000038  2621              MOVS     r6,#0x21
00003a  f8049000          STRB     r9,[r4,r0]
00003e  1c40              ADDS     r0,r0,#1
000040  b2c0              UXTB     r0,r0
000042  f04f0840          MOV      r8,#0x40
000046  5426              STRB     r6,[r4,r0]
000048  1c40              ADDS     r0,r0,#1
00004a  b2c0              UXTB     r0,r0
00004c  4649              MOV      r1,r9
00004e  f8048000          STRB     r8,[r4,r0]
000052  1c40              ADDS     r0,r0,#1
000054  b2c0              UXTB     r0,r0
000056  2200              MOVS     r2,#0
000058  5425              STRB     r5,[r4,r0]
00005a  1c40              ADDS     r0,r0,#1
00005c  b2c0              UXTB     r0,r0
00005e  5425              STRB     r5,[r4,r0]
000060  1c40              ADDS     r0,r0,#1
000062  b2c0              UXTB     r0,r0
000064  5421              STRB     r1,[r4,r0]
000066  1c40              ADDS     r0,r0,#1
000068  b2c0              UXTB     r0,r0
00006a  2123              MOVS     r1,#0x23
00006c  5421              STRB     r1,[r4,r0]
00006e  1c40              ADDS     r0,r0,#1
000070  b2c7              UXTB     r7,r0
000072  f89d0002          LDRB     r0,[sp,#2]
000076  2121              MOVS     r1,#0x21
000078  f7fffffe          BL       int2lcd
00007c  f89d0000          LDRB     r0,[sp,#0]
000080  2200              MOVS     r2,#0
000082  2123              MOVS     r1,#0x23
000084  f7fffffe          BL       int2lcd
000088  f89d0001          LDRB     r0,[sp,#1]
00008c  1e40              SUBS     r0,r0,#1
00008e  280c              CMP      r0,#0xc
000090  d302              BCC      |L8.152|
000092  2001              MOVS     r0,#1
000094  f88d0001          STRB     r0,[sp,#1]
                  |L8.152|
000098  f89d0001          LDRB     r0,[sp,#1]
00009c  4916              LDR      r1,|L8.248|
00009e  2200              MOVS     r2,#0
0000a0  eb010080          ADD      r0,r1,r0,LSL #2
0000a4  2140              MOVS     r1,#0x40
0000a6  f7fffffe          BL       sub_bgnd
0000aa  55e5              STRB     r5,[r4,r7]
0000ac  1c7f              ADDS     r7,r7,#1
0000ae  b2f8              UXTB     r0,r7
0000b0  223a              MOVS     r2,#0x3a
0000b2  f8049000          STRB     r9,[r4,r0]
0000b6  1c40              ADDS     r0,r0,#1
0000b8  b2c0              UXTB     r0,r0
0000ba  2121              MOVS     r1,#0x21
0000bc  5426              STRB     r6,[r4,r0]
0000be  1c40              ADDS     r0,r0,#1
0000c0  b2c0              UXTB     r0,r0
0000c2  5422              STRB     r2,[r4,r0]
0000c4  1c40              ADDS     r0,r0,#1
0000c6  b2c0              UXTB     r0,r0
0000c8  2200              MOVS     r2,#0
0000ca  f8049000          STRB     r9,[r4,r0]
0000ce  1c40              ADDS     r0,r0,#1
0000d0  b2c0              UXTB     r0,r0
0000d2  f8048000          STRB     r8,[r4,r0]
0000d6  1c40              ADDS     r0,r0,#1
0000d8  b2c6              UXTB     r6,r0
0000da  f89d0004          LDRB     r0,[sp,#4]
0000de  f7fffffe          BL       int2lcd
0000e2  f89d0005          LDRB     r0,[sp,#5]
0000e6  2200              MOVS     r2,#0
0000e8  2140              MOVS     r1,#0x40
0000ea  f7fffffe          BL       int2lcd
0000ee  55a5              STRB     r5,[r4,r6]
0000f0  e8bd83fe          POP      {r1-r9,pc}
;;;703    
                          ENDP

                  |L8.244|
                          DCD      lcd_buffer
                  |L8.248|
                          DCD      sm_mont

;*** Start embedded assembler ***

#line 1 "common_func.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_common_func_c_abs____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_common_func_c_abs____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_common_func_c_abs____REVSH|
#line 130
|__asm___13_common_func_c_abs____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
