; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\common_func.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\common_func.d --feedback=.\EXE\UKU2071x_GALV_IBv2.fed --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 --omf_browse=.\EXE\common_func.crf common_func.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  abs PROC
;;;11     //-----------------------------------------------
;;;12     signed short abs(signed short in)
000000  2800              CMP      r0,#0
;;;13     {
;;;14     if(in<0)in=-in;
000002  da01              BGE      |L1.8|
000004  4240              RSBS     r0,r0,#0
000006  b200              SXTH     r0,r0
                  |L1.8|
;;;15     return in;
;;;16     }
000008  4770              BX       lr
;;;17     
                          ENDP


                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  clr_scrn PROC
;;;11     //-----------------------------------------------
;;;12     signed short abs(signed short in)
000000  2000              MOVS     r0,#0
;;;13     {
;;;14     if(in<0)in=-in;
000002  4afb              LDR      r2,|L2.1008|
000004  2120              MOVS     r1,#0x20
                  |L2.6|
000006  5411              STRB     r1,[r2,r0]
;;;15     return in;
;;;16     }
000008  1c40              ADDS     r0,r0,#1
00000a  b2c0              UXTB     r0,r0
00000c  28c8              CMP      r0,#0xc8
00000e  d3fa              BCC      |L2.6|
000010  4770              BX       lr
;;;17     
                          ENDP

                  find PROC
;;;28     //-----------------------------------------------
;;;29     char find(char xy)
000012  4601              MOV      r1,r0
;;;30     {
;;;31     char i=0;
;;;32     do i++;
;;;33     while ((lcd_buffer[i]!=xy)&&(i<LCD_SIZE));
000014  4af6              LDR      r2,|L2.1008|
000016  2000              MOVS     r0,#0                 ;31
                  |L2.24|
000018  1c40              ADDS     r0,r0,#1              ;32
00001a  b2c0              UXTB     r0,r0                 ;32
00001c  5c13              LDRB     r3,[r2,r0]
00001e  428b              CMP      r3,r1
000020  d001              BEQ      |L2.38|
000022  28c8              CMP      r0,#0xc8
000024  d3f8              BCC      |L2.24|
                  |L2.38|
;;;34     //if(i==(LCD_SIZE)) i++;
;;;35     return i;
;;;36     }
000026  4770              BX       lr
;;;37     
                          ENDP

                  bin2bcd_int PROC
;;;39     //-----------------------------------------------
;;;40     void bin2bcd_int(unsigned int in)
000028  b510              PUSH     {r4,lr}
;;;41     {
;;;42     
;;;43     char i=5;
;;;44     for(i=0;i<5;i++)
00002a  2100              MOVS     r1,#0
;;;45     	{
;;;46     	dig[i]=in%10;
00002c  4cf1              LDR      r4,|L2.1012|
00002e  220a              MOVS     r2,#0xa
                  |L2.48|
000030  fbb0f3f2          UDIV     r3,r0,r2
000034  fb020013          MLS      r0,r2,r3,r0
000038  5460              STRB     r0,[r4,r1]
00003a  1c49              ADDS     r1,r1,#1              ;44
00003c  b2c9              UXTB     r1,r1                 ;44
00003e  4618              MOV      r0,r3
000040  2905              CMP      r1,#5                 ;44
000042  d3f5              BCC      |L2.48|
;;;47     	in/=10;
;;;48     	}   
;;;49     }
000044  bd10              POP      {r4,pc}
;;;50     //-----------------------------------------------
                          ENDP

                  bcd2lcd_zero PROC
;;;51     void bcd2lcd_zero(char sig)
000046  b5f0              PUSH     {r4-r7,lr}
;;;52     {
;;;53     char i;
;;;54     zero_on=1;
000048  4beb              LDR      r3,|L2.1016|
00004a  2101              MOVS     r1,#1
;;;55     for (i=5;i>0;i--)
;;;56     	{
;;;57     	if(zero_on&&(!dig[i-1])&&(i>sig))
;;;58     		{
;;;59     		dig[i-1]=0x20;
00004c  2720              MOVS     r7,#0x20
00004e  7019              STRB     r1,[r3,#0]            ;54
000050  2105              MOVS     r1,#5                 ;55
000052  4ae8              LDR      r2,|L2.1012|
000054  2600              MOVS     r6,#0                 ;54
000056  e001              B        |L2.92|
                  |L2.88|
000058  781c              LDRB     r4,[r3,#0]            ;57  ; zero_on
00005a  b144              CBZ      r4,|L2.110|
                  |L2.92|
00005c  1854              ADDS     r4,r2,r1              ;57
00005e  f8145c01          LDRB     r5,[r4,#-1]           ;57
000062  b925              CBNZ     r5,|L2.110|
000064  4281              CMP      r1,r0                 ;57
000066  d902              BLS      |L2.110|
000068  f8047c01          STRB     r7,[r4,#-1]
00006c  e005              B        |L2.122|
                  |L2.110|
;;;60     		}
;;;61     	else
;;;62     		{
;;;63     		dig[i-1]=dig[i-1]+0x30;
00006e  1854              ADDS     r4,r2,r1
000070  f8145d01          LDRB     r5,[r4,#-1]!
000074  3530              ADDS     r5,r5,#0x30
000076  7025              STRB     r5,[r4,#0]
;;;64     		zero_on=0;
000078  701e              STRB     r6,[r3,#0]
                  |L2.122|
00007a  1e49              SUBS     r1,r1,#1              ;55
00007c  f01101ff          ANDS     r1,r1,#0xff           ;55
000080  d1ea              BNE      |L2.88|
;;;65     		}	
;;;66     	}
;;;67     }             
000082  bdf0              POP      {r4-r7,pc}
;;;68     
                          ENDP

                  int2lcd_mmm PROC
;;;151    //-----------------------------------------------
;;;152    void int2lcd_mmm(signed short in,char xy,char des)
000084  b5fe              PUSH     {r1-r7,lr}
;;;153    {
;;;154    signed char i;
;;;155    char n;
;;;156    char s[10];
;;;157    char minus='+';
000086  232b              MOVS     r3,#0x2b
;;;158    char zero_on;
;;;159    char simb_num;
;;;160    
;;;161    if(in<0)
000088  2800              CMP      r0,#0
00008a  da02              BGE      |L2.146|
;;;162    	{
;;;163    	in=-in;
00008c  4240              RSBS     r0,r0,#0
00008e  b200              SXTH     r0,r0
;;;164    	minus='-';
000090  232d              MOVS     r3,#0x2d
                  |L2.146|
;;;165    	}
;;;166    
;;;167    for(i=0;i<10;i++)
000092  2500              MOVS     r5,#0
;;;168    	{
;;;169    	s[i]=in%10;
000094  260a              MOVS     r6,#0xa
000096  466c              MOV      r4,sp                 ;156
                  |L2.152|
000098  fb90f7f6          SDIV     r7,r0,r6
00009c  fb060017          MLS      r0,r6,r7,r0
0000a0  5560              STRB     r0,[r4,r5]
0000a2  1c6d              ADDS     r5,r5,#1              ;167
0000a4  b26d              SXTB     r5,r5                 ;167
;;;170    	in/=10;
0000a6  b238              SXTH     r0,r7
0000a8  2d0a              CMP      r5,#0xa               ;167
0000aa  dbf5              BLT      |L2.152|
;;;171    	}   
;;;172    
;;;173    zero_on=1;
0000ac  2601              MOVS     r6,#1
;;;174    simb_num=0;
0000ae  2500              MOVS     r5,#0
;;;175    
;;;176    for (i=9;i>=0;i--)
0000b0  2009              MOVS     r0,#9
;;;177    	{
;;;178    	if(zero_on&&(!s[i])&&(i>(des)))
;;;179    	     {
;;;180    	     s[i]=0x20;
0000b2  2720              MOVS     r7,#0x20
0000b4  e000              B        |L2.184|
                  |L2.182|
0000b6  b146              CBZ      r6,|L2.202|
                  |L2.184|
0000b8  f814c000          LDRB     r12,[r4,r0]           ;178
0000bc  f1bc0f00          CMP      r12,#0                ;178
0000c0  d103              BNE      |L2.202|
0000c2  4290              CMP      r0,r2                 ;178
0000c4  dd01              BLE      |L2.202|
0000c6  5427              STRB     r7,[r4,r0]
0000c8  e005              B        |L2.214|
                  |L2.202|
;;;181    	     }
;;;182    	else 
;;;183    	     {
;;;184    	     s[i]=s[i]+0x30;
0000ca  5c26              LDRB     r6,[r4,r0]
0000cc  3630              ADDS     r6,r6,#0x30
0000ce  5426              STRB     r6,[r4,r0]
;;;185    	     zero_on=0;
0000d0  2600              MOVS     r6,#0
;;;186    	     simb_num++;
0000d2  1c6d              ADDS     r5,r5,#1
0000d4  b2ed              UXTB     r5,r5
                  |L2.214|
0000d6  1e40              SUBS     r0,r0,#1              ;176
0000d8  b240              SXTB     r0,r0                 ;176
0000da  2800              CMP      r0,#0                 ;176
0000dc  daeb              BGE      |L2.182|
;;;187    	     }
;;;188    	 }
;;;189    	          
;;;190    if(minus=='-')	
0000de  2b2d              CMP      r3,#0x2d
0000e0  d102              BNE      |L2.232|
;;;191         {
;;;192         s[simb_num++]=minus; 
0000e2  5563              STRB     r3,[r4,r5]
0000e4  1c6d              ADDS     r5,r5,#1
0000e6  b2ed              UXTB     r5,r5
                  |L2.232|
;;;193         }    
;;;194    if(des)
0000e8  b16a              CBZ      r2,|L2.262|
;;;195         {
;;;196         for(i=simb_num;i>des;i--)
0000ea  b268              SXTB     r0,r5
0000ec  e005              B        |L2.250|
                  |L2.238|
;;;197              {
;;;198              s[i]=s[i-1];
0000ee  1823              ADDS     r3,r4,r0
0000f0  f8133c01          LDRB     r3,[r3,#-1]
0000f4  5423              STRB     r3,[r4,r0]
0000f6  1e40              SUBS     r0,r0,#1              ;196
0000f8  b240              SXTB     r0,r0                 ;196
                  |L2.250|
0000fa  4290              CMP      r0,r2                 ;196
0000fc  dcf7              BGT      |L2.238|
;;;199              }
;;;200         s[des]='.';
0000fe  202e              MOVS     r0,#0x2e
;;;201         simb_num++;     
000100  1c6d              ADDS     r5,r5,#1
000102  54a0              STRB     r0,[r4,r2]            ;200
000104  b2ed              UXTB     r5,r5
                  |L2.262|
;;;202         }
;;;203    	
;;;204    n=find(xy);
000106  4608              MOV      r0,r1
000108  f7fffffe          BL       find
;;;205    for (i=0;i<simb_num;i++)
00010c  2100              MOVS     r1,#0
;;;206    	{
;;;207         lcd_buffer[n-i]=s[i];
00010e  4ab8              LDR      r2,|L2.1008|
000110  e004              B        |L2.284|
                  |L2.274|
000112  5c63              LDRB     r3,[r4,r1]
000114  1a46              SUBS     r6,r0,r1
000116  1c49              ADDS     r1,r1,#1              ;205
000118  5593              STRB     r3,[r2,r6]
00011a  b249              SXTB     r1,r1                 ;205
                  |L2.284|
00011c  42a9              CMP      r1,r5                 ;205
00011e  dbf8              BLT      |L2.274|
;;;208    	}
;;;209    }
000120  bdfe              POP      {r1-r7,pc}
;;;210    
                          ENDP

                  long2lcd_mmm PROC
;;;211    //-----------------------------------------------
;;;212    void long2lcd_mmm(signed long in,char xy,char des)
000122  b5fe              PUSH     {r1-r7,lr}
;;;213    {
;;;214    signed char i;
;;;215    char n;
;;;216    char s[10];
;;;217    char minus='+';
000124  232b              MOVS     r3,#0x2b
;;;218    char zero_on;
;;;219    char simb_num;
;;;220    
;;;221    if(in<0)
000126  2800              CMP      r0,#0
000128  da01              BGE      |L2.302|
;;;222    	{
;;;223    	in=-in;
00012a  4240              RSBS     r0,r0,#0
;;;224    	minus='-';
00012c  232d              MOVS     r3,#0x2d
                  |L2.302|
;;;225    	}
;;;226    
;;;227    for(i=0;i<10;i++)
00012e  2500              MOVS     r5,#0
;;;228    	{
;;;229    	s[i]=in%10;
000130  260a              MOVS     r6,#0xa
000132  466c              MOV      r4,sp                 ;216
                  |L2.308|
000134  4607              MOV      r7,r0
000136  fb90f0f6          SDIV     r0,r0,r6
00013a  fb067710          MLS      r7,r6,r0,r7
00013e  5567              STRB     r7,[r4,r5]
000140  1c6d              ADDS     r5,r5,#1              ;227
000142  b26d              SXTB     r5,r5                 ;227
000144  2d0a              CMP      r5,#0xa               ;227
000146  dbf5              BLT      |L2.308|
;;;230    	in/=10;
;;;231    	}   
;;;232    
;;;233    zero_on=1;
000148  2601              MOVS     r6,#1
;;;234    simb_num=0;
00014a  2500              MOVS     r5,#0
;;;235    
;;;236    for (i=9;i>=0;i--)
00014c  2009              MOVS     r0,#9
;;;237    	{
;;;238    	if(zero_on&&(!s[i])&&(i>(des)))
;;;239    	     {
;;;240    	     s[i]=0x20;
00014e  2720              MOVS     r7,#0x20
000150  e000              B        |L2.340|
                  |L2.338|
000152  b146              CBZ      r6,|L2.358|
                  |L2.340|
000154  f814c000          LDRB     r12,[r4,r0]           ;238
000158  f1bc0f00          CMP      r12,#0                ;238
00015c  d103              BNE      |L2.358|
00015e  4290              CMP      r0,r2                 ;238
000160  dd01              BLE      |L2.358|
000162  5427              STRB     r7,[r4,r0]
000164  e005              B        |L2.370|
                  |L2.358|
;;;241    	     }
;;;242    	else 
;;;243    	     {
;;;244    	     s[i]=s[i]+0x30;
000166  5c26              LDRB     r6,[r4,r0]
000168  3630              ADDS     r6,r6,#0x30
00016a  5426              STRB     r6,[r4,r0]
;;;245    	     zero_on=0;
00016c  2600              MOVS     r6,#0
;;;246    	     simb_num++;
00016e  1c6d              ADDS     r5,r5,#1
000170  b2ed              UXTB     r5,r5
                  |L2.370|
000172  1e40              SUBS     r0,r0,#1              ;236
000174  b240              SXTB     r0,r0                 ;236
000176  2800              CMP      r0,#0                 ;236
000178  daeb              BGE      |L2.338|
;;;247    	     }
;;;248    	 }
;;;249    	          
;;;250    if(minus=='-')	
00017a  2b2d              CMP      r3,#0x2d
00017c  d102              BNE      |L2.388|
;;;251         {
;;;252         s[simb_num++]=minus; 
00017e  5563              STRB     r3,[r4,r5]
000180  1c6d              ADDS     r5,r5,#1
000182  b2ed              UXTB     r5,r5
                  |L2.388|
;;;253         }    
;;;254    if(des)
000184  b16a              CBZ      r2,|L2.418|
;;;255         {
;;;256         for(i=simb_num;i>des;i--)
000186  b268              SXTB     r0,r5
000188  e005              B        |L2.406|
                  |L2.394|
;;;257              {
;;;258              s[i]=s[i-1];
00018a  1823              ADDS     r3,r4,r0
00018c  f8133c01          LDRB     r3,[r3,#-1]
000190  5423              STRB     r3,[r4,r0]
000192  1e40              SUBS     r0,r0,#1              ;256
000194  b240              SXTB     r0,r0                 ;256
                  |L2.406|
000196  4290              CMP      r0,r2                 ;256
000198  dcf7              BGT      |L2.394|
;;;259              }
;;;260         s[des]='.';
00019a  202e              MOVS     r0,#0x2e
;;;261         simb_num++;     
00019c  1c6d              ADDS     r5,r5,#1
00019e  54a0              STRB     r0,[r4,r2]            ;260
0001a0  b2ed              UXTB     r5,r5
                  |L2.418|
;;;262         }
;;;263    	
;;;264    n=find(xy);
0001a2  4608              MOV      r0,r1
0001a4  f7fffffe          BL       find
;;;265    for (i=0;i<simb_num;i++)
0001a8  2100              MOVS     r1,#0
;;;266    	{
;;;267         lcd_buffer[n-i]=s[i];
0001aa  4a91              LDR      r2,|L2.1008|
0001ac  e004              B        |L2.440|
                  |L2.430|
0001ae  5c63              LDRB     r3,[r4,r1]
0001b0  1a46              SUBS     r6,r0,r1
0001b2  1c49              ADDS     r1,r1,#1              ;265
0001b4  5593              STRB     r3,[r2,r6]
0001b6  b249              SXTB     r1,r1                 ;265
                  |L2.440|
0001b8  42a9              CMP      r1,r5                 ;265
0001ba  dbf8              BLT      |L2.430|
;;;268    	}
;;;269    }
0001bc  bdfe              POP      {r1-r7,pc}
;;;270    
                          ENDP

                  long2lcdyx_mmm PROC
;;;271    //-----------------------------------------------
;;;272    void long2lcdyx_mmm(signed long in,char y,char x,char des)
0001be  b5fe              PUSH     {r1-r7,lr}
;;;273    {
;;;274    signed char i;
;;;275    char n;
;;;276    char s[10];
;;;277    char minus='+';
0001c0  262b              MOVS     r6,#0x2b
;;;278    char zero_on;
;;;279    char simb_num;
;;;280    
;;;281    if(in<0)
0001c2  2800              CMP      r0,#0
0001c4  da01              BGE      |L2.458|
;;;282    	{
;;;283    	in=-in;
0001c6  4240              RSBS     r0,r0,#0
;;;284    	minus='-';
0001c8  262d              MOVS     r6,#0x2d
                  |L2.458|
;;;285    	}
;;;286    
;;;287    for(i=0;i<10;i++)
0001ca  2400              MOVS     r4,#0
;;;288    	{
;;;289    	s[i]=in%10;
0001cc  270a              MOVS     r7,#0xa
0001ce  466d              MOV      r5,sp                 ;276
                  |L2.464|
0001d0  4684              MOV      r12,r0
0001d2  fb90f0f7          SDIV     r0,r0,r7
0001d6  fb07cc10          MLS      r12,r7,r0,r12
0001da  f805c004          STRB     r12,[r5,r4]
0001de  1c64              ADDS     r4,r4,#1              ;287
0001e0  b264              SXTB     r4,r4                 ;287
0001e2  2c0a              CMP      r4,#0xa               ;287
0001e4  dbf4              BLT      |L2.464|
;;;290    	in/=10;
;;;291    	}   
;;;292    
;;;293    zero_on=1;
0001e6  2701              MOVS     r7,#1
;;;294    simb_num=0;
0001e8  2000              MOVS     r0,#0
;;;295    
;;;296    for (i=9;i>=0;i--)
0001ea  2409              MOVS     r4,#9
;;;297    	{
;;;298    	if(zero_on&&(!s[i])&&(i>(des)))
;;;299    	     {
;;;300    	     s[i]=0x20;
0001ec  f04f0c20          MOV      r12,#0x20
0001f0  e000              B        |L2.500|
                  |L2.498|
0001f2  b14f              CBZ      r7,|L2.520|
                  |L2.500|
0001f4  f815e004          LDRB     lr,[r5,r4]            ;298
0001f8  f1be0f00          CMP      lr,#0                 ;298
0001fc  d104              BNE      |L2.520|
0001fe  429c              CMP      r4,r3                 ;298
000200  dd02              BLE      |L2.520|
000202  f805c004          STRB     r12,[r5,r4]
000206  e005              B        |L2.532|
                  |L2.520|
;;;301    	     }
;;;302    	else 
;;;303    	     {
;;;304    	     s[i]=s[i]+0x30;
000208  5d2f              LDRB     r7,[r5,r4]
00020a  3730              ADDS     r7,r7,#0x30
00020c  552f              STRB     r7,[r5,r4]
;;;305    	     zero_on=0;
00020e  2700              MOVS     r7,#0
;;;306    	     simb_num++;
000210  1c40              ADDS     r0,r0,#1
000212  b2c0              UXTB     r0,r0
                  |L2.532|
000214  1e64              SUBS     r4,r4,#1              ;296
000216  b264              SXTB     r4,r4                 ;296
000218  2c00              CMP      r4,#0                 ;296
00021a  daea              BGE      |L2.498|
;;;307    	     }
;;;308    	 }
;;;309    	          
;;;310    if(minus=='-')	
00021c  2e2d              CMP      r6,#0x2d
00021e  d102              BNE      |L2.550|
;;;311         {
;;;312         s[simb_num++]=minus; 
000220  542e              STRB     r6,[r5,r0]
000222  1c40              ADDS     r0,r0,#1
000224  b2c0              UXTB     r0,r0
                  |L2.550|
;;;313         }    
;;;314    if(des)
000226  b16b              CBZ      r3,|L2.580|
;;;315         {
;;;316         for(i=simb_num;i>des;i--)
000228  b244              SXTB     r4,r0
00022a  e005              B        |L2.568|
                  |L2.556|
;;;317              {
;;;318              s[i]=s[i-1];
00022c  192e              ADDS     r6,r5,r4
00022e  f8166c01          LDRB     r6,[r6,#-1]
000232  552e              STRB     r6,[r5,r4]
000234  1e64              SUBS     r4,r4,#1              ;316
000236  b264              SXTB     r4,r4                 ;316
                  |L2.568|
000238  429c              CMP      r4,r3                 ;316
00023a  dcf7              BGT      |L2.556|
;;;319              }
;;;320         s[des]='.';
00023c  242e              MOVS     r4,#0x2e
;;;321         simb_num++;     
00023e  1c40              ADDS     r0,r0,#1
000240  54ec              STRB     r4,[r5,r3]            ;320
000242  b2c0              UXTB     r0,r0
                  |L2.580|
;;;322         }
;;;323    	
;;;324    n=(20*y)+x;
000244  eb010181          ADD      r1,r1,r1,LSL #2
000248  eb020181          ADD      r1,r2,r1,LSL #2
00024c  b2ca              UXTB     r2,r1
;;;325    for (i=0;i<simb_num;i++)
00024e  2100              MOVS     r1,#0
;;;326    	{
;;;327         lcd_buffer[n-i]=s[i];
000250  4b67              LDR      r3,|L2.1008|
000252  e004              B        |L2.606|
                  |L2.596|
000254  5c6c              LDRB     r4,[r5,r1]
000256  1a56              SUBS     r6,r2,r1
000258  1c49              ADDS     r1,r1,#1              ;325
00025a  559c              STRB     r4,[r3,r6]
00025c  b249              SXTB     r1,r1                 ;325
                  |L2.606|
00025e  4281              CMP      r1,r0                 ;325
000260  dbf8              BLT      |L2.596|
;;;328    	}
;;;329    
;;;330    
;;;331    
;;;332    }
000262  bdfe              POP      {r1-r7,pc}
;;;333    
                          ENDP

                  int2lcdyx PROC
;;;334    //-----------------------------------------------
;;;335    void int2lcdyx(unsigned short in,char y,char x,char des)
000264  b570              PUSH     {r4-r6,lr}
;;;336    {
000266  460d              MOV      r5,r1
000268  4616              MOV      r6,r2
00026a  461c              MOV      r4,r3
;;;337    char i;
;;;338    char n;
;;;339    bin2bcd_int(in);
00026c  f7fffffe          BL       bin2bcd_int
;;;340    bcd2lcd_zero(des+1);
000270  1c60              ADDS     r0,r4,#1
000272  b2c0              UXTB     r0,r0
000274  f7fffffe          BL       bcd2lcd_zero
;;;341    i=(y*20)+x;
000278  eb050085          ADD      r0,r5,r5,LSL #2
00027c  eb060080          ADD      r0,r6,r0,LSL #2
000280  b2c1              UXTB     r1,r0
;;;342    for (n=0;n<5;n++)
;;;343    	{ 
;;;344    	if(n<des)
;;;345    		{
;;;346    		lcd_buffer[i]=dig[n];
000282  4a5c              LDR      r2,|L2.1012|
000284  4b5a              LDR      r3,|L2.1008|
000286  2000              MOVS     r0,#0                 ;342
                  |L2.648|
000288  42a0              CMP      r0,r4                 ;344
00028a  d201              BCS      |L2.656|
00028c  5c15              LDRB     r5,[r2,r0]
00028e  545d              STRB     r5,[r3,r1]
                  |L2.656|
;;;347    		}   
;;;348    	if((n>=des)&&(dig[n]!=0x20))
000290  d306              BCC      |L2.672|
000292  5c15              LDRB     r5,[r2,r0]
000294  2d20              CMP      r5,#0x20
000296  d003              BEQ      |L2.672|
;;;349    		{
;;;350    		if(!des)lcd_buffer[i]=dig[n];	
000298  b14c              CBZ      r4,|L2.686|
;;;351    		else lcd_buffer[i-1]=dig[n];
00029a  185e              ADDS     r6,r3,r1
00029c  f8065c01          STRB     r5,[r6,#-1]
                  |L2.672|
;;;352       		}   
;;;353    	i--;	
0002a0  1e49              SUBS     r1,r1,#1
0002a2  1c40              ADDS     r0,r0,#1              ;342
0002a4  b2c0              UXTB     r0,r0                 ;342
0002a6  b2c9              UXTB     r1,r1
0002a8  2805              CMP      r0,#5                 ;342
0002aa  d3ed              BCC      |L2.648|
;;;354    	}
;;;355    }
0002ac  bd70              POP      {r4-r6,pc}
                  |L2.686|
0002ae  545d              STRB     r5,[r3,r1]            ;350
0002b0  e7f6              B        |L2.672|
;;;356    
                          ENDP

                  community2lcd PROC
;;;364    //-----------------------------------------------
;;;365    void community2lcd(char* in,
0002b2  b570              PUSH     {r4-r6,lr}
;;;366    			char xy,
;;;367    			char flash_pos,
;;;368    			char flash_on)
;;;369    {
0002b4  4604              MOV      r4,r0
0002b6  4608              MOV      r0,r1
0002b8  4615              MOV      r5,r2
0002ba  461e              MOV      r6,r3
;;;370    char temp;
;;;371    char i;
;;;372    //char n;
;;;373    
;;;374    
;;;375    i=find(xy);
0002bc  f7fffffe          BL       find
;;;376    
;;;377    //in1=192;
;;;378    
;;;379    //in2=34;
;;;380    
;;;381    
;;;382    
;;;383    temp=i;
;;;384    
;;;385    //ptr_ram=&lcd_buffer[find(xy)];
;;;386    if(temp!=255)
;;;387    while (*in)
;;;388    	{
;;;389    	lcd_buffer[temp]=*in++;
0002c0  4b4b              LDR      r3,|L2.1008|
0002c2  4601              MOV      r1,r0                 ;375
0002c4  28ff              CMP      r0,#0xff              ;386
0002c6  d104              BNE      |L2.722|
0002c8  e006              B        |L2.728|
                  |L2.714|
0002ca  541a              STRB     r2,[r3,r0]
0002cc  1c64              ADDS     r4,r4,#1
;;;390    	temp++;
0002ce  1c40              ADDS     r0,r0,#1
0002d0  b2c0              UXTB     r0,r0
                  |L2.722|
0002d2  7822              LDRB     r2,[r4,#0]            ;387
0002d4  2a00              CMP      r2,#0                 ;387
0002d6  d1f8              BNE      |L2.714|
                  |L2.728|
;;;391        	}
;;;392    
;;;393    
;;;394    
;;;395    if((bFL2)&&(flash_on))
0002d8  4848              LDR      r0,|L2.1020|
0002da  7800              LDRB     r0,[r0,#0]  ; bFL2
0002dc  2800              CMP      r0,#0
0002de  d004              BEQ      |L2.746|
0002e0  2e00              CMP      r6,#0
0002e2  d002              BEQ      |L2.746|
;;;396    	{
;;;397    	lcd_buffer[i+flash_pos]=95;
0002e4  4429              ADD      r1,r1,r5
0002e6  205f              MOVS     r0,#0x5f
0002e8  5458              STRB     r0,[r3,r1]
                  |L2.746|
;;;398    	}
;;;399    
;;;400    }
0002ea  bd70              POP      {r4-r6,pc}
;;;401    
                          ENDP

                  ip2lcd PROC
;;;402    //-----------------------------------------------
;;;403    void ip2lcd(	short in1,
0002ec  e92d4fff          PUSH     {r0-r11,lr}
;;;404    			short in2,
;;;405    			short in3,
;;;406    			short in4,
;;;407    			char xy,
;;;408    			char flash_pos)
;;;409    {
0002f0  4681              MOV      r9,r0
0002f2  e9dd040d          LDRD     r0,r4,[sp,#0x34]
0002f6  468a              MOV      r10,r1
0002f8  4693              MOV      r11,r2
;;;410    char i;
;;;411    //char n;
;;;412    
;;;413    //bin2bcd_int(in);
;;;414    //bcd2lcd_zero(des+1);
;;;415    i=find(xy);
0002fa  f7fffffe          BL       find
;;;416    
;;;417    //in1=192;
;;;418    
;;;419    //in2=34;
;;;420    
;;;421    if((flash_pos==1)&&(bFL2))
;;;422    	{
;;;423    	lcd_buffer[i-12]=' ';
0002fe  2220              MOVS     r2,#0x20
000300  f8df80f8          LDR      r8,|L2.1020|
000304  493a              LDR      r1,|L2.1008|
;;;424    	lcd_buffer[i-13]=' ';
;;;425    	lcd_buffer[i-14]=' ';
;;;426    	}
;;;427    else 
;;;428    	{
;;;429    	lcd_buffer[i-12]=0x30+(in1%10);
000306  230a              MOVS     r3,#0xa
;;;430    	lcd_buffer[i-13]=0x30+(in1/10)%10;
;;;431    	lcd_buffer[i-14]=0x30+(in1/100);
000308  f04f0c64          MOV      r12,#0x64
00030c  2c01              CMP      r4,#1                 ;421
00030e  d109              BNE      |L2.804|
000310  f8985000          LDRB     r5,[r8,#0]            ;421  ; bFL2
000314  b135              CBZ      r5,|L2.804|
000316  180d              ADDS     r5,r1,r0              ;423
000318  f1a5050e          SUB      r5,r5,#0xe            ;423
00031c  70aa              STRB     r2,[r5,#2]            ;423
00031e  706a              STRB     r2,[r5,#1]            ;424
000320  702a              STRB     r2,[r5,#0]            ;425
000322  e020              B        |L2.870|
                  |L2.804|
000324  fb99f6f3          SDIV     r6,r9,r3              ;429
000328  fb039716          MLS      r7,r3,r6,r9           ;429
00032c  180d              ADDS     r5,r1,r0              ;429
00032e  3730              ADDS     r7,r7,#0x30           ;429
000330  f1a5050e          SUB      r5,r5,#0xe            ;429
;;;432    	}
;;;433    
;;;434    if((flash_pos==2)&&(bFL2))
000334  2c02              CMP      r4,#2
000336  70af              STRB     r7,[r5,#2]            ;429
000338  fb96f7f3          SDIV     r7,r6,r3              ;430
00033c  fb036617          MLS      r6,r3,r7,r6           ;430
000340  f1060630          ADD      r6,r6,#0x30           ;430
000344  706e              STRB     r6,[r5,#1]            ;430
000346  fb99f6fc          SDIV     r6,r9,r12             ;431
00034a  f1060630          ADD      r6,r6,#0x30           ;431
00034e  f8056b0e          STRB     r6,[r5],#0xe          ;431
000352  d108              BNE      |L2.870|
000354  f8986000          LDRB     r6,[r8,#0]  ; bFL2
000358  b12e              CBZ      r6,|L2.870|
00035a  f1a5050a          SUB      r5,r5,#0xa
;;;435    	{
;;;436    	lcd_buffer[i-8]=' ';
00035e  70aa              STRB     r2,[r5,#2]
;;;437    	lcd_buffer[i-9]=' ';
000360  706a              STRB     r2,[r5,#1]
;;;438    	lcd_buffer[i-10]=' ';
000362  702a              STRB     r2,[r5,#0]
000364  e021              B        |L2.938|
                  |L2.870|
;;;439    	}
;;;440    else 
;;;441    	{
;;;442    	lcd_buffer[i-8]=0x30+(in2%10);
000366  fb9af6f3          SDIV     r6,r10,r3
00036a  fb03a716          MLS      r7,r3,r6,r10
00036e  180d              ADDS     r5,r1,r0
000370  3730              ADDS     r7,r7,#0x30
000372  f1a5050a          SUB      r5,r5,#0xa
;;;443    	lcd_buffer[i-9]=0x30+(in2/10)%10;
;;;444    	lcd_buffer[i-10]=0x30+(in2/100);
;;;445    	}
;;;446    
;;;447    if((flash_pos==3)&&(bFL2))
000376  2c03              CMP      r4,#3
000378  70af              STRB     r7,[r5,#2]            ;442
00037a  fb96f7f3          SDIV     r7,r6,r3              ;443
00037e  fb036617          MLS      r6,r3,r7,r6           ;443
000382  f1060630          ADD      r6,r6,#0x30           ;443
000386  706e              STRB     r6,[r5,#1]            ;443
000388  fb9af6fc          SDIV     r6,r10,r12            ;444
00038c  f1060630          ADD      r6,r6,#0x30           ;444
000390  4667              MOV      r7,r12                ;444
000392  f8056b0a          STRB     r6,[r5],#0xa          ;444
000396  d108              BNE      |L2.938|
000398  f8986000          LDRB     r6,[r8,#0]  ; bFL2
00039c  b12e              CBZ      r6,|L2.938|
00039e  f1a50506          SUB      r5,r5,#6
;;;448    	{
;;;449    	lcd_buffer[i-4]=' ';
0003a2  70aa              STRB     r2,[r5,#2]
;;;450    	lcd_buffer[i-5]=' ';
0003a4  706a              STRB     r2,[r5,#1]
;;;451    	lcd_buffer[i-6]=' ';
0003a6  702a              STRB     r2,[r5,#0]
0003a8  e02a              B        |L2.1024|
                  |L2.938|
;;;452    	}
;;;453    else 
;;;454    	{
;;;455    	lcd_buffer[i-4]=0x30+in3%10;
0003aa  fb9bf6f3          SDIV     r6,r11,r3
0003ae  fb03b716          MLS      r7,r3,r6,r11
0003b2  180d              ADDS     r5,r1,r0
0003b4  3730              ADDS     r7,r7,#0x30
0003b6  f1a50506          SUB      r5,r5,#6
;;;456    	lcd_buffer[i-5]=0x30+(in3/10)%10;
;;;457    	lcd_buffer[i-6]=0x30+(in3/100);
;;;458    	}
;;;459    
;;;460    if((flash_pos==4)&&(bFL2))
0003ba  2c04              CMP      r4,#4
0003bc  70af              STRB     r7,[r5,#2]            ;455
0003be  fb96f7f3          SDIV     r7,r6,r3              ;456
0003c2  fb036617          MLS      r6,r3,r7,r6           ;456
0003c6  f1060630          ADD      r6,r6,#0x30           ;456
0003ca  706e              STRB     r6,[r5,#1]            ;456
0003cc  fb9bf6fc          SDIV     r6,r11,r12            ;457
0003d0  f1060630          ADD      r6,r6,#0x30           ;457
0003d4  4667              MOV      r7,r12                ;457
0003d6  f8056b06          STRB     r6,[r5],#6            ;457
0003da  d111              BNE      |L2.1024|
0003dc  f8984000          LDRB     r4,[r8,#0]  ; bFL2
0003e0  b174              CBZ      r4,|L2.1024|
;;;461    	{
;;;462    	lcd_buffer[i]=' ';
0003e2  f1a50502          SUB      r5,r5,#2
0003e6  540a              STRB     r2,[r1,r0]
;;;463    	lcd_buffer[i-1]=' ';
0003e8  706a              STRB     r2,[r5,#1]
;;;464    	lcd_buffer[i-2]=' ';
0003ea  702a              STRB     r2,[r5,#0]
                  |L2.1004|
;;;465    	}
;;;466    else 
;;;467    	{
;;;468    	lcd_buffer[i]=0x30+in4%10;
;;;469    	lcd_buffer[i-1]=0x30+(in4/10)%10;
;;;470    	lcd_buffer[i-2]=0x30+(in4/100);
;;;471    	}
;;;472    }
0003ec  e8bd8fff          POP      {r0-r11,pc}
                  |L2.1008|
                          DCD      lcd_buffer
                  |L2.1012|
                          DCD      ||dig||
                  |L2.1016|
                          DCD      zero_on
                  |L2.1020|
                          DCD      bFL2
                  |L2.1024|
000400  9c03              LDR      r4,[sp,#0xc]          ;468
000402  fb94f2f3          SDIV     r2,r4,r3              ;468
000406  fb034412          MLS      r4,r3,r2,r4           ;468
00040a  3430              ADDS     r4,r4,#0x30           ;468
00040c  540c              STRB     r4,[r1,r0]            ;468
00040e  fb92f4f3          SDIV     r4,r2,r3              ;469
000412  fb032214          MLS      r2,r3,r4,r2           ;469
000416  4408              ADD      r0,r0,r1              ;469
000418  f1a00002          SUB      r0,r0,#2              ;469
00041c  3230              ADDS     r2,r2,#0x30           ;469
00041e  7042              STRB     r2,[r0,#1]            ;469
000420  9903              LDR      r1,[sp,#0xc]          ;470
000422  fb91f1f7          SDIV     r1,r1,r7              ;470
000426  f1010130          ADD      r1,r1,#0x30           ;470
00042a  7001              STRB     r1,[r0,#0]            ;470
00042c  e7de              B        |L2.1004|
;;;473    
                          ENDP

                  int2lcd PROC
;;;474    //-----------------------------------------------
;;;475    void int2lcd(unsigned short in,char xy,char des)
00042e  b570              PUSH     {r4-r6,lr}
;;;476    {
000430  460d              MOV      r5,r1
000432  4614              MOV      r4,r2
;;;477    char i;
;;;478    char n;
;;;479    
;;;480    bin2bcd_int(in);
000434  f7fffffe          BL       bin2bcd_int
;;;481    bcd2lcd_zero(des+1);
000438  1c60              ADDS     r0,r4,#1
00043a  b2c0              UXTB     r0,r0
00043c  f7fffffe          BL       bcd2lcd_zero
;;;482    i=find(xy);
000440  4628              MOV      r0,r5
000442  f7fffffe          BL       find
;;;483    for (n=0;n<5;n++)
;;;484    	{
;;;485       	if(!des&&(dig[n]!=' '))
000446  4bb4              LDR      r3,|L2.1816|
;;;486       		{
;;;487       		lcd_buffer[i]=dig[n];	 
000448  4ab4              LDR      r2,|L2.1820|
00044a  2100              MOVS     r1,#0                 ;483
                  |L2.1100|
00044c  b924              CBNZ     r4,|L2.1112|
00044e  5c5d              LDRB     r5,[r3,r1]            ;485
000450  2d20              CMP      r5,#0x20              ;485
000452  d001              BEQ      |L2.1112|
                  |L2.1108|
000454  5415              STRB     r5,[r2,r0]
000456  e00f              B        |L2.1144|
                  |L2.1112|
;;;488       		}
;;;489       	else 
;;;490       		{
;;;491       		if(n<des)lcd_buffer[i]=dig[n];
000458  42a1              CMP      r1,r4
00045a  d201              BCS      |L2.1120|
00045c  5c5d              LDRB     r5,[r3,r1]
00045e  e7f9              B        |L2.1108|
                  |L2.1120|
;;;492       		else if (n==des)
000460  d104              BNE      |L2.1132|
;;;493       			{
;;;494       			lcd_buffer[i]='.';
000462  f04f052e          MOV      r5,#0x2e
000466  5415              STRB     r5,[r2,r0]
;;;495       			lcd_buffer[i-1]=dig[n];
000468  5c5d              LDRB     r5,[r3,r1]
00046a  e002              B        |L2.1138|
                  |L2.1132|
;;;496       			} 
;;;497       		else if ((n>des)&&(dig[n]!=' ')) lcd_buffer[i-1]=dig[n];   		
00046c  5c5d              LDRB     r5,[r3,r1]
00046e  2d20              CMP      r5,#0x20
000470  d002              BEQ      |L2.1144|
                  |L2.1138|
000472  1816              ADDS     r6,r2,r0
000474  f8065c01          STRB     r5,[r6,#-1]
                  |L2.1144|
;;;498       		}  
;;;499    		
;;;500    	i--;	
000478  1e40              SUBS     r0,r0,#1
00047a  1c49              ADDS     r1,r1,#1              ;483
00047c  b2c9              UXTB     r1,r1                 ;483
00047e  b2c0              UXTB     r0,r0
000480  2905              CMP      r1,#5                 ;483
000482  d3e3              BCC      |L2.1100|
;;;501    	}
;;;502    }
000484  bd70              POP      {r4-r6,pc}
;;;503    
                          ENDP

                  long2lcdhyx PROC
;;;504    //-----------------------------------------------
;;;505    void long2lcdhyx(unsigned long in,char y,char x)
000486  b517              PUSH     {r0-r2,r4,lr}
;;;506    {
;;;507    char i;
;;;508    char n;
;;;509    
;;;510    i=(20*y)+x;
000488  eb010081          ADD      r0,r1,r1,LSL #2
00048c  eb020080          ADD      r0,r2,r0,LSL #2
000490  b2c2              UXTB     r2,r0
;;;511    
;;;512    n=*((char*)&in);
000492  f89d3000          LDRB     r3,[sp,#0]
;;;513    lcd_buffer[i]=ABCDEF[n%16];
000496  48a2              LDR      r0,|L2.1824|
000498  f003010f          AND      r1,r3,#0xf
;;;514    i--;
;;;515    lcd_buffer[i]=ABCDEF[n/16];
00049c  eb001313          ADD      r3,r0,r3,LSR #4
0004a0  5c44              LDRB     r4,[r0,r1]            ;513
0004a2  499e              LDR      r1,|L2.1820|
0004a4  548c              STRB     r4,[r1,r2]            ;513
0004a6  1e52              SUBS     r2,r2,#1              ;514
0004a8  b2d2              UXTB     r2,r2                 ;514
0004aa  781b              LDRB     r3,[r3,#0]
0004ac  548b              STRB     r3,[r1,r2]
;;;516    i--;
;;;517    
;;;518    n=*(((char*)&in)+1);
0004ae  f89d3001          LDRB     r3,[sp,#1]
0004b2  1e52              SUBS     r2,r2,#1              ;516
;;;519    lcd_buffer[i]=ABCDEF[n%16];
0004b4  f003040f          AND      r4,r3,#0xf
0004b8  b2d2              UXTB     r2,r2                 ;516
0004ba  5d04              LDRB     r4,[r0,r4]
0004bc  548c              STRB     r4,[r1,r2]
;;;520    i--;
0004be  1e52              SUBS     r2,r2,#1
;;;521    lcd_buffer[i]=ABCDEF[n/16];
0004c0  eb001313          ADD      r3,r0,r3,LSR #4
0004c4  b2d2              UXTB     r2,r2                 ;520
0004c6  781b              LDRB     r3,[r3,#0]
0004c8  548b              STRB     r3,[r1,r2]
;;;522    i--;
;;;523    
;;;524    n=*(((char*)&in)+2);
0004ca  f89d3002          LDRB     r3,[sp,#2]
0004ce  1e52              SUBS     r2,r2,#1              ;522
;;;525    lcd_buffer[i]=ABCDEF[n%16];
0004d0  f003040f          AND      r4,r3,#0xf
0004d4  b2d2              UXTB     r2,r2                 ;522
0004d6  5d04              LDRB     r4,[r0,r4]
0004d8  548c              STRB     r4,[r1,r2]
;;;526    i--;
0004da  1e52              SUBS     r2,r2,#1
;;;527    lcd_buffer[i]=ABCDEF[n/16];
0004dc  eb001313          ADD      r3,r0,r3,LSR #4
0004e0  b2d2              UXTB     r2,r2                 ;526
0004e2  781b              LDRB     r3,[r3,#0]
0004e4  548b              STRB     r3,[r1,r2]
;;;528    i--;
;;;529    
;;;530    n=*(((char*)&in)+3);
0004e6  f89d3003          LDRB     r3,[sp,#3]
0004ea  1e52              SUBS     r2,r2,#1              ;528
;;;531    lcd_buffer[i]=ABCDEF[n%16];
0004ec  f003040f          AND      r4,r3,#0xf
0004f0  b2d2              UXTB     r2,r2                 ;528
0004f2  5d04              LDRB     r4,[r0,r4]
0004f4  548c              STRB     r4,[r1,r2]
;;;532    i--;
0004f6  1e52              SUBS     r2,r2,#1
;;;533    lcd_buffer[i]=ABCDEF[n/16];
0004f8  eb001013          ADD      r0,r0,r3,LSR #4
0004fc  b2d2              UXTB     r2,r2                 ;532
0004fe  7800              LDRB     r0,[r0,#0]
000500  5488              STRB     r0,[r1,r2]
;;;534    i--;
;;;535    }
000502  bd1e              POP      {r1-r4,pc}
;;;536    
                          ENDP

                  char2lcdhyx PROC
;;;550    //-----------------------------------------------
;;;551    void char2lcdhyx(char in,char y,char x)
000504  eb010181          ADD      r1,r1,r1,LSL #2
;;;552    {
;;;553    char i;
;;;554    
;;;555    i=(20*y)+x;
000508  eb020181          ADD      r1,r2,r1,LSL #2
;;;556    
;;;557    lcd_buffer[i]=ABCDEF[in%16];
00050c  4a84              LDR      r2,|L2.1824|
00050e  b510              PUSH     {r4,lr}               ;552
000510  f000030f          AND      r3,r0,#0xf
000514  b2c9              UXTB     r1,r1                 ;555
000516  5cd4              LDRB     r4,[r2,r3]
000518  4b80              LDR      r3,|L2.1820|
;;;558    i--;
;;;559    lcd_buffer[i]=ABCDEF[in/16];
00051a  eb021010          ADD      r0,r2,r0,LSR #4
00051e  545c              STRB     r4,[r3,r1]            ;557
000520  1e49              SUBS     r1,r1,#1              ;558
000522  b2c9              UXTB     r1,r1                 ;558
000524  7800              LDRB     r0,[r0,#0]
000526  5458              STRB     r0,[r3,r1]
;;;560    i--;
;;;561    }
000528  bd10              POP      {r4,pc}
;;;562    
                          ENDP

                  char2lcdbyx PROC
;;;583    //-----------------------------------------------
;;;584    void char2lcdbyx(char in,char y,char x)
00052a  eb010181          ADD      r1,r1,r1,LSL #2
;;;585    {
;;;586    char i;
;;;587    
;;;588    i=(20*y)+x;
00052e  eb020181          ADD      r1,r2,r1,LSL #2
000532  b2cb              UXTB     r3,r1
;;;589    
;;;590    lcd_buffer[i--]=ABCDEF[in%2];
000534  497a              LDR      r1,|L2.1824|
000536  b510              PUSH     {r4,lr}               ;585
000538  f0000201          AND      r2,r0,#1
00053c  5c8c              LDRB     r4,[r1,r2]
00053e  4a77              LDR      r2,|L2.1820|
000540  54d4              STRB     r4,[r2,r3]
;;;591    in/=2;
000542  0844              LSRS     r4,r0,#1
000544  1e5b              SUBS     r3,r3,#1              ;590
;;;592    lcd_buffer[i--]=ABCDEF[in%2];
000546  f0040001          AND      r0,r4,#1
00054a  b2db              UXTB     r3,r3                 ;590
00054c  5c08              LDRB     r0,[r1,r0]
00054e  54d0              STRB     r0,[r2,r3]
000550  1e5b              SUBS     r3,r3,#1
000552  b2d8              UXTB     r0,r3
;;;593    in/=2;
000554  0863              LSRS     r3,r4,#1
;;;594    lcd_buffer[i--]=ABCDEF[in%2];
000556  f0030401          AND      r4,r3,#1
;;;595    in/=2;
00055a  085b              LSRS     r3,r3,#1
00055c  5d0c              LDRB     r4,[r1,r4]            ;594
00055e  5414              STRB     r4,[r2,r0]            ;594
000560  1e40              SUBS     r0,r0,#1              ;594
;;;596    lcd_buffer[i--]=ABCDEF[in%2];
000562  f0030401          AND      r4,r3,#1
000566  b2c0              UXTB     r0,r0                 ;594
000568  5d0c              LDRB     r4,[r1,r4]
00056a  5414              STRB     r4,[r2,r0]
;;;597    in/=2;
00056c  085b              LSRS     r3,r3,#1
00056e  1e40              SUBS     r0,r0,#1              ;596
;;;598    lcd_buffer[i--]=ABCDEF[in%2];
000570  f0030401          AND      r4,r3,#1
000574  b2c0              UXTB     r0,r0                 ;596
000576  5d0c              LDRB     r4,[r1,r4]
000578  5414              STRB     r4,[r2,r0]
;;;599    in/=2;
00057a  085b              LSRS     r3,r3,#1
00057c  1e40              SUBS     r0,r0,#1              ;598
;;;600    lcd_buffer[i--]=ABCDEF[in%2];
00057e  f0030401          AND      r4,r3,#1
000582  b2c0              UXTB     r0,r0                 ;598
000584  5d0c              LDRB     r4,[r1,r4]
000586  5414              STRB     r4,[r2,r0]
;;;601    in/=2;
000588  085b              LSRS     r3,r3,#1
00058a  1e40              SUBS     r0,r0,#1              ;600
;;;602    lcd_buffer[i--]=ABCDEF[in%2];
00058c  f0030401          AND      r4,r3,#1
000590  b2c0              UXTB     r0,r0                 ;600
000592  5d0c              LDRB     r4,[r1,r4]
000594  5414              STRB     r4,[r2,r0]
000596  1e40              SUBS     r0,r0,#1
000598  b2c4              UXTB     r4,r0
;;;603    in/=2;
00059a  0858              LSRS     r0,r3,#1
;;;604    lcd_buffer[i--]=ABCDEF[in%2];
00059c  5c08              LDRB     r0,[r1,r0]
00059e  5510              STRB     r0,[r2,r4]
;;;605    in/=2;
;;;606    }
0005a0  bd10              POP      {r4,pc}
;;;607    
                          ENDP

                  pointer_set PROC
;;;608    //-----------------------------------------------
;;;609    void pointer_set(char num_of_first_row)
0005a2  b530              PUSH     {r4,r5,lr}
;;;610    {
;;;611    if(sub_ind==index_set)lcd_buffer[num_of_first_row*20]=1;
0005a4  495f              LDR      r1,|L2.1828|
0005a6  2301              MOVS     r3,#1
0005a8  4d5c              LDR      r5,|L2.1820|
0005aa  f9912001          LDRSB    r2,[r1,#1]  ; a_ind
0005ae  f9911004          LDRSB    r1,[r1,#4]  ; a_ind
0005b2  eb000480          ADD      r4,r0,r0,LSL #2
0005b6  428a              CMP      r2,r1
0005b8  d102              BNE      |L2.1472|
0005ba  f8053024          STRB     r3,[r5,r4,LSL #2]
;;;612    else if(sub_ind==(index_set+1))lcd_buffer[(num_of_first_row+1)*20]=1;
;;;613    else if(sub_ind==(index_set+2))lcd_buffer[(num_of_first_row+2)*20]=1;
;;;614    else if(sub_ind==(index_set+3))lcd_buffer[(num_of_first_row+3)*20]=1;
;;;615    else if(sub_ind==(index_set+4))lcd_buffer[(num_of_first_row+4)*20]=1;
;;;616    else if(sub_ind==(index_set+5))lcd_buffer[(num_of_first_row+5)*20]=1;
;;;617    else if(sub_ind==(index_set+6))lcd_buffer[(num_of_first_row+6)*20]=1;
;;;618    else if(sub_ind==(index_set+7))lcd_buffer[(num_of_first_row+7)*20]=1;
;;;619    }
0005be  bd30              POP      {r4,r5,pc}
                  |L2.1472|
0005c0  4d56              LDR      r5,|L2.1820|
0005c2  1c4c              ADDS     r4,r1,#1              ;612
0005c4  eb000080          ADD      r0,r0,r0,LSL #2       ;611
0005c8  eb050080          ADD      r0,r5,r0,LSL #2       ;611
0005cc  42a2              CMP      r2,r4                 ;612
0005ce  d101              BNE      |L2.1492|
0005d0  7503              STRB     r3,[r0,#0x14]         ;612
0005d2  bd30              POP      {r4,r5,pc}
                  |L2.1492|
0005d4  1c8c              ADDS     r4,r1,#2              ;613
0005d6  42a2              CMP      r2,r4                 ;613
0005d8  d102              BNE      |L2.1504|
0005da  f8803028          STRB     r3,[r0,#0x28]         ;613
0005de  bd30              POP      {r4,r5,pc}
                  |L2.1504|
0005e0  1ccc              ADDS     r4,r1,#3              ;614
0005e2  42a2              CMP      r2,r4                 ;614
0005e4  d102              BNE      |L2.1516|
0005e6  f880303c          STRB     r3,[r0,#0x3c]         ;614
0005ea  bd30              POP      {r4,r5,pc}
                  |L2.1516|
0005ec  1d0c              ADDS     r4,r1,#4              ;615
0005ee  42a2              CMP      r2,r4                 ;615
0005f0  d102              BNE      |L2.1528|
0005f2  f8803050          STRB     r3,[r0,#0x50]         ;615
0005f6  bd30              POP      {r4,r5,pc}
                  |L2.1528|
0005f8  1d4c              ADDS     r4,r1,#5              ;616
0005fa  42a2              CMP      r2,r4                 ;616
0005fc  d102              BNE      |L2.1540|
0005fe  f8803064          STRB     r3,[r0,#0x64]         ;616
000602  bd30              POP      {r4,r5,pc}
                  |L2.1540|
000604  1d8c              ADDS     r4,r1,#6              ;617
000606  42a2              CMP      r2,r4                 ;617
000608  d102              BNE      |L2.1552|
00060a  f8803078          STRB     r3,[r0,#0x78]         ;617
                  |L2.1550|
00060e  bd30              POP      {r4,r5,pc}
                  |L2.1552|
000610  1dc9              ADDS     r1,r1,#7              ;618
000612  428a              CMP      r2,r1                 ;618
000614  d1fb              BNE      |L2.1550|
000616  f880308c          STRB     r3,[r0,#0x8c]         ;618
00061a  bd30              POP      {r4,r5,pc}
;;;620    
                          ENDP

                  tree_down PROC
;;;622    //-----------------------------------------------
;;;623    void tree_down(signed char offset_ind,signed char offset_sub_ind)
00061c  4b42              LDR      r3,|L2.1832|
;;;624    {
;;;625    ind_pointer--;
00061e  881a              LDRH     r2,[r3,#0]  ; ind_pointer
000620  1e52              SUBS     r2,r2,#1
;;;626    ind_pointer+=offset_ind;
000622  4410              ADD      r0,r0,r2
000624  b200              SXTH     r0,r0
000626  8018              STRH     r0,[r3,#0]
;;;627    a_ind=b_ind[ind_pointer];
000628  4a40              LDR      r2,|L2.1836|
00062a  eb000080          ADD      r0,r0,r0,LSL #2
00062e  4402              ADD      r2,r2,r0
000630  483c              LDR      r0,|L2.1828|
000632  6813              LDR      r3,[r2,#0]
000634  6003              STR      r3,[r0,#0]  ; a_ind
000636  7912              LDRB     r2,[r2,#4]
000638  7102              STRB     r2,[r0,#4]
;;;628    
;;;629    sub_ind+=offset_sub_ind;
00063a  7842              LDRB     r2,[r0,#1]  ; a_ind
00063c  4411              ADD      r1,r1,r2
00063e  7041              STRB     r1,[r0,#1]
;;;630    }
000640  4770              BX       lr
;;;631    
                          ENDP

                  tree_up PROC
;;;632    //-----------------------------------------------
;;;633    void tree_up(char tind, char tsub_ind, char tindex_set, char tsub_ind1)
000642  b5f0              PUSH     {r4-r7,lr}
;;;634    {
;;;635    b_ind[ind_pointer++]=a_ind;
000644  4d38              LDR      r5,|L2.1832|
000646  4f39              LDR      r7,|L2.1836|
000648  f9b54000          LDRSH    r4,[r5,#0]  ; ind_pointer
00064c  eb040684          ADD      r6,r4,r4,LSL #2
000650  1c64              ADDS     r4,r4,#1
000652  802c              STRH     r4,[r5,#0]
000654  4c33              LDR      r4,|L2.1828|
000656  443e              ADD      r6,r6,r7
000658  6825              LDR      r5,[r4,#0]  ; a_ind
00065a  6035              STR      r5,[r6,#0]
00065c  7925              LDRB     r5,[r4,#4]  ; a_ind
00065e  7135              STRB     r5,[r6,#4]
;;;636    ind=(i_enum)tind;
000660  7020              STRB     r0,[r4,#0]
;;;637    sub_ind=tsub_ind;
000662  7061              STRB     r1,[r4,#1]
;;;638    index_set=tindex_set;
000664  7122              STRB     r2,[r4,#4]
;;;639    sub_ind1=tsub_ind1;
000666  70a3              STRB     r3,[r4,#2]
;;;640    }
000668  bdf0              POP      {r4-r7,pc}
;;;641    
                          ENDP

                  bgnd_par PROC
;;;642    //-----------------------------------------------
;;;643    void bgnd_par(char const *ptr0,char const *ptr1,char const *ptr2,char const *ptr3)
00066a  b5f0              PUSH     {r4-r7,lr}
;;;644    {
00066c  4605              MOV      r5,r0
00066e  460e              MOV      r6,r1
000670  4617              MOV      r7,r2
;;;645    char i,*ptr_ram;
;;;646    clr_scrn();
000672  f7fffffe          BL       clr_scrn
;;;647    
;;;648    ptr_ram=lcd_buffer;
000676  4c29              LDR      r4,|L2.1820|
;;;649    for(i=0;i<20;i++)
000678  f05f0000          MOVS.W   r0,#0
                  |L2.1660|
00067c  1c40              ADDS     r0,r0,#1
;;;650    	{
;;;651    	*ptr_ram++=*ptr0++;
00067e  f8151b01          LDRB     r1,[r5],#1
000682  b2c0              UXTB     r0,r0                 ;649
000684  f8041b01          STRB     r1,[r4],#1
000688  2814              CMP      r0,#0x14              ;649
00068a  d3f7              BCC      |L2.1660|
;;;652    	}
;;;653    for(i=0;i<20;i++)
00068c  f05f0000          MOVS.W   r0,#0
                  |L2.1680|
000690  1c40              ADDS     r0,r0,#1
;;;654    	{
;;;655    	*ptr_ram++=*ptr1++;
000692  f8161b01          LDRB     r1,[r6],#1
000696  b2c0              UXTB     r0,r0                 ;653
000698  f8041b01          STRB     r1,[r4],#1
00069c  2814              CMP      r0,#0x14              ;653
00069e  d3f7              BCC      |L2.1680|
;;;656    	}
;;;657    for(i=0;i<20;i++)
0006a0  f05f0000          MOVS.W   r0,#0
                  |L2.1700|
0006a4  1c40              ADDS     r0,r0,#1
;;;658    	{
;;;659    	*ptr_ram++=*ptr2++;
0006a6  f8171b01          LDRB     r1,[r7],#1
0006aa  b2c0              UXTB     r0,r0                 ;657
0006ac  f8041b01          STRB     r1,[r4],#1
0006b0  2814              CMP      r0,#0x14              ;657
0006b2  d3f7              BCC      |L2.1700|
;;;660    	}
;;;661    for(i=0;i<20;i++)
0006b4  f05f0000          MOVS.W   r0,#0
                  |L2.1720|
0006b8  1c40              ADDS     r0,r0,#1
;;;662    	{
;;;663    	*ptr_ram++=*ptr3++;
0006ba  f8131b01          LDRB     r1,[r3],#1
0006be  b2c0              UXTB     r0,r0                 ;661
0006c0  f8041b01          STRB     r1,[r4],#1
0006c4  2814              CMP      r0,#0x14              ;661
0006c6  d3f7              BCC      |L2.1720|
;;;664    	}
;;;665    
;;;666    
;;;667    }
0006c8  bdf0              POP      {r4-r7,pc}
;;;668    
                          ENDP

                  sub_bgnd PROC
;;;669    //-----------------------------------------------
;;;670    void sub_bgnd(char const *adr,char xy,signed char offset)
0006ca  b530              PUSH     {r4,r5,lr}
;;;671    {
0006cc  4604              MOV      r4,r0
0006ce  4608              MOV      r0,r1
0006d0  4615              MOV      r5,r2
;;;672    char temp;
;;;673    temp=find(xy);
0006d2  f7fffffe          BL       find
;;;674    
;;;675    //ptr_ram=&lcd_buffer[find(xy)];
;;;676    if(temp!=255)
0006d6  28ff              CMP      r0,#0xff
0006d8  d009              BEQ      |L2.1774|
;;;677    while (*adr)
;;;678    	{
;;;679    	lcd_buffer[temp+offset]=*adr++;
0006da  4a10              LDR      r2,|L2.1820|
                  |L2.1756|
0006dc  7821              LDRB     r1,[r4,#0]            ;677
0006de  2900              CMP      r1,#0                 ;677
0006e0  d005              BEQ      |L2.1774|
0006e2  1943              ADDS     r3,r0,r5
0006e4  1c64              ADDS     r4,r4,#1
;;;680    	temp++;
0006e6  1c40              ADDS     r0,r0,#1
0006e8  54d1              STRB     r1,[r2,r3]            ;679
0006ea  b2c0              UXTB     r0,r0
0006ec  e7f6              B        |L2.1756|
                  |L2.1774|
;;;681        	}
;;;682    }
0006ee  bd30              POP      {r4,r5,pc}
;;;683    
                          ENDP

                  show_mess PROC
;;;684    //-----------------------------------------------
;;;685    void show_mess(char* p1, char* p2, char* p3, char* p4,int m_sec)
0006f0  b510              PUSH     {r4,lr}
;;;686    {
;;;687    bgnd_par(p1,p2,p3,p4);
0006f2  9c02              LDR      r4,[sp,#8]
0006f4  f7fffffe          BL       bgnd_par
;;;688    tree_up(iSM,sub_ind,sub_ind1,sub_ind2);
0006f8  480a              LDR      r0,|L2.1828|
0006fa  78c3              LDRB     r3,[r0,#3]  ; a_ind
0006fc  7882              LDRB     r2,[r0,#2]  ; a_ind
0006fe  7841              LDRB     r1,[r0,#1]  ; a_ind
000700  2064              MOVS     r0,#0x64
000702  f7fffffe          BL       tree_up
;;;689    ret((char)(m_sec/100));
000706  2064              MOVS     r0,#0x64
000708  fb94f0f0          SDIV     r0,r4,r0
00070c  e8bd4010          POP      {r4,lr}
000710  b2c0              UXTB     r0,r0
000712  f7ffbffe          B.W      ||ret||
;;;690    }
;;;691    
                          ENDP

000716  0000              DCW      0x0000
                  |L2.1816|
                          DCD      ||dig||
                  |L2.1820|
                          DCD      lcd_buffer
                  |L2.1824|
                          DCD      ABCDEF
                  |L2.1828|
                          DCD      a_ind
                  |L2.1832|
                          DCD      ind_pointer
                  |L2.1836|
                          DCD      b_ind

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  int2lcd_m PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  b570              PUSH     {r4-r6,lr}
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
000002  460d              MOV      r5,r1
000004  4614              MOV      r4,r2
000006  2800              CMP      r0,#0
;;;699    else if(tempSI>=modul)tempSI-=modul;
000008  da02              BGE      |L3.16|
00000a  43c0              MVNS     r0,r0
00000c  1c40              ADDS     r0,r0,#1
;;;700    
;;;701    return (char)tempSI;
00000e  b200              SXTH     r0,r0
                  |L3.16|
;;;702    }
000010  f7fffffe          BL       bin2bcd_int
000014  1c60              ADDS     r0,r4,#1
000016  b2c0              UXTB     r0,r0
000018  f7fffffe          BL       bcd2lcd_zero
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       find
000022  28ff              CMP      r0,#0xff
000024  d019              BEQ      |L3.90|
000026  4a0e              LDR      r2,|L3.96|
000028  4b0e              LDR      r3,|L3.100|
00002a  2100              MOVS     r1,#0
                  |L3.44|
00002c  42a1              CMP      r1,r4
00002e  d201              BCS      |L3.52|
000030  5c55              LDRB     r5,[r2,r1]
000032  e013              B        |L3.92|
                  |L3.52|
000034  d104              BNE      |L3.64|
000036  f04f052e          MOV      r5,#0x2e
00003a  541d              STRB     r5,[r3,r0]
00003c  5c55              LDRB     r5,[r2,r1]
00003e  e003              B        |L3.72|
                  |L3.64|
000040  5c55              LDRB     r5,[r2,r1]
000042  2d20              CMP      r5,#0x20
000044  d003              BEQ      |L3.78|
000046  b14c              CBZ      r4,|L3.92|
                  |L3.72|
000048  181e              ADDS     r6,r3,r0
00004a  f8065c01          STRB     r5,[r6,#-1]
                  |L3.78|
00004e  1e40              SUBS     r0,r0,#1
000050  1c49              ADDS     r1,r1,#1
000052  b2c9              UXTB     r1,r1
000054  b2c0              UXTB     r0,r0
000056  2905              CMP      r1,#5
000058  d3e8              BCC      |L3.44|
                  |L3.90|
00005a  bd70              POP      {r4-r6,pc}
                  |L3.92|
00005c  541d              STRB     r5,[r3,r0]
00005e  e7f6              B        |L3.78|
;;;703    
                          ENDP

                  |L3.96|
                          DCD      ||dig||
                  |L3.100|
                          DCD      lcd_buffer

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  int2lcd_mm PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  b5f0              PUSH     {r4-r7,lr}
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
000002  460d              MOV      r5,r1
000004  4614              MOV      r4,r2
000006  2800              CMP      r0,#0
;;;699    else if(tempSI>=modul)tempSI-=modul;
000008  da01              BGE      |L4.14|
00000a  4240              RSBS     r0,r0,#0
00000c  b200              SXTH     r0,r0
                  |L4.14|
;;;700    
;;;701    return (char)tempSI;
00000e  f7fffffe          BL       bin2bcd_int
;;;702    }
000012  1c60              ADDS     r0,r4,#1
000014  b2c0              UXTB     r0,r0
000016  f7fffffe          BL       bcd2lcd_zero
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       find
000020  4a13              LDR      r2,|L4.112|
000022  4b14              LDR      r3,|L4.116|
000024  2100              MOVS     r1,#0
                  |L4.38|
000026  b964              CBNZ     r4,|L4.66|
000028  5c55              LDRB     r5,[r2,r1]
00002a  2d20              CMP      r5,#0x20
00002c  d009              BEQ      |L4.66|
00002e  1856              ADDS     r6,r2,r1
000030  7876              LDRB     r6,[r6,#1]
000032  2e20              CMP      r6,#0x20
000034  d103              BNE      |L4.62|
000036  262d              MOVS     r6,#0x2d
000038  181f              ADDS     r7,r3,r0
00003a  f8076c01          STRB     r6,[r7,#-1]
                  |L4.62|
00003e  541d              STRB     r5,[r3,r0]
000040  e00f              B        |L4.98|
                  |L4.66|
000042  42a1              CMP      r1,r4
000044  d201              BCS      |L4.74|
000046  5c55              LDRB     r5,[r2,r1]
000048  e7f9              B        |L4.62|
                  |L4.74|
00004a  d104              BNE      |L4.86|
00004c  f04f052e          MOV      r5,#0x2e
000050  541d              STRB     r5,[r3,r0]
000052  5c55              LDRB     r5,[r2,r1]
000054  e002              B        |L4.92|
                  |L4.86|
000056  5c55              LDRB     r5,[r2,r1]
000058  2d20              CMP      r5,#0x20
00005a  d002              BEQ      |L4.98|
                  |L4.92|
00005c  181e              ADDS     r6,r3,r0
00005e  f8065c01          STRB     r5,[r6,#-1]
                  |L4.98|
000062  1e40              SUBS     r0,r0,#1
000064  1c49              ADDS     r1,r1,#1
000066  b2c9              UXTB     r1,r1
000068  b2c0              UXTB     r0,r0
00006a  2905              CMP      r1,#5
00006c  d3db              BCC      |L4.38|
00006e  bdf0              POP      {r4-r7,pc}
;;;703    
                          ENDP

                  |L4.112|
                          DCD      ||dig||
                  |L4.116|
                          DCD      lcd_buffer

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.text||
                  event2ind PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  4770              BX       lr
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
;;;699    else if(tempSI>=modul)tempSI-=modul;
;;;700    
;;;701    return (char)tempSI;
;;;702    }
;;;703    
                          ENDP


                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  char2lcdh PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  b510              PUSH     {r4,lr}
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
000002  4604              MOV      r4,r0
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       find
;;;699    else if(tempSI>=modul)tempSI-=modul;
00000a  4906              LDR      r1,|L6.36|
00000c  f004020f          AND      r2,r4,#0xf
;;;700    
;;;701    return (char)tempSI;
;;;702    }
000010  5c8b              LDRB     r3,[r1,r2]
000012  4a05              LDR      r2,|L6.40|
000014  eb011114          ADD      r1,r1,r4,LSR #4
000018  5413              STRB     r3,[r2,r0]
00001a  1e40              SUBS     r0,r0,#1
00001c  b2c0              UXTB     r0,r0
00001e  7809              LDRB     r1,[r1,#0]
000020  5411              STRB     r1,[r2,r0]
000022  bd10              POP      {r4,pc}
;;;703    
                          ENDP

                  |L6.36|
                          DCD      ABCDEF
                  |L6.40|
                          DCD      lcd_buffer

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  int2lcdhyx PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  eb010181          ADD      r1,r1,r1,LSL #2
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
000004  eb020181          ADD      r1,r2,r1,LSL #2
;;;699    else if(tempSI>=modul)tempSI-=modul;
000008  b2cb              UXTB     r3,r1
00000a  490d              LDR      r1,|L7.64|
00000c  b510              PUSH     {r4,lr}
;;;700    
;;;701    return (char)tempSI;
00000e  f000020f          AND      r2,r0,#0xf
;;;702    }
000012  5c8c              LDRB     r4,[r1,r2]
000014  4a0b              LDR      r2,|L7.68|
000016  54d4              STRB     r4,[r2,r3]
000018  0904              LSRS     r4,r0,#4
00001a  1e5b              SUBS     r3,r3,#1
00001c  f004000f          AND      r0,r4,#0xf
000020  b2db              UXTB     r3,r3
000022  5c08              LDRB     r0,[r1,r0]
000024  54d0              STRB     r0,[r2,r3]
000026  1e5b              SUBS     r3,r3,#1
000028  b2d8              UXTB     r0,r3
00002a  0923              LSRS     r3,r4,#4
00002c  f003040f          AND      r4,r3,#0xf
000030  5d0c              LDRB     r4,[r1,r4]
000032  5414              STRB     r4,[r2,r0]
000034  1e40              SUBS     r0,r0,#1
000036  091b              LSRS     r3,r3,#4
000038  b2c0              UXTB     r0,r0
00003a  5cc9              LDRB     r1,[r1,r3]
00003c  5411              STRB     r1,[r2,r0]
00003e  bd10              POP      {r4,pc}
;;;703    
                          ENDP

                  |L7.64|
                          DCD      ABCDEF
                  |L7.68|
                          DCD      lcd_buffer

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.8||, ||.text||
                  ptr_carry PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  1880              ADDS     r0,r0,r2
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
000002  d501              BPL      |L8.8|
000004  4408              ADD      r0,r0,r1
000006  e002              B        |L8.14|
                  |L8.8|
;;;699    else if(tempSI>=modul)tempSI-=modul;
000008  4288              CMP      r0,r1
00000a  db00              BLT      |L8.14|
00000c  1a40              SUBS     r0,r0,r1
                  |L8.14|
;;;700    
;;;701    return (char)tempSI;
00000e  b2c0              UXTB     r0,r0
;;;702    }
000010  4770              BX       lr
;;;703    
                          ENDP


                          AREA ||area_number.9||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.text||
                  event_data2ind PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
000004  460d              MOV      r5,r1
000006  0144              LSLS     r4,r0,#5
;;;699    else if(tempSI>=modul)tempSI-=modul;
000008  a902              ADD      r1,sp,#8
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       lc640_read_long_ptr
;;;700    
;;;701    return (char)tempSI;
;;;702    }
000010  4669              MOV      r1,sp
000012  f1040008          ADD      r0,r4,#8
000016  f7fffffe          BL       lc640_read_long_ptr
00001a  a901              ADD      r1,sp,#4
00001c  f104000c          ADD      r0,r4,#0xc
000020  f7fffffe          BL       lc640_read_long_ptr
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       find
00002a  4c32              LDR      r4,|L9.244|
00002c  2520              MOVS     r5,#0x20
00002e  f04f0930          MOV      r9,#0x30
000032  5425              STRB     r5,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b2c0              UXTB     r0,r0
000038  2621              MOVS     r6,#0x21
00003a  f8049000          STRB     r9,[r4,r0]
00003e  1c40              ADDS     r0,r0,#1
000040  b2c0              UXTB     r0,r0
000042  f04f0840          MOV      r8,#0x40
000046  5426              STRB     r6,[r4,r0]
000048  1c40              ADDS     r0,r0,#1
00004a  b2c0              UXTB     r0,r0
00004c  4649              MOV      r1,r9
00004e  f8048000          STRB     r8,[r4,r0]
000052  1c40              ADDS     r0,r0,#1
000054  b2c0              UXTB     r0,r0
000056  2200              MOVS     r2,#0
000058  5425              STRB     r5,[r4,r0]
00005a  1c40              ADDS     r0,r0,#1
00005c  b2c0              UXTB     r0,r0
00005e  5425              STRB     r5,[r4,r0]
000060  1c40              ADDS     r0,r0,#1
000062  b2c0              UXTB     r0,r0
000064  5421              STRB     r1,[r4,r0]
000066  1c40              ADDS     r0,r0,#1
000068  b2c0              UXTB     r0,r0
00006a  2123              MOVS     r1,#0x23
00006c  5421              STRB     r1,[r4,r0]
00006e  1c40              ADDS     r0,r0,#1
000070  b2c7              UXTB     r7,r0
000072  f89d0002          LDRB     r0,[sp,#2]
000076  2121              MOVS     r1,#0x21
000078  f7fffffe          BL       int2lcd
00007c  f89d0000          LDRB     r0,[sp,#0]
000080  2200              MOVS     r2,#0
000082  2123              MOVS     r1,#0x23
000084  f7fffffe          BL       int2lcd
000088  f89d0001          LDRB     r0,[sp,#1]
00008c  1e40              SUBS     r0,r0,#1
00008e  280c              CMP      r0,#0xc
000090  d302              BCC      |L9.152|
000092  2001              MOVS     r0,#1
000094  f88d0001          STRB     r0,[sp,#1]
                  |L9.152|
000098  f89d0001          LDRB     r0,[sp,#1]
00009c  4916              LDR      r1,|L9.248|
00009e  2200              MOVS     r2,#0
0000a0  eb010080          ADD      r0,r1,r0,LSL #2
0000a4  2140              MOVS     r1,#0x40
0000a6  f7fffffe          BL       sub_bgnd
0000aa  55e5              STRB     r5,[r4,r7]
0000ac  1c7f              ADDS     r7,r7,#1
0000ae  b2f8              UXTB     r0,r7
0000b0  223a              MOVS     r2,#0x3a
0000b2  f8049000          STRB     r9,[r4,r0]
0000b6  1c40              ADDS     r0,r0,#1
0000b8  b2c0              UXTB     r0,r0
0000ba  2121              MOVS     r1,#0x21
0000bc  5426              STRB     r6,[r4,r0]
0000be  1c40              ADDS     r0,r0,#1
0000c0  b2c0              UXTB     r0,r0
0000c2  5422              STRB     r2,[r4,r0]
0000c4  1c40              ADDS     r0,r0,#1
0000c6  b2c0              UXTB     r0,r0
0000c8  2200              MOVS     r2,#0
0000ca  f8049000          STRB     r9,[r4,r0]
0000ce  1c40              ADDS     r0,r0,#1
0000d0  b2c0              UXTB     r0,r0
0000d2  f8048000          STRB     r8,[r4,r0]
0000d6  1c40              ADDS     r0,r0,#1
0000d8  b2c6              UXTB     r6,r0
0000da  f89d0004          LDRB     r0,[sp,#4]
0000de  f7fffffe          BL       int2lcd
0000e2  f89d0005          LDRB     r0,[sp,#5]
0000e6  2200              MOVS     r2,#0
0000e8  2140              MOVS     r1,#0x40
0000ea  f7fffffe          BL       int2lcd
0000ee  55a5              STRB     r5,[r4,r6]
0000f0  e8bd83fe          POP      {r1-r9,pc}
;;;703    
                          ENDP

                  |L9.244|
                          DCD      lcd_buffer
                  |L9.248|
                          DCD      sm_mont
