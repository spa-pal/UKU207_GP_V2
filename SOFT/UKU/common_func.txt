; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\common_func.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\common_func.d --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 -DWG12232A --omf_browse=.\EXE\common_func.crf common_func.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  abs PROC
;;;11     //-----------------------------------------------
;;;12     signed short abs(signed short in)
000000  2800              CMP      r0,#0
;;;13     {
;;;14     if(in<0)in=-in;
000002  da01              BGE      |L1.8|
000004  4240              RSBS     r0,r0,#0
000006  b200              SXTH     r0,r0
                  |L1.8|
;;;15     return in;
;;;16     }
000008  4770              BX       lr
;;;17     
                          ENDP

                  clr_scrn PROC
;;;18     //-----------------------------------------------
;;;19     void clr_scrn(void)
00000a  2000              MOVS     r0,#0
;;;20     {
;;;21     char i;
;;;22     for (i=0;i<LCD_SIZE;i++)
;;;23     	{
;;;24     	lcd_buffer[i]=' ';
00000c  4afd              LDR      r2,|L1.1028|
00000e  2120              MOVS     r1,#0x20
                  |L1.16|
000010  5411              STRB     r1,[r2,r0]
000012  1c40              ADDS     r0,r0,#1              ;22
000014  b2c0              UXTB     r0,r0                 ;22
000016  28c8              CMP      r0,#0xc8              ;22
000018  d3fa              BCC      |L1.16|
;;;25     	}
;;;26     }
00001a  4770              BX       lr
;;;27     
                          ENDP

                  find PROC
;;;28     //-----------------------------------------------
;;;29     char find(char xy)
00001c  4601              MOV      r1,r0
;;;30     {
;;;31     char i=0;
;;;32     do i++;
;;;33     while ((lcd_buffer[i]!=xy)&&(i<LCD_SIZE));
00001e  4af9              LDR      r2,|L1.1028|
000020  2000              MOVS     r0,#0                 ;31
                  |L1.34|
000022  1c40              ADDS     r0,r0,#1              ;32
000024  b2c0              UXTB     r0,r0                 ;32
000026  5c13              LDRB     r3,[r2,r0]
000028  428b              CMP      r3,r1
00002a  d001              BEQ      |L1.48|
00002c  28c8              CMP      r0,#0xc8
00002e  d3f8              BCC      |L1.34|
                  |L1.48|
;;;34     //if(i==(LCD_SIZE)) i++;
;;;35     return i;
;;;36     }
000030  4770              BX       lr
;;;37     
                          ENDP

                  bin2bcd_int PROC
;;;39     //-----------------------------------------------
;;;40     void bin2bcd_int(unsigned int in)
000032  b510              PUSH     {r4,lr}
;;;41     {
;;;42     
;;;43     char i=5;
;;;44     for(i=0;i<5;i++)
000034  2100              MOVS     r1,#0
;;;45     	{
;;;46     	dig[i]=in%10;
000036  4cf4              LDR      r4,|L1.1032|
000038  220a              MOVS     r2,#0xa
00003a  bf00              NOP      
                  |L1.60|
00003c  fbb0f3f2          UDIV     r3,r0,r2
000040  fb020013          MLS      r0,r2,r3,r0
000044  5460              STRB     r0,[r4,r1]
000046  1c49              ADDS     r1,r1,#1              ;44
000048  b2c9              UXTB     r1,r1                 ;44
00004a  4618              MOV      r0,r3
00004c  2905              CMP      r1,#5                 ;44
00004e  d3f5              BCC      |L1.60|
;;;47     	in/=10;
;;;48     	}   
;;;49     }
000050  bd10              POP      {r4,pc}
;;;50     //-----------------------------------------------
                          ENDP

                  bcd2lcd_zero PROC
;;;51     void bcd2lcd_zero(char sig)
000052  b5f0              PUSH     {r4-r7,lr}
;;;52     {
;;;53     char i;
;;;54     zero_on=1;
000054  4bed              LDR      r3,|L1.1036|
000056  2101              MOVS     r1,#1
;;;55     for (i=5;i>0;i--)
;;;56     	{
;;;57     	if(zero_on&&(!dig[i-1])&&(i>sig))
;;;58     		{
;;;59     		dig[i-1]=0x20;
000058  2720              MOVS     r7,#0x20
00005a  7019              STRB     r1,[r3,#0]            ;54
00005c  2105              MOVS     r1,#5                 ;55
00005e  4aea              LDR      r2,|L1.1032|
000060  2600              MOVS     r6,#0                 ;54
000062  e001              B        |L1.104|
                  |L1.100|
000064  781c              LDRB     r4,[r3,#0]            ;57  ; zero_on
000066  b144              CBZ      r4,|L1.122|
                  |L1.104|
000068  1854              ADDS     r4,r2,r1              ;57
00006a  f8145c01          LDRB     r5,[r4,#-1]           ;57
00006e  b925              CBNZ     r5,|L1.122|
000070  4281              CMP      r1,r0                 ;57
000072  d902              BLS      |L1.122|
000074  f8047c01          STRB     r7,[r4,#-1]
000078  e005              B        |L1.134|
                  |L1.122|
;;;60     		}
;;;61     	else
;;;62     		{
;;;63     		dig[i-1]=dig[i-1]+0x30;
00007a  1854              ADDS     r4,r2,r1
00007c  f8145d01          LDRB     r5,[r4,#-1]!
000080  3530              ADDS     r5,r5,#0x30
000082  7025              STRB     r5,[r4,#0]
;;;64     		zero_on=0;
000084  701e              STRB     r6,[r3,#0]
                  |L1.134|
000086  1e49              SUBS     r1,r1,#1              ;55
000088  f01101ff          ANDS     r1,r1,#0xff           ;55
00008c  d1ea              BNE      |L1.100|
;;;65     		}	
;;;66     	}
;;;67     }             
00008e  bdf0              POP      {r4-r7,pc}
;;;68     
                          ENDP

                  int2lcd_m PROC
;;;69     //-----------------------------------------------
;;;70     void int2lcd_m(signed short in,char xy,char des)
000090  b570              PUSH     {r4-r6,lr}
;;;71     {
000092  460d              MOV      r5,r1
000094  4614              MOV      r4,r2
;;;72     char i;
;;;73     char n;
;;;74     char bMinus;
;;;75     bMinus=0;
;;;76     if(in<0)
000096  2800              CMP      r0,#0
000098  da02              BGE      |L1.160|
;;;77     	{
;;;78     	bMinus=1;
;;;79     	in=(~in+1);
00009a  43c0              MVNS     r0,r0
00009c  1c40              ADDS     r0,r0,#1
00009e  b200              SXTH     r0,r0
                  |L1.160|
;;;80     	}
;;;81     bin2bcd_int(in);
0000a0  f7fffffe          BL       bin2bcd_int
;;;82     bcd2lcd_zero(des+1);
0000a4  1c60              ADDS     r0,r4,#1
0000a6  b2c0              UXTB     r0,r0
0000a8  f7fffffe          BL       bcd2lcd_zero
;;;83     i=find(xy);
0000ac  4628              MOV      r0,r5
0000ae  f7fffffe          BL       find
;;;84     if(i!=255)
0000b2  28ff              CMP      r0,#0xff
0000b4  d019              BEQ      |L1.234|
;;;85     	{
;;;86     	for (n=0;n<5;n++)
;;;87     		{ 
;;;88     		if(n<des)
;;;89     			{
;;;90     			lcd_buffer[i]=dig[n];
0000b6  4ad4              LDR      r2,|L1.1032|
0000b8  4bd2              LDR      r3,|L1.1028|
0000ba  2100              MOVS     r1,#0                 ;86
                  |L1.188|
0000bc  42a1              CMP      r1,r4                 ;88
0000be  d201              BCS      |L1.196|
0000c0  5c55              LDRB     r5,[r2,r1]
0000c2  e013              B        |L1.236|
                  |L1.196|
;;;91     			} 
;;;92     		else if (n==des)
0000c4  d104              BNE      |L1.208|
;;;93        			{
;;;94        			lcd_buffer[i]='.';
0000c6  f04f052e          MOV      r5,#0x2e
0000ca  541d              STRB     r5,[r3,r0]
;;;95        			lcd_buffer[i-1]=dig[n];
0000cc  5c55              LDRB     r5,[r2,r1]
0000ce  e003              B        |L1.216|
                  |L1.208|
;;;96        			} 	  
;;;97     		else if((n>=des)&&(dig[n]!=0x20))
0000d0  5c55              LDRB     r5,[r2,r1]
0000d2  2d20              CMP      r5,#0x20
0000d4  d003              BEQ      |L1.222|
;;;98     			{
;;;99     			if(!des)lcd_buffer[i]=dig[n];	
0000d6  b14c              CBZ      r4,|L1.236|
                  |L1.216|
;;;100    			else lcd_buffer[i-1]=dig[n];
0000d8  181e              ADDS     r6,r3,r0
0000da  f8065c01          STRB     r5,[r6,#-1]
                  |L1.222|
;;;101       			}
;;;102       		else if((n>=des)&&(dig[n]!=0x20)&&(bMinus))
;;;103    	   		{
;;;104    			if(!des)lcd_buffer[i]='-';	
;;;105    			else lcd_buffer[i-1]='-';
;;;106    			n=5;
;;;107       			}	   
;;;108    		i--;	
0000de  1e40              SUBS     r0,r0,#1
0000e0  1c49              ADDS     r1,r1,#1              ;86
0000e2  b2c9              UXTB     r1,r1                 ;86
0000e4  b2c0              UXTB     r0,r0
0000e6  2905              CMP      r1,#5                 ;86
0000e8  d3e8              BCC      |L1.188|
                  |L1.234|
;;;109    		}
;;;110    	}
;;;111    }
0000ea  bd70              POP      {r4-r6,pc}
                  |L1.236|
0000ec  541d              STRB     r5,[r3,r0]            ;99
0000ee  e7f6              B        |L1.222|
;;;112    
                          ENDP

                  int2lcd_mm PROC
;;;113    //-----------------------------------------------
;;;114    void int2lcd_mm(signed short in,char xy,char des)
0000f0  b5f0              PUSH     {r4-r7,lr}
;;;115    {
0000f2  460d              MOV      r5,r1
0000f4  4614              MOV      r4,r2
;;;116    char i;
;;;117    char n;
;;;118    char minus='+';
;;;119    if(in<0)
0000f6  2800              CMP      r0,#0
0000f8  da01              BGE      |L1.254|
;;;120    	{
;;;121    	in=-in;
0000fa  4240              RSBS     r0,r0,#0
0000fc  b200              SXTH     r0,r0
                  |L1.254|
;;;122    	minus='-';
;;;123    	}
;;;124    minus='-';	
;;;125    bin2bcd_int(in);
0000fe  f7fffffe          BL       bin2bcd_int
;;;126    bcd2lcd_zero(des+1);
000102  1c60              ADDS     r0,r4,#1
000104  b2c0              UXTB     r0,r0
000106  f7fffffe          BL       bcd2lcd_zero
;;;127    i=find(xy);
00010a  4628              MOV      r0,r5
00010c  f7fffffe          BL       find
;;;128    for (n=0;n<5;n++)
;;;129    	{
;;;130       	if(!des&&(dig[n]!=' '))
000110  4abd              LDR      r2,|L1.1032|
;;;131       		{
;;;132       		if((dig[n+1]==' ')&&(minus=='-'))lcd_buffer[i-1]='-';
000112  4bbc              LDR      r3,|L1.1028|
000114  2100              MOVS     r1,#0                 ;128
                  |L1.278|
000116  b964              CBNZ     r4,|L1.306|
000118  5c55              LDRB     r5,[r2,r1]            ;130
00011a  2d20              CMP      r5,#0x20              ;130
00011c  d009              BEQ      |L1.306|
00011e  1856              ADDS     r6,r2,r1
000120  7876              LDRB     r6,[r6,#1]
000122  2e20              CMP      r6,#0x20
000124  d103              BNE      |L1.302|
000126  262d              MOVS     r6,#0x2d
000128  181f              ADDS     r7,r3,r0
00012a  f8076c01          STRB     r6,[r7,#-1]
                  |L1.302|
;;;133       		lcd_buffer[i]=dig[n];	 
00012e  541d              STRB     r5,[r3,r0]
000130  e00f              B        |L1.338|
                  |L1.306|
;;;134       		}
;;;135       	else 
;;;136       		{
;;;137       		if(n<des)lcd_buffer[i]=dig[n];
000132  42a1              CMP      r1,r4
000134  d201              BCS      |L1.314|
000136  5c55              LDRB     r5,[r2,r1]
000138  e7f9              B        |L1.302|
                  |L1.314|
;;;138       		else if (n==des)
00013a  d104              BNE      |L1.326|
;;;139       			{
;;;140       			lcd_buffer[i]='.';
00013c  f04f052e          MOV      r5,#0x2e
000140  541d              STRB     r5,[r3,r0]
;;;141       			lcd_buffer[i-1]=dig[n];
000142  5c55              LDRB     r5,[r2,r1]
000144  e002              B        |L1.332|
                  |L1.326|
;;;142       			} 
;;;143       		else if ((n>des)&&(dig[n]!=' ')) lcd_buffer[i-1]=dig[n]; 
000146  5c55              LDRB     r5,[r2,r1]
000148  2d20              CMP      r5,#0x20
00014a  d002              BEQ      |L1.338|
                  |L1.332|
00014c  181e              ADDS     r6,r3,r0
00014e  f8065c01          STRB     r5,[r6,#-1]
                  |L1.338|
;;;144       		else if ((minus=='-')&&(n>des)&&(dig[n]!=' ')&&(dig[n+1]==' ')) lcd_buffer[i]='-';  		
;;;145       		}  
;;;146    		
;;;147    	i--;	
000152  1e40              SUBS     r0,r0,#1
000154  1c49              ADDS     r1,r1,#1              ;128
000156  b2c9              UXTB     r1,r1                 ;128
000158  b2c0              UXTB     r0,r0
00015a  2905              CMP      r1,#5                 ;128
00015c  d3db              BCC      |L1.278|
;;;148    	}
;;;149    }
00015e  bdf0              POP      {r4-r7,pc}
;;;150    
                          ENDP

                  int2lcd_mmm PROC
;;;151    //-----------------------------------------------
;;;152    void int2lcd_mmm(signed short in,char xy,char des)
000160  b5fe              PUSH     {r1-r7,lr}
;;;153    {
;;;154    signed char i;
;;;155    char n;
;;;156    char s[10];
;;;157    char minus='+';
000162  232b              MOVS     r3,#0x2b
;;;158    char zero_on;
;;;159    char simb_num;
;;;160    
;;;161    if(in<0)
000164  2800              CMP      r0,#0
000166  da02              BGE      |L1.366|
;;;162    	{
;;;163    	in=-in;
000168  4240              RSBS     r0,r0,#0
00016a  b200              SXTH     r0,r0
;;;164    	minus='-';
00016c  232d              MOVS     r3,#0x2d
                  |L1.366|
;;;165    	}
;;;166    
;;;167    for(i=0;i<10;i++)
00016e  2500              MOVS     r5,#0
;;;168    	{
;;;169    	s[i]=in%10;
000170  260a              MOVS     r6,#0xa
000172  466c              MOV      r4,sp                 ;156
                  |L1.372|
000174  fb90f7f6          SDIV     r7,r0,r6
000178  fb060017          MLS      r0,r6,r7,r0
00017c  5560              STRB     r0,[r4,r5]
00017e  1c6d              ADDS     r5,r5,#1              ;167
000180  b26d              SXTB     r5,r5                 ;167
;;;170    	in/=10;
000182  b238              SXTH     r0,r7
000184  2d0a              CMP      r5,#0xa               ;167
000186  dbf5              BLT      |L1.372|
;;;171    	}   
;;;172    
;;;173    zero_on=1;
000188  2601              MOVS     r6,#1
;;;174    simb_num=0;
00018a  2500              MOVS     r5,#0
;;;175    
;;;176    for (i=9;i>=0;i--)
00018c  2009              MOVS     r0,#9
;;;177    	{
;;;178    	if(zero_on&&(!s[i])&&(i>(des)))
;;;179    	     {
;;;180    	     s[i]=0x20;
00018e  2720              MOVS     r7,#0x20
000190  e000              B        |L1.404|
                  |L1.402|
000192  b146              CBZ      r6,|L1.422|
                  |L1.404|
000194  f814c000          LDRB     r12,[r4,r0]           ;178
000198  f1bc0f00          CMP      r12,#0                ;178
00019c  d103              BNE      |L1.422|
00019e  4290              CMP      r0,r2                 ;178
0001a0  dd01              BLE      |L1.422|
0001a2  5427              STRB     r7,[r4,r0]
0001a4  e005              B        |L1.434|
                  |L1.422|
;;;181    	     }
;;;182    	else 
;;;183    	     {
;;;184    	     s[i]=s[i]+0x30;
0001a6  5c26              LDRB     r6,[r4,r0]
0001a8  3630              ADDS     r6,r6,#0x30
0001aa  5426              STRB     r6,[r4,r0]
;;;185    	     zero_on=0;
0001ac  2600              MOVS     r6,#0
;;;186    	     simb_num++;
0001ae  1c6d              ADDS     r5,r5,#1
0001b0  b2ed              UXTB     r5,r5
                  |L1.434|
0001b2  1e40              SUBS     r0,r0,#1              ;176
0001b4  b240              SXTB     r0,r0                 ;176
0001b6  2800              CMP      r0,#0                 ;176
0001b8  daeb              BGE      |L1.402|
;;;187    	     }
;;;188    	 }
;;;189    	          
;;;190    if(minus=='-')	
0001ba  2b2d              CMP      r3,#0x2d
0001bc  d102              BNE      |L1.452|
;;;191         {
;;;192         s[simb_num++]=minus; 
0001be  5563              STRB     r3,[r4,r5]
0001c0  1c6d              ADDS     r5,r5,#1
0001c2  b2ed              UXTB     r5,r5
                  |L1.452|
;;;193         }    
;;;194    if(des)
0001c4  b16a              CBZ      r2,|L1.482|
;;;195         {
;;;196         for(i=simb_num;i>des;i--)
0001c6  b268              SXTB     r0,r5
0001c8  e005              B        |L1.470|
                  |L1.458|
;;;197              {
;;;198              s[i]=s[i-1];
0001ca  1823              ADDS     r3,r4,r0
0001cc  f8133c01          LDRB     r3,[r3,#-1]
0001d0  5423              STRB     r3,[r4,r0]
0001d2  1e40              SUBS     r0,r0,#1              ;196
0001d4  b240              SXTB     r0,r0                 ;196
                  |L1.470|
0001d6  4290              CMP      r0,r2                 ;196
0001d8  dcf7              BGT      |L1.458|
;;;199              }
;;;200         s[des]='.';
0001da  202e              MOVS     r0,#0x2e
;;;201         simb_num++;     
0001dc  1c6d              ADDS     r5,r5,#1
0001de  54a0              STRB     r0,[r4,r2]            ;200
0001e0  b2ed              UXTB     r5,r5
                  |L1.482|
;;;202         }
;;;203    	
;;;204    n=find(xy);
0001e2  4608              MOV      r0,r1
0001e4  f7fffffe          BL       find
;;;205    for (i=0;i<simb_num;i++)
0001e8  2100              MOVS     r1,#0
;;;206    	{
;;;207         lcd_buffer[n-i]=s[i];
0001ea  4a86              LDR      r2,|L1.1028|
0001ec  e004              B        |L1.504|
                  |L1.494|
0001ee  5c63              LDRB     r3,[r4,r1]
0001f0  1a46              SUBS     r6,r0,r1
0001f2  1c49              ADDS     r1,r1,#1              ;205
0001f4  5593              STRB     r3,[r2,r6]
0001f6  b249              SXTB     r1,r1                 ;205
                  |L1.504|
0001f8  42a9              CMP      r1,r5                 ;205
0001fa  dbf8              BLT      |L1.494|
;;;208    	}
;;;209    }
0001fc  bdfe              POP      {r1-r7,pc}
;;;210    
                          ENDP

                  long2lcd_mmm PROC
;;;211    //-----------------------------------------------
;;;212    void long2lcd_mmm(signed long in,char xy,char des)
0001fe  b5fe              PUSH     {r1-r7,lr}
;;;213    {
;;;214    signed char i;
;;;215    char n;
;;;216    char s[10];
;;;217    char minus='+';
000200  232b              MOVS     r3,#0x2b
;;;218    char zero_on;
;;;219    char simb_num;
;;;220    
;;;221    if(in<0)
000202  2800              CMP      r0,#0
000204  da01              BGE      |L1.522|
;;;222    	{
;;;223    	in=-in;
000206  4240              RSBS     r0,r0,#0
;;;224    	minus='-';
000208  232d              MOVS     r3,#0x2d
                  |L1.522|
;;;225    	}
;;;226    
;;;227    for(i=0;i<10;i++)
00020a  2500              MOVS     r5,#0
;;;228    	{
;;;229    	s[i]=in%10;
00020c  260a              MOVS     r6,#0xa
00020e  466c              MOV      r4,sp                 ;216
                  |L1.528|
000210  4607              MOV      r7,r0
000212  fb90f0f6          SDIV     r0,r0,r6
000216  fb067710          MLS      r7,r6,r0,r7
00021a  5567              STRB     r7,[r4,r5]
00021c  1c6d              ADDS     r5,r5,#1              ;227
00021e  b26d              SXTB     r5,r5                 ;227
000220  2d0a              CMP      r5,#0xa               ;227
000222  dbf5              BLT      |L1.528|
;;;230    	in/=10;
;;;231    	}   
;;;232    
;;;233    zero_on=1;
000224  2601              MOVS     r6,#1
;;;234    simb_num=0;
000226  2500              MOVS     r5,#0
;;;235    
;;;236    for (i=9;i>=0;i--)
000228  2009              MOVS     r0,#9
;;;237    	{
;;;238    	if(zero_on&&(!s[i])&&(i>(des)))
;;;239    	     {
;;;240    	     s[i]=0x20;
00022a  2720              MOVS     r7,#0x20
00022c  e000              B        |L1.560|
                  |L1.558|
00022e  b146              CBZ      r6,|L1.578|
                  |L1.560|
000230  f814c000          LDRB     r12,[r4,r0]           ;238
000234  f1bc0f00          CMP      r12,#0                ;238
000238  d103              BNE      |L1.578|
00023a  4290              CMP      r0,r2                 ;238
00023c  dd01              BLE      |L1.578|
00023e  5427              STRB     r7,[r4,r0]
000240  e005              B        |L1.590|
                  |L1.578|
;;;241    	     }
;;;242    	else 
;;;243    	     {
;;;244    	     s[i]=s[i]+0x30;
000242  5c26              LDRB     r6,[r4,r0]
000244  3630              ADDS     r6,r6,#0x30
000246  5426              STRB     r6,[r4,r0]
;;;245    	     zero_on=0;
000248  2600              MOVS     r6,#0
;;;246    	     simb_num++;
00024a  1c6d              ADDS     r5,r5,#1
00024c  b2ed              UXTB     r5,r5
                  |L1.590|
00024e  1e40              SUBS     r0,r0,#1              ;236
000250  b240              SXTB     r0,r0                 ;236
000252  2800              CMP      r0,#0                 ;236
000254  daeb              BGE      |L1.558|
;;;247    	     }
;;;248    	 }
;;;249    	          
;;;250    if(minus=='-')	
000256  2b2d              CMP      r3,#0x2d
000258  d102              BNE      |L1.608|
;;;251         {
;;;252         s[simb_num++]=minus; 
00025a  5563              STRB     r3,[r4,r5]
00025c  1c6d              ADDS     r5,r5,#1
00025e  b2ed              UXTB     r5,r5
                  |L1.608|
;;;253         }    
;;;254    if(des)
000260  b16a              CBZ      r2,|L1.638|
;;;255         {
;;;256         for(i=simb_num;i>des;i--)
000262  b268              SXTB     r0,r5
000264  e005              B        |L1.626|
                  |L1.614|
;;;257              {
;;;258              s[i]=s[i-1];
000266  1823              ADDS     r3,r4,r0
000268  f8133c01          LDRB     r3,[r3,#-1]
00026c  5423              STRB     r3,[r4,r0]
00026e  1e40              SUBS     r0,r0,#1              ;256
000270  b240              SXTB     r0,r0                 ;256
                  |L1.626|
000272  4290              CMP      r0,r2                 ;256
000274  dcf7              BGT      |L1.614|
;;;259              }
;;;260         s[des]='.';
000276  202e              MOVS     r0,#0x2e
;;;261         simb_num++;     
000278  1c6d              ADDS     r5,r5,#1
00027a  54a0              STRB     r0,[r4,r2]            ;260
00027c  b2ed              UXTB     r5,r5
                  |L1.638|
;;;262         }
;;;263    	
;;;264    n=find(xy);
00027e  4608              MOV      r0,r1
000280  f7fffffe          BL       find
;;;265    for (i=0;i<simb_num;i++)
000284  2100              MOVS     r1,#0
;;;266    	{
;;;267         lcd_buffer[n-i]=s[i];
000286  4a5f              LDR      r2,|L1.1028|
000288  e004              B        |L1.660|
                  |L1.650|
00028a  5c63              LDRB     r3,[r4,r1]
00028c  1a46              SUBS     r6,r0,r1
00028e  1c49              ADDS     r1,r1,#1              ;265
000290  5593              STRB     r3,[r2,r6]
000292  b249              SXTB     r1,r1                 ;265
                  |L1.660|
000294  42a9              CMP      r1,r5                 ;265
000296  dbf8              BLT      |L1.650|
;;;268    	}
;;;269    }
000298  bdfe              POP      {r1-r7,pc}
;;;270    
                          ENDP

                  long2lcdyx_mmm PROC
;;;271    //-----------------------------------------------
;;;272    void long2lcdyx_mmm(signed long in,char y,char x,char des)
00029a  b5fe              PUSH     {r1-r7,lr}
;;;273    {
;;;274    signed char i;
;;;275    char n;
;;;276    char s[10];
;;;277    char minus='+';
00029c  262b              MOVS     r6,#0x2b
;;;278    char zero_on;
;;;279    char simb_num;
;;;280    
;;;281    if(in<0)
00029e  2800              CMP      r0,#0
0002a0  da01              BGE      |L1.678|
;;;282    	{
;;;283    	in=-in;
0002a2  4240              RSBS     r0,r0,#0
;;;284    	minus='-';
0002a4  262d              MOVS     r6,#0x2d
                  |L1.678|
;;;285    	}
;;;286    
;;;287    for(i=0;i<10;i++)
0002a6  2400              MOVS     r4,#0
;;;288    	{
;;;289    	s[i]=in%10;
0002a8  270a              MOVS     r7,#0xa
0002aa  466d              MOV      r5,sp                 ;276
                  |L1.684|
0002ac  4684              MOV      r12,r0
0002ae  fb90f0f7          SDIV     r0,r0,r7
0002b2  fb07cc10          MLS      r12,r7,r0,r12
0002b6  f805c004          STRB     r12,[r5,r4]
0002ba  1c64              ADDS     r4,r4,#1              ;287
0002bc  b264              SXTB     r4,r4                 ;287
0002be  2c0a              CMP      r4,#0xa               ;287
0002c0  dbf4              BLT      |L1.684|
;;;290    	in/=10;
;;;291    	}   
;;;292    
;;;293    zero_on=1;
0002c2  2701              MOVS     r7,#1
;;;294    simb_num=0;
0002c4  2000              MOVS     r0,#0
;;;295    
;;;296    for (i=9;i>=0;i--)
0002c6  2409              MOVS     r4,#9
;;;297    	{
;;;298    	if(zero_on&&(!s[i])&&(i>(des)))
;;;299    	     {
;;;300    	     s[i]=0x20;
0002c8  f04f0c20          MOV      r12,#0x20
0002cc  e000              B        |L1.720|
                  |L1.718|
0002ce  b14f              CBZ      r7,|L1.740|
                  |L1.720|
0002d0  f815e004          LDRB     lr,[r5,r4]            ;298
0002d4  f1be0f00          CMP      lr,#0                 ;298
0002d8  d104              BNE      |L1.740|
0002da  429c              CMP      r4,r3                 ;298
0002dc  dd02              BLE      |L1.740|
0002de  f805c004          STRB     r12,[r5,r4]
0002e2  e005              B        |L1.752|
                  |L1.740|
;;;301    	     }
;;;302    	else 
;;;303    	     {
;;;304    	     s[i]=s[i]+0x30;
0002e4  5d2f              LDRB     r7,[r5,r4]
0002e6  3730              ADDS     r7,r7,#0x30
0002e8  552f              STRB     r7,[r5,r4]
;;;305    	     zero_on=0;
0002ea  2700              MOVS     r7,#0
;;;306    	     simb_num++;
0002ec  1c40              ADDS     r0,r0,#1
0002ee  b2c0              UXTB     r0,r0
                  |L1.752|
0002f0  1e64              SUBS     r4,r4,#1              ;296
0002f2  b264              SXTB     r4,r4                 ;296
0002f4  2c00              CMP      r4,#0                 ;296
0002f6  daea              BGE      |L1.718|
;;;307    	     }
;;;308    	 }
;;;309    	          
;;;310    if(minus=='-')	
0002f8  2e2d              CMP      r6,#0x2d
0002fa  d102              BNE      |L1.770|
;;;311         {
;;;312         s[simb_num++]=minus; 
0002fc  542e              STRB     r6,[r5,r0]
0002fe  1c40              ADDS     r0,r0,#1
000300  b2c0              UXTB     r0,r0
                  |L1.770|
;;;313         }    
;;;314    if(des)
000302  b16b              CBZ      r3,|L1.800|
;;;315         {
;;;316         for(i=simb_num;i>des;i--)
000304  b244              SXTB     r4,r0
000306  e005              B        |L1.788|
                  |L1.776|
;;;317              {
;;;318              s[i]=s[i-1];
000308  192e              ADDS     r6,r5,r4
00030a  f8166c01          LDRB     r6,[r6,#-1]
00030e  552e              STRB     r6,[r5,r4]
000310  1e64              SUBS     r4,r4,#1              ;316
000312  b264              SXTB     r4,r4                 ;316
                  |L1.788|
000314  429c              CMP      r4,r3                 ;316
000316  dcf7              BGT      |L1.776|
;;;319              }
;;;320         s[des]='.';
000318  242e              MOVS     r4,#0x2e
;;;321         simb_num++;     
00031a  1c40              ADDS     r0,r0,#1
00031c  54ec              STRB     r4,[r5,r3]            ;320
00031e  b2c0              UXTB     r0,r0
                  |L1.800|
;;;322         }
;;;323    	
;;;324    n=(20*y)+x;
000320  eb010181          ADD      r1,r1,r1,LSL #2
000324  eb020181          ADD      r1,r2,r1,LSL #2
000328  b2ca              UXTB     r2,r1
;;;325    for (i=0;i<simb_num;i++)
00032a  2100              MOVS     r1,#0
;;;326    	{
;;;327         lcd_buffer[n-i]=s[i];
00032c  4b35              LDR      r3,|L1.1028|
00032e  e004              B        |L1.826|
                  |L1.816|
000330  5c6c              LDRB     r4,[r5,r1]
000332  1a56              SUBS     r6,r2,r1
000334  1c49              ADDS     r1,r1,#1              ;325
000336  559c              STRB     r4,[r3,r6]
000338  b249              SXTB     r1,r1                 ;325
                  |L1.826|
00033a  4281              CMP      r1,r0                 ;325
00033c  dbf8              BLT      |L1.816|
;;;328    	}
;;;329    
;;;330    
;;;331    
;;;332    }
00033e  bdfe              POP      {r1-r7,pc}
;;;333    
                          ENDP

                  int2lcdyx PROC
;;;334    //-----------------------------------------------
;;;335    void int2lcdyx(unsigned short in,char y,char x,char des)
000340  b570              PUSH     {r4-r6,lr}
;;;336    {
000342  460d              MOV      r5,r1
000344  4616              MOV      r6,r2
000346  461c              MOV      r4,r3
;;;337    char i;
;;;338    char n;
;;;339    bin2bcd_int(in);
000348  f7fffffe          BL       bin2bcd_int
;;;340    bcd2lcd_zero(des+1);
00034c  1c60              ADDS     r0,r4,#1
00034e  b2c0              UXTB     r0,r0
000350  f7fffffe          BL       bcd2lcd_zero
;;;341    i=(y*20)+x;
000354  eb050085          ADD      r0,r5,r5,LSL #2
000358  eb060080          ADD      r0,r6,r0,LSL #2
00035c  b2c1              UXTB     r1,r0
;;;342    for (n=0;n<5;n++)
;;;343    	{ 
;;;344    	if(n<des)
;;;345    		{
;;;346    		lcd_buffer[i]=dig[n];
00035e  4a2a              LDR      r2,|L1.1032|
000360  4b28              LDR      r3,|L1.1028|
000362  2000              MOVS     r0,#0                 ;342
                  |L1.868|
000364  42a0              CMP      r0,r4                 ;344
000366  d201              BCS      |L1.876|
000368  5c15              LDRB     r5,[r2,r0]
00036a  545d              STRB     r5,[r3,r1]
                  |L1.876|
;;;347    		}   
;;;348    	if((n>=des)&&(dig[n]!=0x20))
00036c  d306              BCC      |L1.892|
00036e  5c15              LDRB     r5,[r2,r0]
000370  2d20              CMP      r5,#0x20
000372  d003              BEQ      |L1.892|
;;;349    		{
;;;350    		if(!des)lcd_buffer[i]=dig[n];	
000374  b14c              CBZ      r4,|L1.906|
;;;351    		else lcd_buffer[i-1]=dig[n];
000376  185e              ADDS     r6,r3,r1
000378  f8065c01          STRB     r5,[r6,#-1]
                  |L1.892|
;;;352       		}   
;;;353    	i--;	
00037c  1e49              SUBS     r1,r1,#1
00037e  1c40              ADDS     r0,r0,#1              ;342
000380  b2c0              UXTB     r0,r0                 ;342
000382  b2c9              UXTB     r1,r1
000384  2805              CMP      r0,#5                 ;342
000386  d3ed              BCC      |L1.868|
;;;354    	}
;;;355    }
000388  bd70              POP      {r4-r6,pc}
                  |L1.906|
00038a  545d              STRB     r5,[r3,r1]            ;350
00038c  e7f6              B        |L1.892|
;;;356    
                          ENDP

                  event2ind PROC
;;;358    //-----------------------------------------------
;;;359    void event2ind(char num, char simbol)
00038e  4770              BX       lr
;;;360    {
;;;361    
;;;362    }	
;;;363    
                          ENDP

                  community2lcd PROC
;;;364    //-----------------------------------------------
;;;365    void community2lcd(char* in,
000390  b570              PUSH     {r4-r6,lr}
;;;366    			char xy,
;;;367    			char flash_pos,
;;;368    			char flash_on)
;;;369    {
000392  4604              MOV      r4,r0
000394  4608              MOV      r0,r1
000396  4615              MOV      r5,r2
000398  461e              MOV      r6,r3
;;;370    char temp;
;;;371    char i;
;;;372    //char n;
;;;373    
;;;374    
;;;375    i=find(xy);
00039a  f7fffffe          BL       find
;;;376    
;;;377    //in1=192;
;;;378    
;;;379    //in2=34;
;;;380    
;;;381    
;;;382    
;;;383    temp=i;
;;;384    
;;;385    //ptr_ram=&lcd_buffer[find(xy)];
;;;386    if(temp!=255)
;;;387    while (*in)
;;;388    	{
;;;389    	lcd_buffer[temp]=*in++;
00039e  4b19              LDR      r3,|L1.1028|
0003a0  4601              MOV      r1,r0                 ;375
0003a2  28ff              CMP      r0,#0xff              ;386
0003a4  d104              BNE      |L1.944|
0003a6  e006              B        |L1.950|
                  |L1.936|
0003a8  541a              STRB     r2,[r3,r0]
0003aa  1c64              ADDS     r4,r4,#1
;;;390    	temp++;
0003ac  1c40              ADDS     r0,r0,#1
0003ae  b2c0              UXTB     r0,r0
                  |L1.944|
0003b0  7822              LDRB     r2,[r4,#0]            ;387
0003b2  2a00              CMP      r2,#0                 ;387
0003b4  d1f8              BNE      |L1.936|
                  |L1.950|
;;;391        	}
;;;392    
;;;393    
;;;394    
;;;395    if((bFL2)&&(flash_on))
0003b6  4816              LDR      r0,|L1.1040|
0003b8  7800              LDRB     r0,[r0,#0]  ; bFL2
0003ba  2800              CMP      r0,#0
0003bc  d004              BEQ      |L1.968|
0003be  2e00              CMP      r6,#0
0003c0  d002              BEQ      |L1.968|
;;;396    	{
;;;397    	lcd_buffer[i+flash_pos]=95;
0003c2  4429              ADD      r1,r1,r5
0003c4  205f              MOVS     r0,#0x5f
0003c6  5458              STRB     r0,[r3,r1]
                  |L1.968|
;;;398    	}
;;;399    
;;;400    }
0003c8  bd70              POP      {r4-r6,pc}
;;;401    
                          ENDP

                  ip2lcd PROC
;;;402    //-----------------------------------------------
;;;403    void ip2lcd(	short in1,
0003ca  e92d4fff          PUSH     {r0-r11,lr}
;;;404    			short in2,
;;;405    			short in3,
;;;406    			short in4,
;;;407    			char xy,
;;;408    			char flash_pos)
;;;409    {
0003ce  4681              MOV      r9,r0
0003d0  e9dd040d          LDRD     r0,r4,[sp,#0x34]
0003d4  468a              MOV      r10,r1
0003d6  4693              MOV      r11,r2
;;;410    char i;
;;;411    //char n;
;;;412    
;;;413    //bin2bcd_int(in);
;;;414    //bcd2lcd_zero(des+1);
;;;415    i=find(xy);
0003d8  f7fffffe          BL       find
;;;416    
;;;417    //in1=192;
;;;418    
;;;419    //in2=34;
;;;420    
;;;421    if((flash_pos==1)&&(bFL2))
;;;422    	{
;;;423    	lcd_buffer[i-12]=' ';
0003dc  2220              MOVS     r2,#0x20
0003de  f8df8030          LDR      r8,|L1.1040|
0003e2  4908              LDR      r1,|L1.1028|
;;;424    	lcd_buffer[i-13]=' ';
;;;425    	lcd_buffer[i-14]=' ';
;;;426    	}
;;;427    else 
;;;428    	{
;;;429    	lcd_buffer[i-12]=0x30+(in1%10);
0003e4  230a              MOVS     r3,#0xa
;;;430    	lcd_buffer[i-13]=0x30+(in1/10)%10;
;;;431    	lcd_buffer[i-14]=0x30+(in1/100);
0003e6  f04f0c64          MOV      r12,#0x64
0003ea  2c01              CMP      r4,#1                 ;421
0003ec  d112              BNE      |L1.1044|
0003ee  f8985000          LDRB     r5,[r8,#0]            ;421  ; bFL2
0003f2  b17d              CBZ      r5,|L1.1044|
0003f4  180d              ADDS     r5,r1,r0              ;423
0003f6  f1a5050e          SUB      r5,r5,#0xe            ;423
0003fa  70aa              STRB     r2,[r5,#2]            ;423
0003fc  706a              STRB     r2,[r5,#1]            ;424
0003fe  702a              STRB     r2,[r5,#0]            ;425
000400  e029              B        |L1.1110|
000402  0000              DCW      0x0000
                  |L1.1028|
                          DCD      lcd_buffer
                  |L1.1032|
                          DCD      ||dig||
                  |L1.1036|
                          DCD      zero_on
                  |L1.1040|
                          DCD      bFL2
                  |L1.1044|
000414  fb99f6f3          SDIV     r6,r9,r3              ;429
000418  fb039716          MLS      r7,r3,r6,r9           ;429
00041c  180d              ADDS     r5,r1,r0              ;429
00041e  3730              ADDS     r7,r7,#0x30           ;429
000420  f1a5050e          SUB      r5,r5,#0xe            ;429
;;;432    	}
;;;433    
;;;434    if((flash_pos==2)&&(bFL2))
000424  2c02              CMP      r4,#2
000426  70af              STRB     r7,[r5,#2]            ;429
000428  fb96f7f3          SDIV     r7,r6,r3              ;430
00042c  fb036617          MLS      r6,r3,r7,r6           ;430
000430  f1060630          ADD      r6,r6,#0x30           ;430
000434  706e              STRB     r6,[r5,#1]            ;430
000436  fb99f6fc          SDIV     r6,r9,r12             ;431
00043a  f1060630          ADD      r6,r6,#0x30           ;431
00043e  f8056b0e          STRB     r6,[r5],#0xe          ;431
000442  d108              BNE      |L1.1110|
000444  f8986000          LDRB     r6,[r8,#0]  ; bFL2
000448  b12e              CBZ      r6,|L1.1110|
00044a  f1a5050a          SUB      r5,r5,#0xa
;;;435    	{
;;;436    	lcd_buffer[i-8]=' ';
00044e  70aa              STRB     r2,[r5,#2]
;;;437    	lcd_buffer[i-9]=' ';
000450  706a              STRB     r2,[r5,#1]
;;;438    	lcd_buffer[i-10]=' ';
000452  702a              STRB     r2,[r5,#0]
000454  e021              B        |L1.1178|
                  |L1.1110|
;;;439    	}
;;;440    else 
;;;441    	{
;;;442    	lcd_buffer[i-8]=0x30+(in2%10);
000456  fb9af6f3          SDIV     r6,r10,r3
00045a  fb03a716          MLS      r7,r3,r6,r10
00045e  180d              ADDS     r5,r1,r0
000460  3730              ADDS     r7,r7,#0x30
000462  f1a5050a          SUB      r5,r5,#0xa
;;;443    	lcd_buffer[i-9]=0x30+(in2/10)%10;
;;;444    	lcd_buffer[i-10]=0x30+(in2/100);
;;;445    	}
;;;446    
;;;447    if((flash_pos==3)&&(bFL2))
000466  2c03              CMP      r4,#3
000468  70af              STRB     r7,[r5,#2]            ;442
00046a  fb96f7f3          SDIV     r7,r6,r3              ;443
00046e  fb036617          MLS      r6,r3,r7,r6           ;443
000472  f1060630          ADD      r6,r6,#0x30           ;443
000476  706e              STRB     r6,[r5,#1]            ;443
000478  fb9af6fc          SDIV     r6,r10,r12            ;444
00047c  f1060630          ADD      r6,r6,#0x30           ;444
000480  4667              MOV      r7,r12                ;444
000482  f8056b0a          STRB     r6,[r5],#0xa          ;444
000486  d108              BNE      |L1.1178|
000488  f8986000          LDRB     r6,[r8,#0]  ; bFL2
00048c  b12e              CBZ      r6,|L1.1178|
00048e  f1a50506          SUB      r5,r5,#6
;;;448    	{
;;;449    	lcd_buffer[i-4]=' ';
000492  70aa              STRB     r2,[r5,#2]
;;;450    	lcd_buffer[i-5]=' ';
000494  706a              STRB     r2,[r5,#1]
;;;451    	lcd_buffer[i-6]=' ';
000496  702a              STRB     r2,[r5,#0]
000498  e022              B        |L1.1248|
                  |L1.1178|
;;;452    	}
;;;453    else 
;;;454    	{
;;;455    	lcd_buffer[i-4]=0x30+in3%10;
00049a  fb9bf6f3          SDIV     r6,r11,r3
00049e  fb03b716          MLS      r7,r3,r6,r11
0004a2  180d              ADDS     r5,r1,r0
0004a4  3730              ADDS     r7,r7,#0x30
0004a6  f1a50506          SUB      r5,r5,#6
;;;456    	lcd_buffer[i-5]=0x30+(in3/10)%10;
;;;457    	lcd_buffer[i-6]=0x30+(in3/100);
;;;458    	}
;;;459    
;;;460    if((flash_pos==4)&&(bFL2))
0004aa  2c04              CMP      r4,#4
0004ac  70af              STRB     r7,[r5,#2]            ;455
0004ae  fb96f7f3          SDIV     r7,r6,r3              ;456
0004b2  fb036617          MLS      r6,r3,r7,r6           ;456
0004b6  f1060630          ADD      r6,r6,#0x30           ;456
0004ba  706e              STRB     r6,[r5,#1]            ;456
0004bc  fb9bf6fc          SDIV     r6,r11,r12            ;457
0004c0  f1060630          ADD      r6,r6,#0x30           ;457
0004c4  4667              MOV      r7,r12                ;457
0004c6  f8056b06          STRB     r6,[r5],#6            ;457
0004ca  d109              BNE      |L1.1248|
0004cc  f8984000          LDRB     r4,[r8,#0]  ; bFL2
0004d0  b134              CBZ      r4,|L1.1248|
;;;461    	{
;;;462    	lcd_buffer[i]=' ';
0004d2  f1a50502          SUB      r5,r5,#2
0004d6  540a              STRB     r2,[r1,r0]
;;;463    	lcd_buffer[i-1]=' ';
0004d8  706a              STRB     r2,[r5,#1]
;;;464    	lcd_buffer[i-2]=' ';
0004da  702a              STRB     r2,[r5,#0]
                  |L1.1244|
;;;465    	}
;;;466    else 
;;;467    	{
;;;468    	lcd_buffer[i]=0x30+in4%10;
;;;469    	lcd_buffer[i-1]=0x30+(in4/10)%10;
;;;470    	lcd_buffer[i-2]=0x30+(in4/100);
;;;471    	}
;;;472    }
0004dc  e8bd8fff          POP      {r0-r11,pc}
                  |L1.1248|
0004e0  9c03              LDR      r4,[sp,#0xc]          ;468
0004e2  fb94f2f3          SDIV     r2,r4,r3              ;468
0004e6  fb034412          MLS      r4,r3,r2,r4           ;468
0004ea  3430              ADDS     r4,r4,#0x30           ;468
0004ec  540c              STRB     r4,[r1,r0]            ;468
0004ee  fb92f4f3          SDIV     r4,r2,r3              ;469
0004f2  fb032214          MLS      r2,r3,r4,r2           ;469
0004f6  4408              ADD      r0,r0,r1              ;469
0004f8  f1a00002          SUB      r0,r0,#2              ;469
0004fc  3230              ADDS     r2,r2,#0x30           ;469
0004fe  7042              STRB     r2,[r0,#1]            ;469
000500  9903              LDR      r1,[sp,#0xc]          ;470
000502  fb91f1f7          SDIV     r1,r1,r7              ;470
000506  f1010130          ADD      r1,r1,#0x30           ;470
00050a  7001              STRB     r1,[r0,#0]            ;470
00050c  e7e6              B        |L1.1244|
;;;473    
                          ENDP

                  int2lcd PROC
;;;474    //-----------------------------------------------
;;;475    void int2lcd(unsigned short in,char xy,char des)
00050e  b570              PUSH     {r4-r6,lr}
;;;476    {
000510  460d              MOV      r5,r1
000512  4614              MOV      r4,r2
;;;477    char i;
;;;478    char n;
;;;479    
;;;480    bin2bcd_int(in);
000514  f7fffffe          BL       bin2bcd_int
;;;481    bcd2lcd_zero(des+1);
000518  1c60              ADDS     r0,r4,#1
00051a  b2c0              UXTB     r0,r0
00051c  f7fffffe          BL       bcd2lcd_zero
;;;482    i=find(xy);
000520  4628              MOV      r0,r5
000522  f7fffffe          BL       find
;;;483    for (n=0;n<5;n++)
;;;484    	{
;;;485       	if(!des&&(dig[n]!=' '))
000526  4bff              LDR      r3,|L1.2340|
;;;486       		{
;;;487       		lcd_buffer[i]=dig[n];	 
000528  4aff              LDR      r2,|L1.2344|
00052a  2100              MOVS     r1,#0                 ;483
                  |L1.1324|
00052c  b924              CBNZ     r4,|L1.1336|
00052e  5c5d              LDRB     r5,[r3,r1]            ;485
000530  2d20              CMP      r5,#0x20              ;485
000532  d001              BEQ      |L1.1336|
                  |L1.1332|
000534  5415              STRB     r5,[r2,r0]
000536  e00f              B        |L1.1368|
                  |L1.1336|
;;;488       		}
;;;489       	else 
;;;490       		{
;;;491       		if(n<des)lcd_buffer[i]=dig[n];
000538  42a1              CMP      r1,r4
00053a  d201              BCS      |L1.1344|
00053c  5c5d              LDRB     r5,[r3,r1]
00053e  e7f9              B        |L1.1332|
                  |L1.1344|
;;;492       		else if (n==des)
000540  d104              BNE      |L1.1356|
;;;493       			{
;;;494       			lcd_buffer[i]='.';
000542  f04f052e          MOV      r5,#0x2e
000546  5415              STRB     r5,[r2,r0]
;;;495       			lcd_buffer[i-1]=dig[n];
000548  5c5d              LDRB     r5,[r3,r1]
00054a  e002              B        |L1.1362|
                  |L1.1356|
;;;496       			} 
;;;497       		else if ((n>des)&&(dig[n]!=' ')) lcd_buffer[i-1]=dig[n];   		
00054c  5c5d              LDRB     r5,[r3,r1]
00054e  2d20              CMP      r5,#0x20
000550  d002              BEQ      |L1.1368|
                  |L1.1362|
000552  1816              ADDS     r6,r2,r0
000554  f8065c01          STRB     r5,[r6,#-1]
                  |L1.1368|
;;;498       		}  
;;;499    		
;;;500    	i--;	
000558  1e40              SUBS     r0,r0,#1
00055a  1c49              ADDS     r1,r1,#1              ;483
00055c  b2c9              UXTB     r1,r1                 ;483
00055e  b2c0              UXTB     r0,r0
000560  2905              CMP      r1,#5                 ;483
000562  d3e3              BCC      |L1.1324|
;;;501    	}
;;;502    }
000564  bd70              POP      {r4-r6,pc}
;;;503    
                          ENDP

                  long2lcdhyx PROC
;;;504    //-----------------------------------------------
;;;505    void long2lcdhyx(unsigned long in,char y,char x)
000566  b517              PUSH     {r0-r2,r4,lr}
;;;506    {
;;;507    char i;
;;;508    char n;
;;;509    
;;;510    i=(20*y)+x;
000568  eb010081          ADD      r0,r1,r1,LSL #2
00056c  eb020080          ADD      r0,r2,r0,LSL #2
000570  b2c2              UXTB     r2,r0
;;;511    
;;;512    n=*((char*)&in);
000572  f89d3000          LDRB     r3,[sp,#0]
;;;513    lcd_buffer[i]=ABCDEF[n%16];
000576  48ed              LDR      r0,|L1.2348|
000578  f003010f          AND      r1,r3,#0xf
;;;514    i--;
;;;515    lcd_buffer[i]=ABCDEF[n/16];
00057c  eb001313          ADD      r3,r0,r3,LSR #4
000580  5c44              LDRB     r4,[r0,r1]            ;513
000582  49e9              LDR      r1,|L1.2344|
000584  548c              STRB     r4,[r1,r2]            ;513
000586  1e52              SUBS     r2,r2,#1              ;514
000588  b2d2              UXTB     r2,r2                 ;514
00058a  781b              LDRB     r3,[r3,#0]
00058c  548b              STRB     r3,[r1,r2]
;;;516    i--;
;;;517    
;;;518    n=*(((char*)&in)+1);
00058e  f89d3001          LDRB     r3,[sp,#1]
000592  1e52              SUBS     r2,r2,#1              ;516
;;;519    lcd_buffer[i]=ABCDEF[n%16];
000594  f003040f          AND      r4,r3,#0xf
000598  b2d2              UXTB     r2,r2                 ;516
00059a  5d04              LDRB     r4,[r0,r4]
00059c  548c              STRB     r4,[r1,r2]
;;;520    i--;
00059e  1e52              SUBS     r2,r2,#1
;;;521    lcd_buffer[i]=ABCDEF[n/16];
0005a0  eb001313          ADD      r3,r0,r3,LSR #4
0005a4  b2d2              UXTB     r2,r2                 ;520
0005a6  781b              LDRB     r3,[r3,#0]
0005a8  548b              STRB     r3,[r1,r2]
;;;522    i--;
;;;523    
;;;524    n=*(((char*)&in)+2);
0005aa  f89d3002          LDRB     r3,[sp,#2]
0005ae  1e52              SUBS     r2,r2,#1              ;522
;;;525    lcd_buffer[i]=ABCDEF[n%16];
0005b0  f003040f          AND      r4,r3,#0xf
0005b4  b2d2              UXTB     r2,r2                 ;522
0005b6  5d04              LDRB     r4,[r0,r4]
0005b8  548c              STRB     r4,[r1,r2]
;;;526    i--;
0005ba  1e52              SUBS     r2,r2,#1
;;;527    lcd_buffer[i]=ABCDEF[n/16];
0005bc  eb001313          ADD      r3,r0,r3,LSR #4
0005c0  b2d2              UXTB     r2,r2                 ;526
0005c2  781b              LDRB     r3,[r3,#0]
0005c4  548b              STRB     r3,[r1,r2]
;;;528    i--;
;;;529    
;;;530    n=*(((char*)&in)+3);
0005c6  f89d3003          LDRB     r3,[sp,#3]
0005ca  1e52              SUBS     r2,r2,#1              ;528
;;;531    lcd_buffer[i]=ABCDEF[n%16];
0005cc  f003040f          AND      r4,r3,#0xf
0005d0  b2d2              UXTB     r2,r2                 ;528
0005d2  5d04              LDRB     r4,[r0,r4]
0005d4  548c              STRB     r4,[r1,r2]
;;;532    i--;
0005d6  1e52              SUBS     r2,r2,#1
;;;533    lcd_buffer[i]=ABCDEF[n/16];
0005d8  eb001013          ADD      r0,r0,r3,LSR #4
0005dc  b2d2              UXTB     r2,r2                 ;532
0005de  7800              LDRB     r0,[r0,#0]
0005e0  5488              STRB     r0,[r1,r2]
;;;534    i--;
;;;535    }
0005e2  bd1e              POP      {r1-r4,pc}
;;;536    
                          ENDP

                  char2lcdh PROC
;;;537    //-----------------------------------------------
;;;538    void char2lcdh(char in,char yx)
0005e4  b510              PUSH     {r4,lr}
;;;539    {
0005e6  4604              MOV      r4,r0
0005e8  4608              MOV      r0,r1
;;;540    char i;
;;;541    
;;;542    i=find(yx);
0005ea  f7fffffe          BL       find
;;;543    
;;;544    lcd_buffer[i]=ABCDEF[in%16];
0005ee  49cf              LDR      r1,|L1.2348|
0005f0  f004020f          AND      r2,r4,#0xf
0005f4  5c8b              LDRB     r3,[r1,r2]
0005f6  4acc              LDR      r2,|L1.2344|
;;;545    i--;
;;;546    lcd_buffer[i]=ABCDEF[in/16];
0005f8  eb011114          ADD      r1,r1,r4,LSR #4
0005fc  5413              STRB     r3,[r2,r0]            ;544
0005fe  1e40              SUBS     r0,r0,#1              ;545
000600  b2c0              UXTB     r0,r0                 ;545
000602  7809              LDRB     r1,[r1,#0]
000604  5411              STRB     r1,[r2,r0]
;;;547    i--;
;;;548    }
000606  bd10              POP      {r4,pc}
;;;549    
                          ENDP

                  char2lcdhyx PROC
;;;550    //-----------------------------------------------
;;;551    void char2lcdhyx(char in,char y,char x)
000608  eb010181          ADD      r1,r1,r1,LSL #2
;;;552    {
;;;553    char i;
;;;554    
;;;555    i=(20*y)+x;
00060c  eb020181          ADD      r1,r2,r1,LSL #2
;;;556    
;;;557    lcd_buffer[i]=ABCDEF[in%16];
000610  4ac6              LDR      r2,|L1.2348|
000612  b510              PUSH     {r4,lr}               ;552
000614  f000030f          AND      r3,r0,#0xf
000618  b2c9              UXTB     r1,r1                 ;555
00061a  5cd4              LDRB     r4,[r2,r3]
00061c  4bc2              LDR      r3,|L1.2344|
;;;558    i--;
;;;559    lcd_buffer[i]=ABCDEF[in/16];
00061e  eb021010          ADD      r0,r2,r0,LSR #4
000622  545c              STRB     r4,[r3,r1]            ;557
000624  1e49              SUBS     r1,r1,#1              ;558
000626  b2c9              UXTB     r1,r1                 ;558
000628  7800              LDRB     r0,[r0,#0]
00062a  5458              STRB     r0,[r3,r1]
;;;560    i--;
;;;561    }
00062c  bd10              POP      {r4,pc}
;;;562    
                          ENDP

                  int2lcdhyx PROC
;;;563    //-----------------------------------------------
;;;564    void int2lcdhyx(unsigned short in,char y,char x)
00062e  eb010181          ADD      r1,r1,r1,LSL #2
;;;565    {
;;;566    char i;
;;;567    
;;;568    i=(20*y)+x;
000632  eb020181          ADD      r1,r2,r1,LSL #2
000636  b2cb              UXTB     r3,r1
;;;569    
;;;570    lcd_buffer[i]=ABCDEF[in%16];
000638  49bc              LDR      r1,|L1.2348|
00063a  b510              PUSH     {r4,lr}               ;565
00063c  f000020f          AND      r2,r0,#0xf
000640  5c8c              LDRB     r4,[r1,r2]
000642  4ab9              LDR      r2,|L1.2344|
000644  54d4              STRB     r4,[r2,r3]
;;;571    i--;
;;;572    in/=16;
000646  0904              LSRS     r4,r0,#4
000648  1e5b              SUBS     r3,r3,#1              ;571
;;;573    lcd_buffer[i]=ABCDEF[in%16];
00064a  f004000f          AND      r0,r4,#0xf
00064e  b2db              UXTB     r3,r3                 ;571
000650  5c08              LDRB     r0,[r1,r0]
000652  54d0              STRB     r0,[r2,r3]
;;;574    i--;
000654  1e5b              SUBS     r3,r3,#1
000656  b2d8              UXTB     r0,r3
;;;575    in/=16;
000658  0923              LSRS     r3,r4,#4
;;;576    lcd_buffer[i]=ABCDEF[in%16];
00065a  f003040f          AND      r4,r3,#0xf
00065e  5d0c              LDRB     r4,[r1,r4]
000660  5414              STRB     r4,[r2,r0]
;;;577    i--;
000662  1e40              SUBS     r0,r0,#1
;;;578    in/=16;
000664  091b              LSRS     r3,r3,#4
000666  b2c0              UXTB     r0,r0                 ;577
;;;579    lcd_buffer[i]=ABCDEF[in];
000668  5cc9              LDRB     r1,[r1,r3]
00066a  5411              STRB     r1,[r2,r0]
;;;580    
;;;581    }
00066c  bd10              POP      {r4,pc}
;;;582    
                          ENDP

                  char2lcdbyx PROC
;;;583    //-----------------------------------------------
;;;584    void char2lcdbyx(char in,char y,char x)
00066e  eb010181          ADD      r1,r1,r1,LSL #2
;;;585    {
;;;586    char i;
;;;587    
;;;588    i=(20*y)+x;
000672  eb020181          ADD      r1,r2,r1,LSL #2
000676  b2cb              UXTB     r3,r1
;;;589    
;;;590    lcd_buffer[i--]=ABCDEF[in%2];
000678  49ac              LDR      r1,|L1.2348|
00067a  b510              PUSH     {r4,lr}               ;585
00067c  f0000201          AND      r2,r0,#1
000680  5c8c              LDRB     r4,[r1,r2]
000682  4aa9              LDR      r2,|L1.2344|
000684  54d4              STRB     r4,[r2,r3]
;;;591    in/=2;
000686  0844              LSRS     r4,r0,#1
000688  1e5b              SUBS     r3,r3,#1              ;590
;;;592    lcd_buffer[i--]=ABCDEF[in%2];
00068a  f0040001          AND      r0,r4,#1
00068e  b2db              UXTB     r3,r3                 ;590
000690  5c08              LDRB     r0,[r1,r0]
000692  54d0              STRB     r0,[r2,r3]
000694  1e5b              SUBS     r3,r3,#1
000696  b2d8              UXTB     r0,r3
;;;593    in/=2;
000698  0863              LSRS     r3,r4,#1
;;;594    lcd_buffer[i--]=ABCDEF[in%2];
00069a  f0030401          AND      r4,r3,#1
;;;595    in/=2;
00069e  085b              LSRS     r3,r3,#1
0006a0  5d0c              LDRB     r4,[r1,r4]            ;594
0006a2  5414              STRB     r4,[r2,r0]            ;594
0006a4  1e40              SUBS     r0,r0,#1              ;594
;;;596    lcd_buffer[i--]=ABCDEF[in%2];
0006a6  f0030401          AND      r4,r3,#1
0006aa  b2c0              UXTB     r0,r0                 ;594
0006ac  5d0c              LDRB     r4,[r1,r4]
0006ae  5414              STRB     r4,[r2,r0]
;;;597    in/=2;
0006b0  085b              LSRS     r3,r3,#1
0006b2  1e40              SUBS     r0,r0,#1              ;596
;;;598    lcd_buffer[i--]=ABCDEF[in%2];
0006b4  f0030401          AND      r4,r3,#1
0006b8  b2c0              UXTB     r0,r0                 ;596
0006ba  5d0c              LDRB     r4,[r1,r4]
0006bc  5414              STRB     r4,[r2,r0]
;;;599    in/=2;
0006be  085b              LSRS     r3,r3,#1
0006c0  1e40              SUBS     r0,r0,#1              ;598
;;;600    lcd_buffer[i--]=ABCDEF[in%2];
0006c2  f0030401          AND      r4,r3,#1
0006c6  b2c0              UXTB     r0,r0                 ;598
0006c8  5d0c              LDRB     r4,[r1,r4]
0006ca  5414              STRB     r4,[r2,r0]
;;;601    in/=2;
0006cc  085b              LSRS     r3,r3,#1
0006ce  1e40              SUBS     r0,r0,#1              ;600
;;;602    lcd_buffer[i--]=ABCDEF[in%2];
0006d0  f0030401          AND      r4,r3,#1
0006d4  b2c0              UXTB     r0,r0                 ;600
0006d6  5d0c              LDRB     r4,[r1,r4]
0006d8  5414              STRB     r4,[r2,r0]
0006da  1e40              SUBS     r0,r0,#1
0006dc  b2c4              UXTB     r4,r0
;;;603    in/=2;
0006de  0858              LSRS     r0,r3,#1
;;;604    lcd_buffer[i--]=ABCDEF[in%2];
0006e0  5c08              LDRB     r0,[r1,r0]
0006e2  5510              STRB     r0,[r2,r4]
;;;605    in/=2;
;;;606    }
0006e4  bd10              POP      {r4,pc}
;;;607    
                          ENDP

                  pointer_set PROC
;;;608    //-----------------------------------------------
;;;609    void pointer_set(char num_of_first_row)
0006e6  b530              PUSH     {r4,r5,lr}
;;;610    {
;;;611    if(sub_ind==index_set)lcd_buffer[num_of_first_row*20]=1;
0006e8  4991              LDR      r1,|L1.2352|
0006ea  2301              MOVS     r3,#1
0006ec  4d8e              LDR      r5,|L1.2344|
0006ee  f9912001          LDRSB    r2,[r1,#1]  ; a_ind
0006f2  f9911004          LDRSB    r1,[r1,#4]  ; a_ind
0006f6  eb000480          ADD      r4,r0,r0,LSL #2
0006fa  428a              CMP      r2,r1
0006fc  d102              BNE      |L1.1796|
0006fe  f8053024          STRB     r3,[r5,r4,LSL #2]
;;;612    else if(sub_ind==(index_set+1))lcd_buffer[(num_of_first_row+1)*20]=1;
;;;613    else if(sub_ind==(index_set+2))lcd_buffer[(num_of_first_row+2)*20]=1;
;;;614    else if(sub_ind==(index_set+3))lcd_buffer[(num_of_first_row+3)*20]=1;
;;;615    else if(sub_ind==(index_set+4))lcd_buffer[(num_of_first_row+4)*20]=1;
;;;616    else if(sub_ind==(index_set+5))lcd_buffer[(num_of_first_row+5)*20]=1;
;;;617    else if(sub_ind==(index_set+6))lcd_buffer[(num_of_first_row+6)*20]=1;
;;;618    else if(sub_ind==(index_set+7))lcd_buffer[(num_of_first_row+7)*20]=1;
;;;619    }
000702  bd30              POP      {r4,r5,pc}
                  |L1.1796|
000704  4d88              LDR      r5,|L1.2344|
000706  1c4c              ADDS     r4,r1,#1              ;612
000708  eb000080          ADD      r0,r0,r0,LSL #2       ;611
00070c  eb050080          ADD      r0,r5,r0,LSL #2       ;611
000710  42a2              CMP      r2,r4                 ;612
000712  d101              BNE      |L1.1816|
000714  7503              STRB     r3,[r0,#0x14]         ;612
000716  bd30              POP      {r4,r5,pc}
                  |L1.1816|
000718  1c8c              ADDS     r4,r1,#2              ;613
00071a  42a2              CMP      r2,r4                 ;613
00071c  d102              BNE      |L1.1828|
00071e  f8803028          STRB     r3,[r0,#0x28]         ;613
000722  bd30              POP      {r4,r5,pc}
                  |L1.1828|
000724  1ccc              ADDS     r4,r1,#3              ;614
000726  42a2              CMP      r2,r4                 ;614
000728  d102              BNE      |L1.1840|
00072a  f880303c          STRB     r3,[r0,#0x3c]         ;614
00072e  bd30              POP      {r4,r5,pc}
                  |L1.1840|
000730  1d0c              ADDS     r4,r1,#4              ;615
000732  42a2              CMP      r2,r4                 ;615
000734  d102              BNE      |L1.1852|
000736  f8803050          STRB     r3,[r0,#0x50]         ;615
00073a  bd30              POP      {r4,r5,pc}
                  |L1.1852|
00073c  1d4c              ADDS     r4,r1,#5              ;616
00073e  42a2              CMP      r2,r4                 ;616
000740  d102              BNE      |L1.1864|
000742  f8803064          STRB     r3,[r0,#0x64]         ;616
000746  bd30              POP      {r4,r5,pc}
                  |L1.1864|
000748  1d8c              ADDS     r4,r1,#6              ;617
00074a  42a2              CMP      r2,r4                 ;617
00074c  d102              BNE      |L1.1876|
00074e  f8803078          STRB     r3,[r0,#0x78]         ;617
                  |L1.1874|
000752  bd30              POP      {r4,r5,pc}
                  |L1.1876|
000754  1dc9              ADDS     r1,r1,#7              ;618
000756  428a              CMP      r2,r1                 ;618
000758  d1fb              BNE      |L1.1874|
00075a  f880308c          STRB     r3,[r0,#0x8c]         ;618
00075e  bd30              POP      {r4,r5,pc}
;;;620    
                          ENDP

                  tree_down PROC
;;;622    //-----------------------------------------------
;;;623    void tree_down(signed char offset_ind,signed char offset_sub_ind)
000760  4b74              LDR      r3,|L1.2356|
;;;624    {
;;;625    ind_pointer--;
000762  881a              LDRH     r2,[r3,#0]  ; ind_pointer
000764  1e52              SUBS     r2,r2,#1
;;;626    ind_pointer+=offset_ind;
000766  4410              ADD      r0,r0,r2
000768  b200              SXTH     r0,r0
00076a  8018              STRH     r0,[r3,#0]
;;;627    a_ind=b_ind[ind_pointer];
00076c  4a72              LDR      r2,|L1.2360|
00076e  eb000080          ADD      r0,r0,r0,LSL #2
000772  4402              ADD      r2,r2,r0
000774  486e              LDR      r0,|L1.2352|
000776  6813              LDR      r3,[r2,#0]
000778  6003              STR      r3,[r0,#0]  ; a_ind
00077a  7912              LDRB     r2,[r2,#4]
00077c  7102              STRB     r2,[r0,#4]
;;;628    
;;;629    sub_ind+=offset_sub_ind;
00077e  7842              LDRB     r2,[r0,#1]  ; a_ind
000780  4411              ADD      r1,r1,r2
000782  7041              STRB     r1,[r0,#1]
;;;630    }
000784  4770              BX       lr
;;;631    
                          ENDP

                  tree_up PROC
;;;632    //-----------------------------------------------
;;;633    void tree_up(char tind, char tsub_ind, char tindex_set, char tsub_ind1)
000786  b5f0              PUSH     {r4-r7,lr}
;;;634    {
;;;635    b_ind[ind_pointer++]=a_ind;
000788  4d6a              LDR      r5,|L1.2356|
00078a  4f6b              LDR      r7,|L1.2360|
00078c  f9b54000          LDRSH    r4,[r5,#0]  ; ind_pointer
000790  eb040684          ADD      r6,r4,r4,LSL #2
000794  1c64              ADDS     r4,r4,#1
000796  802c              STRH     r4,[r5,#0]
000798  4c65              LDR      r4,|L1.2352|
00079a  443e              ADD      r6,r6,r7
00079c  6825              LDR      r5,[r4,#0]  ; a_ind
00079e  6035              STR      r5,[r6,#0]
0007a0  7925              LDRB     r5,[r4,#4]  ; a_ind
0007a2  7135              STRB     r5,[r6,#4]
;;;636    ind=(i_enum)tind;
0007a4  7020              STRB     r0,[r4,#0]
;;;637    sub_ind=tsub_ind;
0007a6  7061              STRB     r1,[r4,#1]
;;;638    index_set=tindex_set;
0007a8  7122              STRB     r2,[r4,#4]
;;;639    sub_ind1=tsub_ind1;
0007aa  70a3              STRB     r3,[r4,#2]
;;;640    }
0007ac  bdf0              POP      {r4-r7,pc}
;;;641    
                          ENDP

                  bgnd_par PROC
;;;642    //-----------------------------------------------
;;;643    void bgnd_par(char const *ptr0,char const *ptr1,char const *ptr2,char const *ptr3)
0007ae  b5f0              PUSH     {r4-r7,lr}
;;;644    {
0007b0  4605              MOV      r5,r0
0007b2  460e              MOV      r6,r1
0007b4  4617              MOV      r7,r2
;;;645    char i,*ptr_ram;
;;;646    clr_scrn();
0007b6  f7fffffe          BL       clr_scrn
;;;647    
;;;648    ptr_ram=lcd_buffer;
0007ba  4c5b              LDR      r4,|L1.2344|
;;;649    for(i=0;i<20;i++)
0007bc  f05f0000          MOVS.W   r0,#0
                  |L1.1984|
0007c0  1c40              ADDS     r0,r0,#1
;;;650    	{
;;;651    	*ptr_ram++=*ptr0++;
0007c2  f8151b01          LDRB     r1,[r5],#1
0007c6  b2c0              UXTB     r0,r0                 ;649
0007c8  f8041b01          STRB     r1,[r4],#1
0007cc  2814              CMP      r0,#0x14              ;649
0007ce  d3f7              BCC      |L1.1984|
;;;652    	}
;;;653    for(i=0;i<20;i++)
0007d0  f05f0000          MOVS.W   r0,#0
                  |L1.2004|
0007d4  1c40              ADDS     r0,r0,#1
;;;654    	{
;;;655    	*ptr_ram++=*ptr1++;
0007d6  f8161b01          LDRB     r1,[r6],#1
0007da  b2c0              UXTB     r0,r0                 ;653
0007dc  f8041b01          STRB     r1,[r4],#1
0007e0  2814              CMP      r0,#0x14              ;653
0007e2  d3f7              BCC      |L1.2004|
;;;656    	}
;;;657    for(i=0;i<20;i++)
0007e4  f05f0000          MOVS.W   r0,#0
                  |L1.2024|
0007e8  1c40              ADDS     r0,r0,#1
;;;658    	{
;;;659    	*ptr_ram++=*ptr2++;
0007ea  f8171b01          LDRB     r1,[r7],#1
0007ee  b2c0              UXTB     r0,r0                 ;657
0007f0  f8041b01          STRB     r1,[r4],#1
0007f4  2814              CMP      r0,#0x14              ;657
0007f6  d3f7              BCC      |L1.2024|
;;;660    	}
;;;661    for(i=0;i<20;i++)
0007f8  f05f0000          MOVS.W   r0,#0
                  |L1.2044|
0007fc  1c40              ADDS     r0,r0,#1
;;;662    	{
;;;663    	*ptr_ram++=*ptr3++;
0007fe  f8131b01          LDRB     r1,[r3],#1
000802  b2c0              UXTB     r0,r0                 ;661
000804  f8041b01          STRB     r1,[r4],#1
000808  2814              CMP      r0,#0x14              ;661
00080a  d3f7              BCC      |L1.2044|
;;;664    	}
;;;665    
;;;666    
;;;667    }
00080c  bdf0              POP      {r4-r7,pc}
;;;668    
                          ENDP

                  sub_bgnd PROC
;;;669    //-----------------------------------------------
;;;670    void sub_bgnd(char const *adr,char xy,signed char offset)
00080e  b530              PUSH     {r4,r5,lr}
;;;671    {
000810  4604              MOV      r4,r0
000812  4608              MOV      r0,r1
000814  4615              MOV      r5,r2
;;;672    char temp;
;;;673    temp=find(xy);
000816  f7fffffe          BL       find
;;;674    
;;;675    //ptr_ram=&lcd_buffer[find(xy)];
;;;676    if(temp!=255)
00081a  28ff              CMP      r0,#0xff
00081c  d009              BEQ      |L1.2098|
;;;677    while (*adr)
;;;678    	{
;;;679    	lcd_buffer[temp+offset]=*adr++;
00081e  4a42              LDR      r2,|L1.2344|
                  |L1.2080|
000820  7821              LDRB     r1,[r4,#0]            ;677
000822  2900              CMP      r1,#0                 ;677
000824  d005              BEQ      |L1.2098|
000826  1943              ADDS     r3,r0,r5
000828  1c64              ADDS     r4,r4,#1
;;;680    	temp++;
00082a  1c40              ADDS     r0,r0,#1
00082c  54d1              STRB     r1,[r2,r3]            ;679
00082e  b2c0              UXTB     r0,r0
000830  e7f6              B        |L1.2080|
                  |L1.2098|
;;;681        	}
;;;682    }
000832  bd30              POP      {r4,r5,pc}
;;;683    
                          ENDP

                  show_mess PROC
;;;684    //-----------------------------------------------
;;;685    void show_mess(char* p1, char* p2, char* p3, char* p4,int m_sec)
000834  b510              PUSH     {r4,lr}
;;;686    {
;;;687    bgnd_par(p1,p2,p3,p4);
000836  9c02              LDR      r4,[sp,#8]
000838  f7fffffe          BL       bgnd_par
;;;688    tree_up(iSM,sub_ind,sub_ind1,sub_ind2);
00083c  483c              LDR      r0,|L1.2352|
00083e  78c3              LDRB     r3,[r0,#3]  ; a_ind
000840  7882              LDRB     r2,[r0,#2]  ; a_ind
000842  7841              LDRB     r1,[r0,#1]  ; a_ind
000844  2065              MOVS     r0,#0x65
000846  f7fffffe          BL       tree_up
;;;689    ret((char)(m_sec/100));
00084a  2064              MOVS     r0,#0x64
00084c  fb94f0f0          SDIV     r0,r4,r0
000850  e8bd4010          POP      {r4,lr}
000854  b2c0              UXTB     r0,r0
000856  f7ffbffe          B.W      ||ret||
;;;690    }
;;;691    
                          ENDP

                  ptr_carry PROC
;;;692    //-----------------------------------------------
;;;693    char ptr_carry(signed int in,unsigned char modul,signed int carry)
00085a  1880              ADDS     r0,r0,r2
;;;694    {
;;;695    signed int tempSI;
;;;696    tempSI=in;                                                             
;;;697    tempSI+=carry;
;;;698    if(tempSI<0)tempSI+=modul;
00085c  d501              BPL      |L1.2146|
00085e  4408              ADD      r0,r0,r1
000860  e002              B        |L1.2152|
                  |L1.2146|
;;;699    else if(tempSI>=modul)tempSI-=modul;
000862  4288              CMP      r0,r1
000864  db00              BLT      |L1.2152|
000866  1a40              SUBS     r0,r0,r1
                  |L1.2152|
;;;700    
;;;701    return (char)tempSI;
000868  b2c0              UXTB     r0,r0
;;;702    }
00086a  4770              BX       lr
;;;703    
                          ENDP

                  event_data2ind PROC
;;;704    //-----------------------------------------------
;;;705    void event_data2ind(char num, char simbol)
00086c  e92d43fe          PUSH     {r1-r9,lr}
;;;706    {
000870  460d              MOV      r5,r1
;;;707    char iii;
;;;708    char dt[4],dt_[4],dt__[4];
;;;709    unsigned int tempii;    
;;;710    		
;;;711    /*tempii=lc640_read_int(PTR_EVENT_LOG);
;;;712    tempii=ptr_carry(tempii,64,-1*((signed)num));*/
;;;713    tempii=(signed)num;
;;;714    tempii*=32;
000872  0144              LSLS     r4,r0,#5
;;;715    ///tempii+=EVENT_LOG;
;;;716         
;;;717    lc640_read_long_ptr(tempii,dt);
000874  a902              ADD      r1,sp,#8
000876  4620              MOV      r0,r4
000878  f7fffffe          BL       lc640_read_long_ptr
;;;718    lc640_read_long_ptr(tempii+8,dt_);
00087c  4669              MOV      r1,sp
00087e  f1040008          ADD      r0,r4,#8
000882  f7fffffe          BL       lc640_read_long_ptr
;;;719    lc640_read_long_ptr(tempii+12,dt__);
000886  a901              ADD      r1,sp,#4
000888  f104000c          ADD      r0,r4,#0xc
00088c  f7fffffe          BL       lc640_read_long_ptr
;;;720    
;;;721    iii=find(simbol);
000890  4628              MOV      r0,r5
000892  f7fffffe          BL       find
;;;722    
;;;723    lcd_buffer[iii++]=' ';
000896  4c24              LDR      r4,|L1.2344|
000898  2520              MOVS     r5,#0x20
;;;724    lcd_buffer[iii++]='0';
00089a  f04f0c30          MOV      r12,#0x30
00089e  5425              STRB     r5,[r4,r0]            ;723
0008a0  1c40              ADDS     r0,r0,#1              ;723
0008a2  b2c0              UXTB     r0,r0                 ;723
;;;725    lcd_buffer[iii++]='!';
0008a4  2721              MOVS     r7,#0x21
0008a6  f804c000          STRB     r12,[r4,r0]           ;724
0008aa  1c40              ADDS     r0,r0,#1              ;724
0008ac  b2c0              UXTB     r0,r0                 ;724
;;;726    lcd_buffer[iii++]='@'; 
0008ae  f04f0840          MOV      r8,#0x40
0008b2  5427              STRB     r7,[r4,r0]            ;725
0008b4  1c40              ADDS     r0,r0,#1              ;725
0008b6  b2c0              UXTB     r0,r0                 ;725
;;;727    lcd_buffer[iii++]=' ';
;;;728    lcd_buffer[iii++]=' ';
;;;729    lcd_buffer[iii++]='0';
;;;730    lcd_buffer[iii++]='#';
0008b8  2123              MOVS     r1,#0x23
0008ba  f8048000          STRB     r8,[r4,r0]            ;726
0008be  1c40              ADDS     r0,r0,#1              ;726
0008c0  b2c0              UXTB     r0,r0                 ;726
;;;731    int2lcd(dt_[2],'!',0);
0008c2  2200              MOVS     r2,#0
0008c4  5425              STRB     r5,[r4,r0]            ;727
0008c6  1c40              ADDS     r0,r0,#1              ;727
0008c8  b2c0              UXTB     r0,r0                 ;727
0008ca  5425              STRB     r5,[r4,r0]            ;728
0008cc  1c40              ADDS     r0,r0,#1              ;728
0008ce  b2c0              UXTB     r0,r0                 ;728
0008d0  f804c000          STRB     r12,[r4,r0]           ;729
0008d4  1c40              ADDS     r0,r0,#1              ;729
0008d6  b2c0              UXTB     r0,r0                 ;729
0008d8  5421              STRB     r1,[r4,r0]            ;730
0008da  1c40              ADDS     r0,r0,#1              ;730
0008dc  b2c6              UXTB     r6,r0                 ;730
0008de  f89d0002          LDRB     r0,[sp,#2]
0008e2  2121              MOVS     r1,#0x21
0008e4  f7fffffe          BL       int2lcd
;;;732    int2lcd(dt_[0],'#',0);   
0008e8  f89d0000          LDRB     r0,[sp,#0]
0008ec  2200              MOVS     r2,#0
0008ee  2123              MOVS     r1,#0x23
0008f0  f7fffffe          BL       int2lcd
;;;733    if(!((dt_[1]>=1)&&(dt_[1]<=12)))dt_[1]=1;
0008f4  f89d0001          LDRB     r0,[sp,#1]
0008f8  1e40              SUBS     r0,r0,#1
0008fa  280c              CMP      r0,#0xc
0008fc  d302              BCC      |L1.2308|
0008fe  2001              MOVS     r0,#1
000900  f88d0001          STRB     r0,[sp,#1]
                  |L1.2308|
;;;734    sub_bgnd(sm_mont[dt_[1]],'@',0); 
000904  f89d0001          LDRB     r0,[sp,#1]
000908  490c              LDR      r1,|L1.2364|
00090a  2200              MOVS     r2,#0
00090c  eb010080          ADD      r0,r1,r0,LSL #2
000910  2140              MOVS     r1,#0x40
000912  f7fffffe          BL       sub_bgnd
;;;735    lcd_buffer[iii++]=' ';		
000916  55a5              STRB     r5,[r4,r6]
000918  1c76              ADDS     r6,r6,#1
00091a  b2f0              UXTB     r0,r6
;;;736    lcd_buffer[iii++]='0';
00091c  f804c000          STRB     r12,[r4,r0]
000920  1c40              ADDS     r0,r0,#1
000922  e00d              B        |L1.2368|
                  |L1.2340|
                          DCD      ||dig||
                  |L1.2344|
                          DCD      lcd_buffer
                  |L1.2348|
                          DCD      ABCDEF
                  |L1.2352|
                          DCD      a_ind
                  |L1.2356|
                          DCD      ind_pointer
                  |L1.2360|
                          DCD      b_ind
                  |L1.2364|
                          DCD      sm_mont
                  |L1.2368|
000940  b2c0              UXTB     r0,r0
;;;737    lcd_buffer[iii++]='!';
;;;738    lcd_buffer[iii++]=':'; 
000942  213a              MOVS     r1,#0x3a
000944  5427              STRB     r7,[r4,r0]            ;737
000946  1c40              ADDS     r0,r0,#1              ;737
000948  b2c0              UXTB     r0,r0                 ;737
;;;739    lcd_buffer[iii++]='0';
;;;740    lcd_buffer[iii++]='@';
;;;741    int2lcd(dt__[0],'!',0);
00094a  2200              MOVS     r2,#0
00094c  5421              STRB     r1,[r4,r0]            ;738
00094e  1c40              ADDS     r0,r0,#1              ;738
000950  b2c0              UXTB     r0,r0                 ;738
000952  2121              MOVS     r1,#0x21
000954  f804c000          STRB     r12,[r4,r0]           ;739
000958  1c40              ADDS     r0,r0,#1              ;739
00095a  b2c0              UXTB     r0,r0                 ;739
00095c  f8048000          STRB     r8,[r4,r0]            ;740
000960  1c40              ADDS     r0,r0,#1              ;740
000962  b2c6              UXTB     r6,r0                 ;740
000964  f89d0004          LDRB     r0,[sp,#4]
000968  f7fffffe          BL       int2lcd
;;;742    int2lcd(dt__[1],'@',0);
00096c  f89d0005          LDRB     r0,[sp,#5]
000970  2200              MOVS     r2,#0
000972  2140              MOVS     r1,#0x40
000974  f7fffffe          BL       int2lcd
;;;743       		     		
;;;744    lcd_buffer[iii++]=' ';
000978  55a5              STRB     r5,[r4,r6]
;;;745    }	
00097a  e8bd83fe          POP      {r1-r9,pc}
                          ENDP

