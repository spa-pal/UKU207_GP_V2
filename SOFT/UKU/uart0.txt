; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\uart0.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\uart0.d --feedback=.\EXE\UKU2071x_GALV_IBv2.fed --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 -DWG12232A --omf_browse=.\EXE\uart0.crf uart0.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  crc_87 PROC
;;;72     //-----------------------------------------------
;;;73     char crc_87(char* ptr,char num)
000000  b530              PUSH     {r4,r5,lr}
;;;74     {
;;;75     char r,j;
;;;76     r=*ptr;
000002  7803              LDRB     r3,[r0,#0]
;;;77     
;;;78     for(j=1;j<num;j++)
000004  2201              MOVS     r2,#1
;;;79     	{
;;;80          ptr++;
;;;81     	r=((*ptr)^Table87[r]);
000006  4cfe              LDR      r4,|L1.1024|
000008  e006              B        |L1.24|
00000a  bf00              NOP      
                  |L1.12|
00000c  f8105f01          LDRB     r5,[r0,#1]!
000010  5ce3              LDRB     r3,[r4,r3]
000012  406b              EORS     r3,r3,r5
000014  1c52              ADDS     r2,r2,#1              ;78
000016  b2d2              UXTB     r2,r2                 ;78
                  |L1.24|
000018  428a              CMP      r2,r1                 ;78
00001a  d3f7              BCC      |L1.12|
;;;82     	}
;;;83     
;;;84     return r;	
00001c  4618              MOV      r0,r3
;;;85     } 
00001e  bd30              POP      {r4,r5,pc}
;;;86     
                          ENDP

                  crc_95 PROC
;;;87     //-----------------------------------------------
;;;88     char crc_95(char* ptr,char num)
000020  b530              PUSH     {r4,r5,lr}
;;;89     {
;;;90     char r,j;
;;;91     r=*ptr;
000022  7803              LDRB     r3,[r0,#0]
;;;92     
;;;93     for(j=1;j<num;j++)
000024  2201              MOVS     r2,#1
;;;94     	{
;;;95          ptr++;
;;;96     	r=((*ptr)^Table95[r]);
000026  4cf7              LDR      r4,|L1.1028|
000028  e006              B        |L1.56|
00002a  bf00              NOP      
                  |L1.44|
00002c  f8105f01          LDRB     r5,[r0,#1]!
000030  5ce3              LDRB     r3,[r4,r3]
000032  406b              EORS     r3,r3,r5
000034  1c52              ADDS     r2,r2,#1              ;93
000036  b2d2              UXTB     r2,r2                 ;93
                  |L1.56|
000038  428a              CMP      r2,r1                 ;93
00003a  d3f7              BCC      |L1.44|
;;;97     	}
;;;98     
;;;99     return r;	
00003c  4618              MOV      r0,r3
;;;100    }
00003e  bd30              POP      {r4,r5,pc}
;;;101    
                          ENDP

                  putchar0 PROC
;;;103    //-----------------------------------------------
;;;104    void putchar0(char c)
000040  b530              PUSH     {r4,r5,lr}
;;;105    {
;;;106    while (tx_counter0 == TX_BUFFER_SIZE0);
000042  49f1              LDR      r1,|L1.1032|
000044  f44f6480          MOV      r4,#0x400
000048  89ca              LDRH     r2,[r1,#0xe]  ; tx_counter0
                  |L1.74|
00004a  42a2              CMP      r2,r4
00004c  d0fd              BEQ      |L1.74|
;;;107    if (tx_counter0 || ((LPC_UART0->LSR & 0x60)==0))
00004e  b932              CBNZ     r2,|L1.94|
000050  4bee              LDR      r3,|L1.1036|
000052  7d1d              LDRB     r5,[r3,#0x14]
000054  f0150f60          TST      r5,#0x60
000058  d001              BEQ      |L1.94|
;;;108       {
;;;109       tx_buffer0[tx_wr_index0]=c;
;;;110       if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;;;111       ++tx_counter0;
;;;112       }
;;;113    else LPC_UART0->THR=c;
00005a  7018              STRB     r0,[r3,#0]
;;;114    }
00005c  bd30              POP      {r4,r5,pc}
                  |L1.94|
00005e  4dec              LDR      r5,|L1.1040|
000060  894b              LDRH     r3,[r1,#0xa]          ;109  ; tx_wr_index0
000062  54e8              STRB     r0,[r5,r3]            ;109
000064  1c5b              ADDS     r3,r3,#1              ;110
000066  b298              UXTH     r0,r3                 ;110
000068  8148              STRH     r0,[r1,#0xa]          ;110
00006a  42a0              CMP      r0,r4                 ;110
00006c  d101              BNE      |L1.114|
00006e  2000              MOVS     r0,#0                 ;110
000070  8148              STRH     r0,[r1,#0xa]          ;110
                  |L1.114|
000072  1c52              ADDS     r2,r2,#1              ;111
000074  81ca              STRH     r2,[r1,#0xe]          ;111
000076  bd30              POP      {r4,r5,pc}
;;;115    
                          ENDP

                  uart_out_adr0 PROC
;;;144    //-----------------------------------------------
;;;145    void uart_out_adr0 (char *ptr, char len)
000078  b570              PUSH     {r4-r6,lr}
;;;146    {
00007a  b08d              SUB      sp,sp,#0x34
;;;147    char UOB[50]/*={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}*/;
;;;148    char i,t=0;
00007c  2200              MOVS     r2,#0
;;;149    
;;;150    for(i=0;i<len;i++)
00007e  4613              MOV      r3,r2
000080  466c              MOV      r4,sp                 ;147
000082  e004              B        |L1.142|
                  |L1.132|
;;;151    	{
;;;152    	UOB[i]=ptr[i];
000084  5cc5              LDRB     r5,[r0,r3]
000086  54e5              STRB     r5,[r4,r3]
;;;153    	t^=UOB[i];
000088  406a              EORS     r2,r2,r5
00008a  1c5b              ADDS     r3,r3,#1              ;150
00008c  b2db              UXTB     r3,r3                 ;150
                  |L1.142|
00008e  428b              CMP      r3,r1                 ;150
000090  d3f8              BCC      |L1.132|
;;;154    	}
;;;155    //if(!t)t=0xff;
;;;156    UOB[len]=len;
;;;157    t^=len;	
;;;158    UOB[len+1]=t;	
000092  1860              ADDS     r0,r4,r1
000094  5461              STRB     r1,[r4,r1]            ;156
000096  404a              EORS     r2,r2,r1              ;157
000098  7042              STRB     r2,[r0,#1]
;;;159    UOB[len+2]=END;
00009a  220a              MOVS     r2,#0xa
;;;160    //UOB[0]=i+1;
;;;161    //UOB[i]=t^UOB[0];
;;;162    //UOB[i+1]=END;
;;;163    	
;;;164    //puts(UOB); 
;;;165    for (i=0;i<len+3;i++)
00009c  2500              MOVS     r5,#0
00009e  7082              STRB     r2,[r0,#2]            ;159
0000a0  1cce              ADDS     r6,r1,#3
0000a2  e004              B        |L1.174|
                  |L1.164|
;;;166    	{
;;;167    	putchar0(UOB[i]);
0000a4  5d60              LDRB     r0,[r4,r5]
0000a6  f7fffffe          BL       putchar0
0000aa  1c6d              ADDS     r5,r5,#1              ;165
0000ac  b2ed              UXTB     r5,r5                 ;165
                  |L1.174|
0000ae  42b5              CMP      r5,r6                 ;165
0000b0  d3f8              BCC      |L1.164|
;;;168    	}   
;;;169    }
0000b2  b00d              ADD      sp,sp,#0x34
0000b4  bd70              POP      {r4-r6,pc}
;;;170    
                          ENDP

                  UARTInit PROC
;;;251    //-----------------------------------------------
;;;252    uint32_t UARTInit( uint32_t PortNum, uint32_t baudrate )
0000b6  e92d47f0          PUSH     {r4-r10,lr}
;;;253    {
;;;254    uint32_t Fdiv;
;;;255    uint32_t pclkdiv, pclk;
;;;256    
;;;257    
;;;258    
;;;259    if ( PortNum == 0 )
;;;260      	{
;;;261    	LPC_PINCON->PINSEL0 &= ~0x000000F0;
;;;262    	LPC_PINCON->PINSEL0 |= 0x00000050;  /* RxD0 is P0.3 and TxD0 is P0.2 */
;;;263    	/* By default, the PCLKSELx value is zero, thus, the PCLK for
;;;264    	all the peripherals is 1/4 of the SystemFrequency. */
;;;265    	/* Bit 6~7 is for UART0 */
;;;266    	pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
;;;267    	switch ( pclkdiv )
;;;268    		{
;;;269    	  	case 0x00:
;;;270    	  	default:
;;;271    		pclk = SystemFrequency/4;
0000ba  4ad8              LDR      r2,|L1.1052|
0000bc  4ed5              LDR      r6,|L1.1044|
0000be  4fd6              LDR      r7,|L1.1048|
0000c0  6812              LDR      r2,[r2,#0]
0000c2  f04f0903          MOV      r9,#3                 ;255
0000c6  0893              LSRS     r3,r2,#2
;;;272    		break;
;;;273    	  	case 0x01:
;;;274    		pclk = SystemFrequency;
;;;275    		break; 
;;;276    	  	case 0x02:
;;;277    		pclk = SystemFrequency/2;
0000c8  0854              LSRS     r4,r2,#1
;;;278    		break; 
;;;279    	  	case 0x03:
;;;280    		pclk = SystemFrequency/8;
;;;281    		break;
;;;282    		}
;;;283    
;;;284        	LPC_UART0->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
0000ca  f04f0c83          MOV      r12,#0x83
;;;285    	Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
;;;286        	LPC_UART0->DLM = Fdiv / 256;							
;;;287        	LPC_UART0->DLL = Fdiv % 256;
;;;288    	LPC_UART0->LCR = 0x03;		/* DLAB = 0 */
;;;289        	LPC_UART0->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
0000ce  f04f0807          MOV      r8,#7
0000d2  08d5              LSRS     r5,r2,#3              ;280
0000d4  b120              CBZ      r0,|L1.224|
;;;290    
;;;291       	NVIC_EnableIRQ(UART0_IRQn);
;;;292    
;;;293        	LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
;;;294        	return (TRUE);
;;;295      	}
;;;296    else if ( PortNum == 1 )
0000d6  2801              CMP      r0,#1
0000d8  d028              BEQ      |L1.300|
;;;297      	{
;;;298    	LPC_PINCON->PINSEL4 &= ~0x0000000F;
;;;299    	LPC_PINCON->PINSEL4 |= 0x0000000A;	/* Enable RxD1 P2.1, TxD1 P2.0 */
;;;300    	
;;;301    	/* By default, the PCLKSELx value is zero, thus, the PCLK for
;;;302    	all the peripherals is 1/4 of the SystemFrequency. */
;;;303    	/* Bit 8,9 are for UART1 */
;;;304    	pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
;;;305    	switch ( pclkdiv )
;;;306    		{
;;;307    	  	case 0x00:
;;;308    	  	default:
;;;309    		pclk = SystemFrequency/4;
;;;310    		break;
;;;311    	  	case 0x01:
;;;312    		pclk = SystemFrequency;
;;;313    		break; 
;;;314    	  	case 0x02:
;;;315    		pclk = SystemFrequency/2;
;;;316    		break; 
;;;317    	  	case 0x03:
;;;318    		pclk = SystemFrequency/8;
;;;319    		break;
;;;320    		}
;;;321    
;;;322        	LPC_UART1->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
;;;323    	Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
;;;324        	LPC_UART1->DLM = Fdiv / 256;							
;;;325        	LPC_UART1->DLL = Fdiv % 256;
;;;326    	LPC_UART1->LCR = 0x03;		/* DLAB = 0 */
;;;327        	LPC_UART1->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
;;;328    
;;;329       	NVIC_EnableIRQ(UART1_IRQn);
;;;330    
;;;331        	LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART1 interrupt */
;;;332        	return (TRUE);
;;;333      	}
;;;334    return( FALSE ); 
0000da  2000              MOVS     r0,#0
                  |L1.220|
;;;335    }
0000dc  e8bd87f0          POP      {r4-r10,pc}
                  |L1.224|
0000e0  6830              LDR      r0,[r6,#0]            ;261
0000e2  f02000f0          BIC      r0,r0,#0xf0           ;261
0000e6  6030              STR      r0,[r6,#0]            ;261
0000e8  6830              LDR      r0,[r6,#0]            ;262
0000ea  f0400050          ORR      r0,r0,#0x50           ;262
0000ee  6030              STR      r0,[r6,#0]            ;262
0000f0  f8d701a8          LDR      r0,[r7,#0x1a8]        ;266
0000f4  f3c01081          UBFX     r0,r0,#6,#2           ;266
0000f8  2801              CMP      r0,#1                 ;267
0000fa  d008              BEQ      |L1.270|
0000fc  2802              CMP      r0,#2                 ;267
0000fe  d003              BEQ      |L1.264|
000100  2803              CMP      r0,#3                 ;267
000102  d003              BEQ      |L1.268|
000104  461a              MOV      r2,r3                 ;267
000106  e002              B        |L1.270|
                  |L1.264|
000108  4622              MOV      r2,r4                 ;272
00010a  e000              B        |L1.270|
                  |L1.268|
00010c  462a              MOV      r2,r5                 ;278
                  |L1.270|
00010e  4ebf              LDR      r6,|L1.1036|
000110  f886c00c          STRB     r12,[r6,#0xc]         ;284
000114  0910              LSRS     r0,r2,#4              ;285
000116  fbb0f0f1          UDIV     r0,r0,r1              ;285
00011a  0a01              LSRS     r1,r0,#8              ;286
00011c  7131              STRB     r1,[r6,#4]            ;286
00011e  7030              STRB     r0,[r6,#0]            ;287
000120  f886900c          STRB     r9,[r6,#0xc]          ;288
000124  f8868008          STRB     r8,[r6,#8]            ;289
000128  2005              MOVS     r0,#5                 ;291
00012a  e024              B        |L1.374|
                  |L1.300|
00012c  6930              LDR      r0,[r6,#0x10]         ;298
00012e  f020000f          BIC      r0,r0,#0xf            ;298
000132  6130              STR      r0,[r6,#0x10]         ;298
000134  6930              LDR      r0,[r6,#0x10]         ;299
000136  f040000a          ORR      r0,r0,#0xa            ;299
00013a  6130              STR      r0,[r6,#0x10]         ;299
00013c  f8d701a8          LDR      r0,[r7,#0x1a8]        ;304
000140  f3c02001          UBFX     r0,r0,#8,#2           ;304
000144  2801              CMP      r0,#1                 ;305
000146  d008              BEQ      |L1.346|
000148  2802              CMP      r0,#2                 ;305
00014a  d003              BEQ      |L1.340|
00014c  2803              CMP      r0,#3                 ;305
00014e  d003              BEQ      |L1.344|
000150  461a              MOV      r2,r3                 ;305
000152  e002              B        |L1.346|
                  |L1.340|
000154  4622              MOV      r2,r4                 ;310
000156  e000              B        |L1.346|
                  |L1.344|
000158  462a              MOV      r2,r5                 ;316
                  |L1.346|
00015a  4eb1              LDR      r6,|L1.1056|
00015c  f886c00c          STRB     r12,[r6,#0xc]         ;322
000160  0910              LSRS     r0,r2,#4              ;323
000162  fbb0f0f1          UDIV     r0,r0,r1              ;323
000166  0a01              LSRS     r1,r0,#8              ;324
000168  7131              STRB     r1,[r6,#4]            ;324
00016a  7030              STRB     r0,[r6,#0]            ;325
00016c  f886900c          STRB     r9,[r6,#0xc]          ;326
000170  f8868008          STRB     r8,[r6,#8]            ;327
000174  2006              MOVS     r0,#6                 ;329
                  |L1.374|
000176  f7fffffe          BL       NVIC_EnableIRQ
00017a  f8c68004          STR      r8,[r6,#4]            ;331
00017e  2001              MOVS     r0,#1                 ;332
000180  e7ac              B        |L1.220|
;;;336    
                          ENDP

                  UART0_IRQHandler PROC
;;;348    //***********************************************
;;;349    void UART0_IRQHandler (void) 
000182  e92d43f0          PUSH     {r4-r9,lr}
;;;350    {
;;;351    uint8_t IIRValue, LSRValue;
;;;352    uint8_t Dummy = Dummy;
;;;353    char /*status,u0iir,*/data;
;;;354    
;;;355    //uart_plazma++;
;;;356    			
;;;357    IIRValue = LPC_UART0->IIR;
000186  f8df8284          LDR      r8,|L1.1036|
00018a  f8d80008          LDR      r0,[r8,#8]
;;;358        
;;;359    IIRValue >>= 1;			/* skip pending bit in IIR */
;;;360    IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
;;;361    if ( IIRValue == IIR_RLS )		/* Receive Line Status */
;;;362      	{
;;;363    	LSRValue = LPC_UART0->LSR;
;;;364    	/* Receive Line Status */
;;;365    	if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
;;;366    		{
;;;367    	  	/* There are errors or break interrupt */
;;;368    	  	/* Read LSR will clear the interrupt */
;;;369    	  	UART0Status = LSRValue;
;;;370    	  	Dummy = LPC_UART0->RBR;		/* Dummy read on RX to clear 
;;;371    							interrupt, then bail out */
;;;372    	  	return;
;;;373    		}
;;;374    	if ( LSRValue & LSR_RDR )	/* Receive Data Ready */			
;;;375    		{
;;;376    		
;;;377    		data=LPC_UART0->RBR;
;;;378    		rx_buffer0[rx_wr_index0]=data;
00018e  4ea5              LDR      r6,|L1.1060|
000190  f3c00542          UBFX     r5,r0,#1,#3           ;360
000194  489c              LDR      r0,|L1.1032|
;;;379       		bRXIN0=1;
000196  2701              MOVS     r7,#1
;;;380       		if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
000198  f44f6980          MOV      r9,#0x400
00019c  8881              LDRH     r1,[r0,#4]            ;378
00019e  460a              MOV      r2,r1                 ;378
0001a0  1c49              ADDS     r1,r1,#1
0001a2  b28b              UXTH     r3,r1
;;;381       		if (++rx_counter0 == RX_BUFFER_SIZE0)
0001a4  8901              LDRH     r1,[r0,#8]
0001a6  1c49              ADDS     r1,r1,#1
0001a8  b28c              UXTH     r4,r1
0001aa  2100              MOVS     r1,#0                 ;380
0001ac  2d03              CMP      r5,#3                 ;361
0001ae  d01c              BEQ      |L1.490|
;;;382          		{
;;;383          		rx_counter0=0;
;;;384          		rx_buffer_overflow0=1;
;;;385          		}
;;;386    		}
;;;387      	}
;;;388    else if ( IIRValue == IIR_RDA )	/* Receive Data Available */
0001b0  2d02              CMP      r5,#2
0001b2  d033              BEQ      |L1.540|
;;;389      	{
;;;390    	
;;;391    	data=LPC_UART0->RBR;
;;;392    	rx_buffer0[rx_wr_index0]=data;
;;;393       	bRXIN0=1;
;;;394       	if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;;;395       	if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;396          	{
;;;397          	rx_counter0=0;
;;;398          	rx_buffer_overflow0=1;
;;;399          	}
;;;400    
;;;401    	modbus_rx_buffer[modbus_rx_buffer_ptr]=data;
;;;402    	modbus_rx_buffer_ptr++;
;;;403    	modbus_timeout_cnt=0;
;;;404      	}
;;;405    else if ( IIRValue == IIR_CTI )	/* Character timeout indicator */
0001b4  2d06              CMP      r5,#6
0001b6  d047              BEQ      |L1.584|
;;;406      	{
;;;407    	/* Character Time-out indicator */
;;;408    	UART0Status |= 0x100;		/* Bit 9 as the CTI error */
;;;409      	}
;;;410    else if ( IIRValue == IIR_THRE )	/* THRE, transmit holding register empty */
0001b8  2d01              CMP      r5,#1
0001ba  d114              BNE      |L1.486|
;;;411      	{
;;;412    	/* THRE interrupt */
;;;413    	
;;;414    	LSRValue = LPC_UART0->LSR;		/* Check status in the LSR to see if
0001bc  f8982014          LDRB     r2,[r8,#0x14]
;;;415    									valid data in U0THR or not */
;;;416    	if ( LSRValue & LSR_THRE )
0001c0  0692              LSLS     r2,r2,#26
0001c2  d53f              BPL      |L1.580|
;;;417    		{
;;;418    	  	UART0TxEmpty = 1;
0001c4  7007              STRB     r7,[r0,#0]
;;;419    		if (tx_counter0)
0001c6  89c2              LDRH     r2,[r0,#0xe]  ; tx_counter0
0001c8  2a00              CMP      r2,#0
0001ca  d00c              BEQ      |L1.486|
;;;420       			{
;;;421       			--tx_counter0;
0001cc  1e52              SUBS     r2,r2,#1
0001ce  81c2              STRH     r2,[r0,#0xe]
;;;422       			LPC_UART0->THR=tx_buffer0[tx_rd_index0];
0001d0  4b8f              LDR      r3,|L1.1040|
0001d2  8982              LDRH     r2,[r0,#0xc]  ; tx_rd_index0
0001d4  5c9b              LDRB     r3,[r3,r2]
0001d6  f8883000          STRB     r3,[r8,#0]
;;;423       			if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0001da  1c52              ADDS     r2,r2,#1
0001dc  b292              UXTH     r2,r2
0001de  8182              STRH     r2,[r0,#0xc]
0001e0  454a              CMP      r2,r9
0001e2  d100              BNE      |L1.486|
0001e4  8181              STRH     r1,[r0,#0xc]
                  |L1.486|
;;;424       			}
;;;425    		}
;;;426    	else
;;;427    		{
;;;428    	  	UART0TxEmpty = 0;
;;;429    		}
;;;430      	}
;;;431    }
0001e6  e8bd83f0          POP      {r4-r9,pc}
                  |L1.490|
0001ea  f8985014          LDRB     r5,[r8,#0x14]         ;363
0001ee  f0150f9e          TST      r5,#0x9e              ;365
0001f2  d003              BEQ      |L1.508|
0001f4  6105              STR      r5,[r0,#0x10]         ;369  ; UART0Status
0001f6  f8980000          LDRB     r0,[r8,#0]            ;370
0001fa  e7f4              B        |L1.486|
                  |L1.508|
0001fc  07ed              LSLS     r5,r5,#31             ;374
0001fe  d0f2              BEQ      |L1.486|
000200  f8985000          LDRB     r5,[r8,#0]            ;377
000204  54b5              STRB     r5,[r6,r2]            ;378
000206  7047              STRB     r7,[r0,#1]            ;379
000208  8083              STRH     r3,[r0,#4]            ;380
00020a  454b              CMP      r3,r9                 ;380
00020c  d100              BNE      |L1.528|
00020e  8081              STRH     r1,[r0,#4]            ;380
                  |L1.528|
000210  8104              STRH     r4,[r0,#8]            ;381
000212  454c              CMP      r4,r9                 ;381
000214  d1e7              BNE      |L1.486|
000216  8101              STRH     r1,[r0,#8]            ;383
000218  7087              STRB     r7,[r0,#2]            ;384
00021a  e7e4              B        |L1.486|
                  |L1.540|
00021c  f8985000          LDRB     r5,[r8,#0]            ;391
000220  54b5              STRB     r5,[r6,r2]            ;392
000222  7047              STRB     r7,[r0,#1]            ;393
000224  8083              STRH     r3,[r0,#4]            ;394
000226  454b              CMP      r3,r9                 ;394
000228  d100              BNE      |L1.556|
00022a  8081              STRH     r1,[r0,#4]            ;394
                  |L1.556|
00022c  8104              STRH     r4,[r0,#8]            ;395
00022e  454c              CMP      r4,r9                 ;395
000230  d101              BNE      |L1.566|
000232  8101              STRH     r1,[r0,#8]            ;397
000234  7087              STRB     r7,[r0,#2]            ;398
                  |L1.566|
000236  4a7d              LDR      r2,|L1.1068|
000238  4b7b              LDR      r3,|L1.1064|
00023a  7810              LDRB     r0,[r2,#0]            ;401  ; modbus_rx_buffer_ptr
00023c  541d              STRB     r5,[r3,r0]            ;401
00023e  1c40              ADDS     r0,r0,#1              ;402
000240  7010              STRB     r0,[r2,#0]            ;402
000242  487b              LDR      r0,|L1.1072|
                  |L1.580|
000244  7001              STRB     r1,[r0,#0]            ;428
000246  e7ce              B        |L1.486|
                  |L1.584|
000248  6901              LDR      r1,[r0,#0x10]         ;408  ; UART0Status
00024a  f4417180          ORR      r1,r1,#0x100          ;408
00024e  6101              STR      r1,[r0,#0x10]         ;408  ; UART0Status
000250  e7c9              B        |L1.486|
;;;432    
                          ENDP

                  uart_in_an0 PROC
;;;435    //-----------------------------------------------
;;;436    void uart_in_an0(void)
000252  b5f0              PUSH     {r4-r7,lr}
;;;437    {
;;;438    
;;;439    
;;;440    
;;;441    if((UIB0[0]=='r')&&(UIB0[1]=='e')&&(UIB0[2]=='a')&&(UIB0[3]=='d')&&(UIB0[6]==crc_87(UIB0,6))&&(UIB0[7]==crc_95(UIB0,6)))
000254  4c73              LDR      r4,|L1.1060|
000256  2672              MOVS     r6,#0x72
000258  3c64              SUBS     r4,r4,#0x64
00025a  2765              MOVS     r7,#0x65
00025c  7820              LDRB     r0,[r4,#0]  ; UIB0
00025e  b089              SUB      sp,sp,#0x24           ;437
000260  2872              CMP      r0,#0x72
000262  d167              BNE      |L1.820|
000264  7860              LDRB     r0,[r4,#1]  ; UIB0
000266  2865              CMP      r0,#0x65
000268  d17e              BNE      |L1.872|
00026a  78a0              LDRB     r0,[r4,#2]  ; UIB0
00026c  2861              CMP      r0,#0x61
00026e  d17b              BNE      |L1.872|
000270  78e0              LDRB     r0,[r4,#3]  ; UIB0
000272  2864              CMP      r0,#0x64
000274  d178              BNE      |L1.872|
000276  2106              MOVS     r1,#6
000278  4620              MOV      r0,r4
00027a  f7fffffe          BL       crc_87
00027e  79a1              LDRB     r1,[r4,#6]  ; UIB0
000280  4288              CMP      r0,r1
000282  d157              BNE      |L1.820|
000284  2106              MOVS     r1,#6
000286  4620              MOV      r0,r4
000288  f7fffffe          BL       crc_95
00028c  79e1              LDRB     r1,[r4,#7]  ; UIB0
00028e  4288              CMP      r0,r1
000290  d150              BNE      |L1.820|
;;;442    	{
;;;443    	unsigned short ptr;
;;;444    	unsigned long data1,data2;
;;;445    	char temp_out[20];
;;;446    	ptr=UIB0[4]+(UIB0[5]*256U);
000292  7920              LDRB     r0,[r4,#4]  ; UIB0
000294  7961              LDRB     r1,[r4,#5]  ; UIB0
000296  eb002001          ADD      r0,r0,r1,LSL #8
00029a  b280              UXTH     r0,r0
00029c  f8ad0014          STRH     r0,[sp,#0x14]
0002a0  4605              MOV      r5,r0
;;;447    	data1=lc640_read_long(ptr);
0002a2  f7fffffe          BL       lc640_read_long
;;;448    	data2=lc640_read_long(ptr+4);
0002a6  9007              STR      r0,[sp,#0x1c]
0002a8  1d28              ADDS     r0,r5,#4
0002aa  f7fffffe          BL       lc640_read_long
;;;449    	temp_out[0]='r';
0002ae  9006              STR      r0,[sp,#0x18]
0002b0  f88d6000          STRB     r6,[sp,#0]
;;;450    	temp_out[1]='e';
0002b4  f88d7001          STRB     r7,[sp,#1]
;;;451    	temp_out[2]='a';
0002b8  2061              MOVS     r0,#0x61
0002ba  f88d0002          STRB     r0,[sp,#2]
;;;452    	temp_out[3]='d';
0002be  2064              MOVS     r0,#0x64
0002c0  f88d0003          STRB     r0,[sp,#3]
;;;453    	temp_out[4]=*((char*)&ptr);
0002c4  f89d0014          LDRB     r0,[sp,#0x14]
0002c8  f88d0004          STRB     r0,[sp,#4]
;;;454    	temp_out[5]=*(((char*)&ptr)+1);	
0002cc  f89d0015          LDRB     r0,[sp,#0x15]
0002d0  f88d0005          STRB     r0,[sp,#5]
;;;455    	temp_out[6]=*((char*)&data1);
0002d4  f89d001c          LDRB     r0,[sp,#0x1c]
0002d8  f88d0006          STRB     r0,[sp,#6]
;;;456    	temp_out[7]=*(((char*)&data1)+1);		
0002dc  f89d001d          LDRB     r0,[sp,#0x1d]
0002e0  f88d0007          STRB     r0,[sp,#7]
;;;457    	temp_out[8]=*(((char*)&data1)+2);	
0002e4  f89d001e          LDRB     r0,[sp,#0x1e]
0002e8  f88d0008          STRB     r0,[sp,#8]
;;;458    	temp_out[9]=*(((char*)&data1)+3);		
0002ec  f89d001f          LDRB     r0,[sp,#0x1f]
0002f0  f88d0009          STRB     r0,[sp,#9]
;;;459    	temp_out[10]=*((char*)&data2);
0002f4  f89d0018          LDRB     r0,[sp,#0x18]
0002f8  f88d000a          STRB     r0,[sp,#0xa]
;;;460    	temp_out[11]=*(((char*)&data2)+1);		
0002fc  f89d0019          LDRB     r0,[sp,#0x19]
000300  f88d000b          STRB     r0,[sp,#0xb]
;;;461    	temp_out[12]=*(((char*)&data2)+2);	
000304  f89d001a          LDRB     r0,[sp,#0x1a]
000308  f88d000c          STRB     r0,[sp,#0xc]
;;;462    	temp_out[13]=*(((char*)&data2)+3);	
00030c  f89d001b          LDRB     r0,[sp,#0x1b]
000310  f88d000d          STRB     r0,[sp,#0xd]
;;;463    	temp_out[14]=crc_87(temp_out,14);	
000314  210e              MOVS     r1,#0xe
000316  4668              MOV      r0,sp
000318  f7fffffe          BL       crc_87
00031c  f88d000e          STRB     r0,[sp,#0xe]
;;;464    	temp_out[15]=crc_95(temp_out,14);			
000320  210e              MOVS     r1,#0xe
000322  4668              MOV      r0,sp
000324  f7fffffe          BL       crc_95
000328  f88d000f          STRB     r0,[sp,#0xf]
;;;465    	uart_out_adr0(temp_out,16);
00032c  2110              MOVS     r1,#0x10
00032e  4668              MOV      r0,sp
000330  f7fffffe          BL       uart_out_adr0
                  |L1.820|
;;;466    	}
;;;467    
;;;468    
;;;469    if((UIB0[0]=='w')&&(UIB0[1]=='r')&&(UIB0[2]=='i')&&(UIB0[3]=='t')&&(UIB0[4]=='e')&&(UIB0[15]==crc_87(UIB0,15))&&(UIB0[16]==crc_95(UIB0,15)))
000334  7820              LDRB     r0,[r4,#0]  ; UIB0
000336  2877              CMP      r0,#0x77
000338  d17c              BNE      |L1.1076|
00033a  7860              LDRB     r0,[r4,#1]  ; UIB0
00033c  2872              CMP      r0,#0x72
00033e  d113              BNE      |L1.872|
000340  78a0              LDRB     r0,[r4,#2]  ; UIB0
000342  2869              CMP      r0,#0x69
000344  d110              BNE      |L1.872|
000346  78e0              LDRB     r0,[r4,#3]  ; UIB0
000348  2874              CMP      r0,#0x74
00034a  d10d              BNE      |L1.872|
00034c  7920              LDRB     r0,[r4,#4]  ; UIB0
00034e  2865              CMP      r0,#0x65
000350  d10a              BNE      |L1.872|
000352  4834              LDR      r0,|L1.1060|
000354  210f              MOVS     r1,#0xf
000356  3864              SUBS     r0,r0,#0x64
000358  f7fffffe          BL       crc_87
00035c  7be1              LDRB     r1,[r4,#0xf]  ; UIB0
00035e  4288              CMP      r0,r1
000360  d171              BNE      |L1.1094|
000362  210f              MOVS     r1,#0xf
000364  482f              LDR      r0,|L1.1060|
000366  e000              B        |L1.874|
                  |L1.872|
000368  e08e              B        |L1.1160|
                  |L1.874|
00036a  3864              SUBS     r0,r0,#0x64
00036c  f7fffffe          BL       crc_95
000370  7c21              LDRB     r1,[r4,#0x10]  ; UIB0
000372  4288              CMP      r0,r1
000374  d167              BNE      |L1.1094|
;;;470    	{
;;;471    	unsigned short ptr;
;;;472    	unsigned long data1,data2;
;;;473    	char temp_out[20];
;;;474    	ptr=UIB0[5]+(UIB0[6]*256U);
000376  7960              LDRB     r0,[r4,#5]  ; UIB0
000378  79a1              LDRB     r1,[r4,#6]  ; UIB0
00037a  eb002001          ADD      r0,r0,r1,LSL #8
00037e  b285              UXTH     r5,r0
000380  f8ad5018          STRH     r5,[sp,#0x18]
;;;475    	*((char*)&data1)=UIB0[7];
000384  79e0              LDRB     r0,[r4,#7]  ; UIB0
000386  f88d001c          STRB     r0,[sp,#0x1c]
;;;476    	*(((char*)&data1)+1)=UIB0[8];
00038a  7a20              LDRB     r0,[r4,#8]  ; UIB0
00038c  f88d001d          STRB     r0,[sp,#0x1d]
;;;477    	*(((char*)&data1)+2)=UIB0[9];
000390  7a60              LDRB     r0,[r4,#9]  ; UIB0
000392  f88d001e          STRB     r0,[sp,#0x1e]
;;;478    	*(((char*)&data1)+3)=UIB0[10];
000396  7aa0              LDRB     r0,[r4,#0xa]  ; UIB0
000398  f88d001f          STRB     r0,[sp,#0x1f]
;;;479    	*((char*)&data2)=UIB0[11];
00039c  7ae0              LDRB     r0,[r4,#0xb]  ; UIB0
00039e  f88d0020          STRB     r0,[sp,#0x20]
;;;480    	*(((char*)&data2)+1)=UIB0[12];
0003a2  7b20              LDRB     r0,[r4,#0xc]  ; UIB0
0003a4  f88d0021          STRB     r0,[sp,#0x21]
;;;481    	*(((char*)&data2)+2)=UIB0[13];
0003a8  7b60              LDRB     r0,[r4,#0xd]  ; UIB0
0003aa  f88d0022          STRB     r0,[sp,#0x22]
;;;482    	*(((char*)&data2)+3)=UIB0[14];	
0003ae  7ba0              LDRB     r0,[r4,#0xe]  ; UIB0
0003b0  f88d0023          STRB     r0,[sp,#0x23]
;;;483    	lc640_write_long(ptr,data1);
0003b4  4628              MOV      r0,r5
0003b6  9907              LDR      r1,[sp,#0x1c]
0003b8  f7fffffe          BL       lc640_write_long
;;;484    	lc640_write_long(ptr+4,data2);
0003bc  1d28              ADDS     r0,r5,#4
0003be  9908              LDR      r1,[sp,#0x20]
0003c0  f7fffffe          BL       lc640_write_long
;;;485    	
;;;486    	//data1=lc640_read_long(ptr);
;;;487    	//data2=lc640_read_long(ptr+4);
;;;488    	temp_out[0]='w';
0003c4  2077              MOVS     r0,#0x77
0003c6  f88d0000          STRB     r0,[sp,#0]
;;;489    	temp_out[1]='r';
0003ca  f88d6001          STRB     r6,[sp,#1]
;;;490    	temp_out[2]='i';
0003ce  2069              MOVS     r0,#0x69
0003d0  f88d0002          STRB     r0,[sp,#2]
;;;491    	temp_out[3]='t';
0003d4  2074              MOVS     r0,#0x74
0003d6  f88d0003          STRB     r0,[sp,#3]
;;;492    	temp_out[4]='e';
0003da  f88d7004          STRB     r7,[sp,#4]
;;;493    	temp_out[5]=*((char*)&ptr);
0003de  f89d0018          LDRB     r0,[sp,#0x18]
0003e2  f88d0005          STRB     r0,[sp,#5]
;;;494    	temp_out[6]=*(((char*)&ptr)+1);	
0003e6  f89d0019          LDRB     r0,[sp,#0x19]
0003ea  f88d0006          STRB     r0,[sp,#6]
;;;495    	/*temp_out[6]=*((char*)&data1);
;;;496    	temp_out[7]=*(((char*)&data1)+1);		
;;;497    	temp_out[8]=*(((char*)&data1)+2);	
;;;498    	temp_out[9]=*(((char*)&data1)+3);		
;;;499    	temp_out[10]=*((char*)&data2);
;;;500    	temp_out[11]=*(((char*)&data2)+1);		
;;;501    	temp_out[12]=*(((char*)&data2)+2);	
;;;502    	temp_out[13]=*(((char*)&data2)+3);	*/
;;;503    	temp_out[7]=crc_87(temp_out,7);	
0003ee  2107              MOVS     r1,#7
0003f0  4668              MOV      r0,sp
0003f2  f7fffffe          BL       crc_87
0003f6  f88d0007          STRB     r0,[sp,#7]
;;;504    	temp_out[8]=crc_95(temp_out,7);			
0003fa  2107              MOVS     r1,#7
0003fc  4668              MOV      r0,sp
0003fe  e01a              B        |L1.1078|
                  |L1.1024|
                          DCD      Table87
                  |L1.1028|
                          DCD      Table95
                  |L1.1032|
                          DCD      ||.data||
                  |L1.1036|
                          DCD      0x4000c000
                  |L1.1040|
                          DCD      ||.bss||+0x464
                  |L1.1044|
                          DCD      0x4002c000
                  |L1.1048|
                          DCD      0x400fc000
                  |L1.1052|
                          DCD      SystemFrequency
                  |L1.1056|
                          DCD      0x40010000
                  |L1.1060|
                          DCD      ||.bss||+0x64
                  |L1.1064|
                          DCD      modbus_rx_buffer
                  |L1.1068|
                          DCD      modbus_rx_buffer_ptr
                  |L1.1072|
                          DCD      modbus_timeout_cnt
                  |L1.1076|
000434  e007              B        |L1.1094|
                  |L1.1078|
000436  f7fffffe          BL       crc_95
00043a  f88d0008          STRB     r0,[sp,#8]
;;;505    	uart_out_adr0(temp_out,9);
00043e  2109              MOVS     r1,#9
000440  4668              MOV      r0,sp
000442  f7fffffe          BL       uart_out_adr0
                  |L1.1094|
;;;506    	}
;;;507    
;;;508    if(	((UIB0[0]=='g')||(UIB0[0]=='G'))&&
000446  7820              LDRB     r0,[r4,#0]  ; UIB0
000448  2867              CMP      r0,#0x67
00044a  d001              BEQ      |L1.1104|
00044c  2847              CMP      r0,#0x47
00044e  d11b              BNE      |L1.1160|
                  |L1.1104|
;;;509    	((UIB0[1]=='e')||(UIB0[1]=='E'))&&
000450  7860              LDRB     r0,[r4,#1]  ; UIB0
000452  2865              CMP      r0,#0x65
000454  d001              BEQ      |L1.1114|
000456  2845              CMP      r0,#0x45
000458  d116              BNE      |L1.1160|
                  |L1.1114|
;;;510    	((UIB0[2]=='t')||(UIB0[2]=='T'))		)
00045a  78a0              LDRB     r0,[r4,#2]  ; UIB0
00045c  2874              CMP      r0,#0x74
00045e  d001              BEQ      |L1.1124|
000460  2854              CMP      r0,#0x54
000462  d111              BNE      |L1.1160|
                  |L1.1124|
;;;511    	{
;;;512    	//unsigned short ptr;
;;;513    	//unsigned long data1,data2;
;;;514    	char temp_out[20];
;;;515    
;;;516    	//load_U=485;
;;;517    	//load_I=567;
;;;518    	temp_out[0]=*(((char*)&load_U));
000464  484d              LDR      r0,|L1.1436|
000466  7801              LDRB     r1,[r0,#0]  ; load_U
000468  f88d1000          STRB     r1,[sp,#0]
;;;519    	temp_out[1]=*(((char*)&load_U)+1);
00046c  7840              LDRB     r0,[r0,#1]  ; load_U
00046e  f88d0001          STRB     r0,[sp,#1]
;;;520    	temp_out[2]=*(((char*)&load_I));
000472  484b              LDR      r0,|L1.1440|
000474  7801              LDRB     r1,[r0,#0]  ; load_I
000476  f88d1002          STRB     r1,[sp,#2]
;;;521    	temp_out[3]=*(((char*)&load_I)+1);
00047a  7840              LDRB     r0,[r0,#1]  ; load_I
00047c  f88d0003          STRB     r0,[sp,#3]
;;;522    	uart_out_adr0(temp_out,4);
000480  2104              MOVS     r1,#4
000482  4668              MOV      r0,sp
000484  f7fffffe          BL       uart_out_adr0
                  |L1.1160|
;;;523    	}
;;;524    
;;;525    }
000488  b009              ADD      sp,sp,#0x24
00048a  bdf0              POP      {r4-r7,pc}
;;;526    
                          ENDP

                  index_offset0 PROC
;;;529    //-----------------------------------------------
;;;530    signed short index_offset0 (signed short index,signed short offset)
00048c  4408              ADD      r0,r0,r1
;;;531    {
;;;532    index=index+offset;
00048e  b200              SXTH     r0,r0
;;;533    if(index>=RX_BUFFER_SIZE0) index-=RX_BUFFER_SIZE0; 
000490  f5b06f80          CMP      r0,#0x400
000494  db02              BLT      |L1.1180|
000496  f5a06080          SUB      r0,r0,#0x400
00049a  b200              SXTH     r0,r0
                  |L1.1180|
;;;534    if(index<0) index+=RX_BUFFER_SIZE0;
00049c  2800              CMP      r0,#0
00049e  da02              BGE      |L1.1190|
0004a0  f5006080          ADD      r0,r0,#0x400
0004a4  b200              SXTH     r0,r0
                  |L1.1190|
;;;535    return index;
;;;536    }
0004a6  4770              BX       lr
;;;537    
                          ENDP

                  control_check0 PROC
;;;538    //-----------------------------------------------
;;;539    char control_check0(signed short index)
0004a8  b570              PUSH     {r4-r6,lr}
;;;540    {
;;;541    char i=0,ii=0,iii;
;;;542    
;;;543    if(rx_buffer0[index]!=END) goto error_cc;
0004aa  4b3e              LDR      r3,|L1.1444|
0004ac  4606              MOV      r6,r0                 ;540
0004ae  2200              MOVS     r2,#0                 ;541
0004b0  5d98              LDRB     r0,[r3,r6]
0004b2  280a              CMP      r0,#0xa
0004b4  d11b              BNE      |L1.1262|
;;;544    
;;;545    ii=rx_buffer0[index_offset0(index,-2)];
0004b6  1e91              SUBS     r1,r2,#2
0004b8  4630              MOV      r0,r6
0004ba  f7fffffe          BL       index_offset0
0004be  5c1d              LDRB     r5,[r3,r0]
;;;546    iii=0;
0004c0  2400              MOVS     r4,#0
;;;547    for(i=0;i<=ii;i++)
0004c2  e008              B        |L1.1238|
                  |L1.1220|
;;;548    	{
;;;549    	iii^=rx_buffer0[index_offset0(index,-2-ii+i)];
0004c4  1b51              SUBS     r1,r2,r5
0004c6  1e89              SUBS     r1,r1,#2
0004c8  4630              MOV      r0,r6
0004ca  f7fffffe          BL       index_offset0
0004ce  5c18              LDRB     r0,[r3,r0]
0004d0  4044              EORS     r4,r4,r0
0004d2  1c52              ADDS     r2,r2,#1              ;547
0004d4  b2d2              UXTB     r2,r2                 ;547
                  |L1.1238|
0004d6  42aa              CMP      r2,r5                 ;547
0004d8  d9f4              BLS      |L1.1220|
;;;550    	}
;;;551    if (iii!=rx_buffer0[index_offset0(index,-1)]) goto error_cc;	
0004da  f04f31ff          MOV      r1,#0xffffffff
0004de  4630              MOV      r0,r6
0004e0  f7fffffe          BL       index_offset0
0004e4  5c18              LDRB     r0,[r3,r0]
0004e6  42a0              CMP      r0,r4
0004e8  d101              BNE      |L1.1262|
;;;552    
;;;553    
;;;554    //success_cc:
;;;555    return 1;
0004ea  2001              MOVS     r0,#1
;;;556    error_cc:
;;;557    return 0;
;;;558    
;;;559    }
0004ec  bd70              POP      {r4-r6,pc}
                  |L1.1262|
0004ee  2000              MOVS     r0,#0                 ;557
0004f0  bd70              POP      {r4-r6,pc}
;;;560    
                          ENDP

                  uart_in0 PROC
;;;561    //-----------------------------------------------
;;;562    void uart_in0(void)
0004f2  e92d41f0          PUSH     {r4-r8,lr}
;;;563    {
;;;564    char temp,i/*,count*/;
;;;565    
;;;566    //__disable_irq();
;;;567    
;;;568    if(rx_buffer_overflow0)
0004f6  4c2c              LDR      r4,|L1.1448|
0004f8  2500              MOVS     r5,#0
0004fa  78a0              LDRB     r0,[r4,#2]  ; rx_buffer_overflow0
0004fc  b128              CBZ      r0,|L1.1290|
;;;569    	{
;;;570    	rx_wr_index0=0;
0004fe  80a5              STRH     r5,[r4,#4]
;;;571    	rx_rd_index0=0;
000500  80e5              STRH     r5,[r4,#6]
;;;572    	rx_counter0=0;
000502  8125              STRH     r5,[r4,#8]
;;;573    	rx_buffer_overflow0=0;
000504  70a5              STRB     r5,[r4,#2]
                  |L1.1286|
;;;574    	}    
;;;575    	
;;;576    if(rx_counter0&&(rx_buffer0[index_offset0(rx_wr_index0,-1)])==END)
;;;577    	{
;;;578    	
;;;579         temp=rx_buffer0[index_offset0(rx_wr_index0,-3)];
;;;580        	if(temp<100) 
;;;581        		{
;;;582        		if(control_check0(index_offset0(rx_wr_index0,-1)))
;;;583        			{
;;;584        		
;;;585        			rx_rd_index0=index_offset0(rx_wr_index0,-3-temp);
;;;586        			for(i=0;i<temp;i++)
;;;587    				{
;;;588    				UIB0[i]=rx_buffer0[index_offset0(rx_rd_index0,i)];
;;;589    				} 
;;;590    			rx_rd_index0=rx_wr_index0;
;;;591    			rx_counter0=0;
;;;592    			
;;;593    			uart_in_an0();
;;;594        			}
;;;595     	
;;;596        		} 
;;;597        	}	
;;;598    
;;;599    
;;;600    //__enable_irq();     
;;;601    }   	
000506  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1290|
00050a  8920              LDRH     r0,[r4,#8]            ;576  ; rx_counter0
00050c  2800              CMP      r0,#0                 ;576
00050e  d0fa              BEQ      |L1.1286|
000510  88a0              LDRH     r0,[r4,#4]            ;576  ; rx_wr_index0
000512  f04f32ff          MOV      r2,#0xffffffff        ;576
000516  4611              MOV      r1,r2                 ;576
000518  b200              SXTH     r0,r0                 ;576
00051a  f7fffffe          BL       index_offset0
00051e  4f21              LDR      r7,|L1.1444|
000520  5c38              LDRB     r0,[r7,r0]            ;576
000522  280a              CMP      r0,#0xa               ;576
000524  d1ef              BNE      |L1.1286|
000526  88a0              LDRH     r0,[r4,#4]            ;579  ; rx_wr_index0
000528  f06f0102          MVN      r1,#2                 ;579
00052c  b200              SXTH     r0,r0                 ;579
00052e  f7fffffe          BL       index_offset0
000532  5c3e              LDRB     r6,[r7,r0]            ;579
000534  2e64              CMP      r6,#0x64              ;580
000536  d2e6              BCS      |L1.1286|
000538  88a0              LDRH     r0,[r4,#4]            ;582  ; rx_wr_index0
00053a  4611              MOV      r1,r2                 ;582
00053c  b200              SXTH     r0,r0                 ;582
00053e  f7fffffe          BL       index_offset0
000542  f7fffffe          BL       control_check0
000546  2800              CMP      r0,#0                 ;582
000548  d0dd              BEQ      |L1.1286|
00054a  1cf0              ADDS     r0,r6,#3              ;585
00054c  4241              RSBS     r1,r0,#0              ;585
00054e  88a0              LDRH     r0,[r4,#4]            ;585  ; rx_wr_index0
000550  b200              SXTH     r0,r0                 ;585
000552  f7fffffe          BL       index_offset0
000556  80e0              STRH     r0,[r4,#6]            ;585
000558  2200              MOVS     r2,#0                 ;586
00055a  f1a70364          SUB      r3,r7,#0x64           ;588
00055e  e008              B        |L1.1394|
                  |L1.1376|
000560  88e0              LDRH     r0,[r4,#6]            ;588  ; rx_rd_index0
000562  4611              MOV      r1,r2                 ;588
000564  b200              SXTH     r0,r0                 ;588
000566  f7fffffe          BL       index_offset0
00056a  5c38              LDRB     r0,[r7,r0]            ;588
00056c  5498              STRB     r0,[r3,r2]            ;588
00056e  1c52              ADDS     r2,r2,#1              ;586
000570  b2d2              UXTB     r2,r2                 ;586
                  |L1.1394|
000572  42b2              CMP      r2,r6                 ;586
000574  d3f4              BCC      |L1.1376|
000576  88a0              LDRH     r0,[r4,#4]            ;590  ; rx_wr_index0
000578  80e0              STRH     r0,[r4,#6]            ;590
00057a  8125              STRH     r5,[r4,#8]            ;591
00057c  e8bd41f0          POP      {r4-r8,lr}            ;593
000580  e7fe              B        uart_in_an0
                          ENDP

                  NVIC_EnableIRQ PROC
;;;1095    */
;;;1096   static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000582  f000021f          AND      r2,r0,#0x1f
;;;1097   {
;;;1098     NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000586  2101              MOVS     r1,#1
000588  4091              LSLS     r1,r1,r2
00058a  0940              LSRS     r0,r0,#5
00058c  f04f22e0          MOV      r2,#0xe000e000
000590  eb020080          ADD      r0,r2,r0,LSL #2
000594  f8c01100          STR      r1,[r0,#0x100]
;;;1099   }
000598  4770              BX       lr
;;;1100   
                          ENDP

00059a  0000              DCW      0x0000
                  |L1.1436|
                          DCD      load_U
                  |L1.1440|
                          DCD      load_I
                  |L1.1444|
                          DCD      ||.bss||+0x64
                  |L1.1448|
                          DCD      ||.data||

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  uart_out0 PROC
;;;72     //-----------------------------------------------
;;;73     char crc_87(char* ptr,char num)
000000  b5ff              PUSH     {r0-r7,lr}
;;;74     {
;;;75     char r,j;
;;;76     r=*ptr;
000002  ad09              ADD      r5,sp,#0x24
;;;77     
;;;78     for(j=1;j<num;j++)
000004  cdd0              LDM      r5!,{r4,r6,r7}
;;;79     	{
;;;80          ptr++;
;;;81     	r=((*ptr)^Table87[r]);
000006  f88d1000          STRB     r1,[sp,#0]
00000a  f88d2001          STRB     r2,[sp,#1]
00000e  f88d3002          STRB     r3,[sp,#2]
000012  2500              MOVS     r5,#0
000014  f88d4003          STRB     r4,[sp,#3]            ;78
000018  f88d6004          STRB     r6,[sp,#4]            ;78
;;;82     	}
;;;83     
;;;84     return r;	
00001c  f88d7005          STRB     r7,[sp,#5]
;;;85     } 
000020  4629              MOV      r1,r5
000022  466c              MOV      r4,sp
000024  e003              B        |L2.46|
                  |L2.38|
000026  5c62              LDRB     r2,[r4,r1]
000028  4055              EORS     r5,r5,r2
00002a  1c49              ADDS     r1,r1,#1
00002c  b2c9              UXTB     r1,r1
                  |L2.46|
00002e  4281              CMP      r1,r0
000030  d3f9              BCC      |L2.38|
000032  ea800105          EOR      r1,r0,r5
000036  1822              ADDS     r2,r4,r0
000038  5420              STRB     r0,[r4,r0]
00003a  7051              STRB     r1,[r2,#1]
00003c  210a              MOVS     r1,#0xa
00003e  2500              MOVS     r5,#0
000040  7091              STRB     r1,[r2,#2]
000042  1cc6              ADDS     r6,r0,#3
000044  e004              B        |L2.80|
                  |L2.70|
000046  5d60              LDRB     r0,[r4,r5]
000048  f7fffffe          BL       putchar0
00004c  1c6d              ADDS     r5,r5,#1
00004e  b2ed              UXTB     r5,r5
                  |L2.80|
000050  42b5              CMP      r5,r6
000052  d3f8              BCC      |L2.70|
000054  bdff              POP      {r0-r7,pc}
;;;86     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  uart_out_adr_block PROC
;;;72     //-----------------------------------------------
;;;73     char crc_87(char* ptr,char num)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;74     {
;;;75     char r,j;
;;;76     r=*ptr;
000002  460e              MOV      r6,r1
;;;77     
;;;78     for(j=1;j<num;j++)
000004  4615              MOV      r5,r2
;;;79     	{
;;;80          ptr++;
;;;81     	r=((*ptr)^Table87[r]);
000006  2016              MOVS     r0,#0x16
000008  f7fffffe          BL       putchar0
00000c  200a              MOVS     r0,#0xa
00000e  f7fffffe          BL       putchar0
000012  f89d0000          LDRB     r0,[sp,#0]
000016  f080041c          EOR      r4,r0,#0x1c           ;78
00001a  f7fffffe          BL       putchar0
;;;82     	}
;;;83     
;;;84     return r;	
;;;85     } 
00001e  f89d0001          LDRB     r0,[sp,#1]
000022  4044              EORS     r4,r4,r0
000024  f7fffffe          BL       putchar0
000028  f89d0002          LDRB     r0,[sp,#2]
00002c  4044              EORS     r4,r4,r0
00002e  f7fffffe          BL       putchar0
000032  f89d0003          LDRB     r0,[sp,#3]
000036  4044              EORS     r4,r4,r0
000038  f7fffffe          BL       putchar0
00003c  2700              MOVS     r7,#0
00003e  e004              B        |L3.74|
                  |L3.64|
000040  5df0              LDRB     r0,[r6,r7]
000042  4044              EORS     r4,r4,r0
000044  f7fffffe          BL       putchar0
000048  1c7f              ADDS     r7,r7,#1
                  |L3.74|
00004a  42af              CMP      r7,r5
00004c  d3f8              BCC      |L3.64|
00004e  1dad              ADDS     r5,r5,#6
000050  b2e8              UXTB     r0,r5
000052  4044              EORS     r4,r4,r0
000054  f7fffffe          BL       putchar0
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       putchar0
00005e  e8bd40fe          POP      {r1-r7,lr}
000062  200a              MOVS     r0,#0xa
000064  f7ffbffe          B.W      putchar0
;;;86     
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  getchar0 PROC
;;;72     //-----------------------------------------------
;;;73     char crc_87(char* ptr,char num)
000000  4908              LDR      r1,|L4.36|
;;;74     {
;;;75     char r,j;
;;;76     r=*ptr;
000002  890a              LDRH     r2,[r1,#8]  ; rx_counter0
                  |L4.4|
;;;77     
;;;78     for(j=1;j<num;j++)
000004  2a00              CMP      r2,#0
;;;79     	{
;;;80          ptr++;
;;;81     	r=((*ptr)^Table87[r]);
000006  d0fd              BEQ      |L4.4|
000008  4807              LDR      r0,|L4.40|
00000a  88cb              LDRH     r3,[r1,#6]  ; rx_rd_index0
00000c  5cc0              LDRB     r0,[r0,r3]
00000e  1c5b              ADDS     r3,r3,#1
000010  b29b              UXTH     r3,r3
000012  80cb              STRH     r3,[r1,#6]
000014  f5b36f80          CMP      r3,#0x400             ;78
000018  d101              BNE      |L4.30|
00001a  2300              MOVS     r3,#0                 ;78
;;;82     	}
;;;83     
;;;84     return r;	
00001c  80cb              STRH     r3,[r1,#6]
                  |L4.30|
;;;85     } 
00001e  1e52              SUBS     r2,r2,#1
000020  810a              STRH     r2,[r1,#8]
000022  4770              BX       lr
;;;86     
                          ENDP

                  |L4.36|
                          DCD      ||.data||
                  |L4.40|
                          DCD      ||.bss||+0x64

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UIB0
                          %        100
                  rx_buffer0
                          %        1024
                  tx_buffer0
                          %        1024

                          AREA ||area_number.7||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.bss||
                  memo_out
                          %        50

                          AREA ||area_number.8||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.bss||
                  data_rs
                          %        50

                          AREA ||area_number.9||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.bss||
                  data_rs0
                          %        50

                          AREA ||.data||, DATA, ALIGN=2

                  UART0TxEmpty
000000  01                DCB      0x01
                  bRXIN0
000001  00                DCB      0x00
                  rx_buffer_overflow0
000002  0000              DCB      0x00,0x00
                  rx_wr_index0
000004  0000              DCB      0x00,0x00
                  rx_rd_index0
000006  0000              DCB      0x00,0x00
                  rx_counter0
000008  0000              DCB      0x00,0x00
                  tx_wr_index0
00000a  0000              DCB      0x00,0x00
                  tx_rd_index0
00000c  0000              DCB      0x00,0x00
                  tx_counter0
00000e  0000              DCB      0x00,0x00
                  UART0Status
                          DCD      0x00000000

                          AREA ||area_number.12||, DATA, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.data||
                  UART0Count
                          DCD      0x00000000

                          AREA ||area_number.13||, DATA, ALIGN=0

                          EXPORTAS ||area_number.13||, ||.data||
                  flag0
000000  00                DCB      0x00

                          AREA ||area_number.14||, DATA, ALIGN=0

                          EXPORTAS ||area_number.14||, ||.data||
                  plazma_uart0
000000  00                DCB      0x00
