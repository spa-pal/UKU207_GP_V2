; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\uart0.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\uart0.d --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 -DWG12232A --omf_browse=.\EXE\uart0.crf uart0.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  crc_87 PROC
;;;72     //-----------------------------------------------
;;;73     char crc_87(char* ptr,char num)
000000  b530              PUSH     {r4,r5,lr}
;;;74     {
;;;75     char r,j;
;;;76     r=*ptr;
000002  7803              LDRB     r3,[r0,#0]
;;;77     
;;;78     for(j=1;j<num;j++)
000004  2201              MOVS     r2,#1
;;;79     	{
;;;80          ptr++;
;;;81     	r=((*ptr)^Table87[r]);
000006  4cff              LDR      r4,|L1.1028|
000008  e006              B        |L1.24|
00000a  bf00              NOP      
                  |L1.12|
00000c  f8105f01          LDRB     r5,[r0,#1]!
000010  5ce3              LDRB     r3,[r4,r3]
000012  406b              EORS     r3,r3,r5
000014  1c52              ADDS     r2,r2,#1              ;78
000016  b2d2              UXTB     r2,r2                 ;78
                  |L1.24|
000018  428a              CMP      r2,r1                 ;78
00001a  d3f7              BCC      |L1.12|
;;;82     	}
;;;83     
;;;84     return r;	
00001c  4618              MOV      r0,r3
;;;85     } 
00001e  bd30              POP      {r4,r5,pc}
;;;86     
                          ENDP

                  crc_95 PROC
;;;87     //-----------------------------------------------
;;;88     char crc_95(char* ptr,char num)
000020  b530              PUSH     {r4,r5,lr}
;;;89     {
;;;90     char r,j;
;;;91     r=*ptr;
000022  7803              LDRB     r3,[r0,#0]
;;;92     
;;;93     for(j=1;j<num;j++)
000024  2201              MOVS     r2,#1
;;;94     	{
;;;95          ptr++;
;;;96     	r=((*ptr)^Table95[r]);
000026  4cf8              LDR      r4,|L1.1032|
000028  e006              B        |L1.56|
00002a  bf00              NOP      
                  |L1.44|
00002c  f8105f01          LDRB     r5,[r0,#1]!
000030  5ce3              LDRB     r3,[r4,r3]
000032  406b              EORS     r3,r3,r5
000034  1c52              ADDS     r2,r2,#1              ;93
000036  b2d2              UXTB     r2,r2                 ;93
                  |L1.56|
000038  428a              CMP      r2,r1                 ;93
00003a  d3f7              BCC      |L1.44|
;;;97     	}
;;;98     
;;;99     return r;	
00003c  4618              MOV      r0,r3
;;;100    }
00003e  bd30              POP      {r4,r5,pc}
;;;101    
                          ENDP

                  putchar0 PROC
;;;103    //-----------------------------------------------
;;;104    void putchar0(char c)
000040  b530              PUSH     {r4,r5,lr}
;;;105    {
;;;106    while (tx_counter0 == TX_BUFFER_SIZE0);
000042  49f2              LDR      r1,|L1.1036|
000044  f44f6480          MOV      r4,#0x400
000048  89ca              LDRH     r2,[r1,#0xe]  ; tx_counter0
                  |L1.74|
00004a  42a2              CMP      r2,r4
00004c  d0fd              BEQ      |L1.74|
;;;107    if (tx_counter0 || ((LPC_UART0->LSR & 0x60)==0))
00004e  b932              CBNZ     r2,|L1.94|
000050  4bef              LDR      r3,|L1.1040|
000052  7d1d              LDRB     r5,[r3,#0x14]
000054  f0150f60          TST      r5,#0x60
000058  d001              BEQ      |L1.94|
;;;108       {
;;;109       tx_buffer0[tx_wr_index0]=c;
;;;110       if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;;;111       ++tx_counter0;
;;;112       }
;;;113    else LPC_UART0->THR=c;
00005a  7018              STRB     r0,[r3,#0]
;;;114    }
00005c  bd30              POP      {r4,r5,pc}
                  |L1.94|
00005e  4ded              LDR      r5,|L1.1044|
000060  894b              LDRH     r3,[r1,#0xa]          ;109  ; tx_wr_index0
000062  54e8              STRB     r0,[r5,r3]            ;109
000064  1c5b              ADDS     r3,r3,#1              ;110
000066  b298              UXTH     r0,r3                 ;110
000068  8148              STRH     r0,[r1,#0xa]          ;110
00006a  42a0              CMP      r0,r4                 ;110
00006c  d101              BNE      |L1.114|
00006e  2000              MOVS     r0,#0                 ;110
000070  8148              STRH     r0,[r1,#0xa]          ;110
                  |L1.114|
000072  1c52              ADDS     r2,r2,#1              ;111
000074  81ca              STRH     r2,[r1,#0xe]          ;111
000076  bd30              POP      {r4,r5,pc}
;;;115    
                          ENDP

                  uart_out0 PROC
;;;116    //-----------------------------------------------
;;;117    void uart_out0 (char num,char data0,char data1,char data2,char data3,char data4,char data5)
000078  b5ff              PUSH     {r0-r7,lr}
;;;118    {
00007a  ad09              ADD      r5,sp,#0x24
00007c  cdd0              LDM      r5!,{r4,r6,r7}
;;;119    char i,t=0;
;;;120    //char *ptr=&data1;
;;;121    char UOB0[16]; 
;;;122    UOB0[0]=data0;
00007e  f88d1000          STRB     r1,[sp,#0]
;;;123    UOB0[1]=data1;
000082  f88d2001          STRB     r2,[sp,#1]
;;;124    UOB0[2]=data2;
000086  f88d3002          STRB     r3,[sp,#2]
00008a  2500              MOVS     r5,#0                 ;119
;;;125    UOB0[3]=data3;
00008c  f88d4003          STRB     r4,[sp,#3]
;;;126    UOB0[4]=data4;
000090  f88d6004          STRB     r6,[sp,#4]
;;;127    UOB0[5]=data5;
000094  f88d7005          STRB     r7,[sp,#5]
;;;128    
;;;129    for (i=0;i<num;i++)
000098  4629              MOV      r1,r5
00009a  466c              MOV      r4,sp                 ;121
00009c  e003              B        |L1.166|
                  |L1.158|
;;;130    	{
;;;131    	t^=UOB0[i];
00009e  5c62              LDRB     r2,[r4,r1]
0000a0  4055              EORS     r5,r5,r2
0000a2  1c49              ADDS     r1,r1,#1              ;129
0000a4  b2c9              UXTB     r1,r1                 ;129
                  |L1.166|
0000a6  4281              CMP      r1,r0                 ;129
0000a8  d3f9              BCC      |L1.158|
;;;132    	}    
;;;133    UOB0[num]=num;
;;;134    t^=UOB0[num];
0000aa  ea800105          EOR      r1,r0,r5
;;;135    UOB0[num+1]=t;
0000ae  1822              ADDS     r2,r4,r0
0000b0  5420              STRB     r0,[r4,r0]            ;133
0000b2  7051              STRB     r1,[r2,#1]
;;;136    UOB0[num+2]=END;
0000b4  210a              MOVS     r1,#0xa
;;;137    
;;;138    for (i=0;i<num+3;i++)
0000b6  2500              MOVS     r5,#0
0000b8  7091              STRB     r1,[r2,#2]            ;136
0000ba  1cc6              ADDS     r6,r0,#3
0000bc  e004              B        |L1.200|
                  |L1.190|
;;;139    	{
;;;140    	putchar0(UOB0[i]);
0000be  5d60              LDRB     r0,[r4,r5]
0000c0  f7fffffe          BL       putchar0
0000c4  1c6d              ADDS     r5,r5,#1              ;138
0000c6  b2ed              UXTB     r5,r5                 ;138
                  |L1.200|
0000c8  42b5              CMP      r5,r6                 ;138
0000ca  d3f8              BCC      |L1.190|
;;;141    	}   	
;;;142    }
0000cc  bdff              POP      {r0-r7,pc}
;;;143    
                          ENDP

                  uart_out_adr0 PROC
;;;144    //-----------------------------------------------
;;;145    void uart_out_adr0 (char *ptr, char len)
0000ce  b570              PUSH     {r4-r6,lr}
;;;146    {
0000d0  b08d              SUB      sp,sp,#0x34
;;;147    char UOB[50]/*={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}*/;
;;;148    char i,t=0;
0000d2  2200              MOVS     r2,#0
;;;149    
;;;150    for(i=0;i<len;i++)
0000d4  4613              MOV      r3,r2
0000d6  466c              MOV      r4,sp                 ;147
0000d8  e004              B        |L1.228|
                  |L1.218|
;;;151    	{
;;;152    	UOB[i]=ptr[i];
0000da  5cc5              LDRB     r5,[r0,r3]
0000dc  54e5              STRB     r5,[r4,r3]
;;;153    	t^=UOB[i];
0000de  406a              EORS     r2,r2,r5
0000e0  1c5b              ADDS     r3,r3,#1              ;150
0000e2  b2db              UXTB     r3,r3                 ;150
                  |L1.228|
0000e4  428b              CMP      r3,r1                 ;150
0000e6  d3f8              BCC      |L1.218|
;;;154    	}
;;;155    //if(!t)t=0xff;
;;;156    UOB[len]=len;
;;;157    t^=len;	
;;;158    UOB[len+1]=t;	
0000e8  1860              ADDS     r0,r4,r1
0000ea  5461              STRB     r1,[r4,r1]            ;156
0000ec  404a              EORS     r2,r2,r1              ;157
0000ee  7042              STRB     r2,[r0,#1]
;;;159    UOB[len+2]=END;
0000f0  220a              MOVS     r2,#0xa
;;;160    //UOB[0]=i+1;
;;;161    //UOB[i]=t^UOB[0];
;;;162    //UOB[i+1]=END;
;;;163    	
;;;164    //puts(UOB); 
;;;165    for (i=0;i<len+3;i++)
0000f2  2500              MOVS     r5,#0
0000f4  7082              STRB     r2,[r0,#2]            ;159
0000f6  1cce              ADDS     r6,r1,#3
0000f8  e004              B        |L1.260|
                  |L1.250|
;;;166    	{
;;;167    	putchar0(UOB[i]);
0000fa  5d60              LDRB     r0,[r4,r5]
0000fc  f7fffffe          BL       putchar0
000100  1c6d              ADDS     r5,r5,#1              ;165
000102  b2ed              UXTB     r5,r5                 ;165
                  |L1.260|
000104  42b5              CMP      r5,r6                 ;165
000106  d3f8              BCC      |L1.250|
;;;168    	}   
;;;169    }
000108  b00d              ADD      sp,sp,#0x34
00010a  bd70              POP      {r4-r6,pc}
;;;170    
                          ENDP

                  uart_out_adr_block PROC
;;;172    //-----------------------------------------------
;;;173    void uart_out_adr_block (unsigned long adress,char *ptr, char len)
00010c  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;174    {
00010e  460e              MOV      r6,r1
000110  4615              MOV      r5,r2
;;;175    //char UOB[100]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
;;;176    char /*i,*/temp11,t=0;
;;;177    unsigned i11;
;;;178    
;;;179    t=0;
;;;180    temp11=CMND;
000112  2016              MOVS     r0,#0x16
;;;181    t^=temp11;
;;;182    putchar0(temp11);
000114  f7fffffe          BL       putchar0
;;;183    
;;;184    temp11=10;
000118  200a              MOVS     r0,#0xa
;;;185    t^=temp11;
;;;186    putchar0(temp11);
00011a  f7fffffe          BL       putchar0
;;;187    
;;;188    temp11=(*((char*)&adress));
00011e  f89d0000          LDRB     r0,[sp,#0]
;;;189    t^=temp11;
000122  f080041c          EOR      r4,r0,#0x1c
;;;190    putchar0(temp11);
000126  f7fffffe          BL       putchar0
;;;191    
;;;192    temp11=(*(((char*)&adress)+1));
00012a  f89d0001          LDRB     r0,[sp,#1]
;;;193    t^=temp11;
00012e  4044              EORS     r4,r4,r0
;;;194    putchar0(temp11);
000130  f7fffffe          BL       putchar0
;;;195    
;;;196    temp11=(*(((char*)&adress)+2));
000134  f89d0002          LDRB     r0,[sp,#2]
;;;197    t^=temp11;
000138  4044              EORS     r4,r4,r0
;;;198    putchar0(temp11);
00013a  f7fffffe          BL       putchar0
;;;199    
;;;200    temp11=(*(((char*)&adress)+3));
00013e  f89d0003          LDRB     r0,[sp,#3]
;;;201    t^=temp11;
000142  4044              EORS     r4,r4,r0
;;;202    putchar0(temp11);
000144  f7fffffe          BL       putchar0
;;;203    
;;;204    
;;;205    for(i11=0;i11<len;i11++)
000148  2700              MOVS     r7,#0
00014a  e004              B        |L1.342|
                  |L1.332|
;;;206    	{
;;;207    	temp11=ptr[i11];
00014c  5df0              LDRB     r0,[r6,r7]
;;;208    	t^=temp11;
00014e  4044              EORS     r4,r4,r0
;;;209    	putchar0(temp11);
000150  f7fffffe          BL       putchar0
000154  1c7f              ADDS     r7,r7,#1              ;205
                  |L1.342|
000156  42af              CMP      r7,r5                 ;205
000158  d3f8              BCC      |L1.332|
;;;210    	}
;;;211    	
;;;212    temp11=(len+6);
00015a  1dad              ADDS     r5,r5,#6
00015c  b2e8              UXTB     r0,r5
;;;213    t^=temp11;
00015e  4044              EORS     r4,r4,r0
;;;214    putchar0(temp11);
000160  f7fffffe          BL       putchar0
;;;215    
;;;216    putchar0(t);
000164  4620              MOV      r0,r4
000166  f7fffffe          BL       putchar0
;;;217    
;;;218    putchar0(0x0a);
00016a  e8bd40fe          POP      {r1-r7,lr}
00016e  200a              MOVS     r0,#0xa
000170  e7fe              B        putchar0
;;;219    	
;;;220    }
;;;221    
                          ENDP

                  UARTInit PROC
;;;251    //-----------------------------------------------
;;;252    uint32_t UARTInit( uint32_t PortNum, uint32_t baudrate )
000172  e92d47f0          PUSH     {r4-r10,lr}
;;;253    {
;;;254    uint32_t Fdiv;
;;;255    uint32_t pclkdiv, pclk;
;;;256    
;;;257    
;;;258    
;;;259    if ( PortNum == 0 )
;;;260      	{
;;;261    	LPC_PINCON->PINSEL0 &= ~0x000000F0;
;;;262    	LPC_PINCON->PINSEL0 |= 0x00000050;  /* RxD0 is P0.3 and TxD0 is P0.2 */
;;;263    	/* By default, the PCLKSELx value is zero, thus, the PCLK for
;;;264    	all the peripherals is 1/4 of the SystemFrequency. */
;;;265    	/* Bit 6~7 is for UART0 */
;;;266    	pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
;;;267    	switch ( pclkdiv )
;;;268    		{
;;;269    	  	case 0x00:
;;;270    	  	default:
;;;271    		pclk = SystemFrequency/4;
000176  4aaa              LDR      r2,|L1.1056|
000178  4ea7              LDR      r6,|L1.1048|
00017a  4fa8              LDR      r7,|L1.1052|
00017c  6812              LDR      r2,[r2,#0]
00017e  f04f0903          MOV      r9,#3                 ;255
000182  0893              LSRS     r3,r2,#2
;;;272    		break;
;;;273    	  	case 0x01:
;;;274    		pclk = SystemFrequency;
;;;275    		break; 
;;;276    	  	case 0x02:
;;;277    		pclk = SystemFrequency/2;
000184  0854              LSRS     r4,r2,#1
;;;278    		break; 
;;;279    	  	case 0x03:
;;;280    		pclk = SystemFrequency/8;
;;;281    		break;
;;;282    		}
;;;283    
;;;284        	LPC_UART0->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
000186  f04f0c83          MOV      r12,#0x83
;;;285    	Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
;;;286        	LPC_UART0->DLM = Fdiv / 256;							
;;;287        	LPC_UART0->DLL = Fdiv % 256;
;;;288    	LPC_UART0->LCR = 0x03;		/* DLAB = 0 */
;;;289        	LPC_UART0->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
00018a  f04f0807          MOV      r8,#7
00018e  08d5              LSRS     r5,r2,#3              ;280
000190  b120              CBZ      r0,|L1.412|
;;;290    
;;;291       	NVIC_EnableIRQ(UART0_IRQn);
;;;292    
;;;293        	LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
;;;294        	return (TRUE);
;;;295      	}
;;;296    else if ( PortNum == 1 )
000192  2801              CMP      r0,#1
000194  d028              BEQ      |L1.488|
;;;297      	{
;;;298    	LPC_PINCON->PINSEL4 &= ~0x0000000F;
;;;299    	LPC_PINCON->PINSEL4 |= 0x0000000A;	/* Enable RxD1 P2.1, TxD1 P2.0 */
;;;300    	
;;;301    	/* By default, the PCLKSELx value is zero, thus, the PCLK for
;;;302    	all the peripherals is 1/4 of the SystemFrequency. */
;;;303    	/* Bit 8,9 are for UART1 */
;;;304    	pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
;;;305    	switch ( pclkdiv )
;;;306    		{
;;;307    	  	case 0x00:
;;;308    	  	default:
;;;309    		pclk = SystemFrequency/4;
;;;310    		break;
;;;311    	  	case 0x01:
;;;312    		pclk = SystemFrequency;
;;;313    		break; 
;;;314    	  	case 0x02:
;;;315    		pclk = SystemFrequency/2;
;;;316    		break; 
;;;317    	  	case 0x03:
;;;318    		pclk = SystemFrequency/8;
;;;319    		break;
;;;320    		}
;;;321    
;;;322        	LPC_UART1->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
;;;323    	Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
;;;324        	LPC_UART1->DLM = Fdiv / 256;							
;;;325        	LPC_UART1->DLL = Fdiv % 256;
;;;326    	LPC_UART1->LCR = 0x03;		/* DLAB = 0 */
;;;327        	LPC_UART1->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
;;;328    
;;;329       	NVIC_EnableIRQ(UART1_IRQn);
;;;330    
;;;331        	LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART1 interrupt */
;;;332        	return (TRUE);
;;;333      	}
;;;334    return( FALSE ); 
000196  2000              MOVS     r0,#0
                  |L1.408|
;;;335    }
000198  e8bd87f0          POP      {r4-r10,pc}
                  |L1.412|
00019c  6830              LDR      r0,[r6,#0]            ;261
00019e  f02000f0          BIC      r0,r0,#0xf0           ;261
0001a2  6030              STR      r0,[r6,#0]            ;261
0001a4  6830              LDR      r0,[r6,#0]            ;262
0001a6  f0400050          ORR      r0,r0,#0x50           ;262
0001aa  6030              STR      r0,[r6,#0]            ;262
0001ac  f8d701a8          LDR      r0,[r7,#0x1a8]        ;266
0001b0  f3c01081          UBFX     r0,r0,#6,#2           ;266
0001b4  2801              CMP      r0,#1                 ;267
0001b6  d008              BEQ      |L1.458|
0001b8  2802              CMP      r0,#2                 ;267
0001ba  d003              BEQ      |L1.452|
0001bc  2803              CMP      r0,#3                 ;267
0001be  d003              BEQ      |L1.456|
0001c0  461a              MOV      r2,r3                 ;267
0001c2  e002              B        |L1.458|
                  |L1.452|
0001c4  4622              MOV      r2,r4                 ;272
0001c6  e000              B        |L1.458|
                  |L1.456|
0001c8  462a              MOV      r2,r5                 ;278
                  |L1.458|
0001ca  4e91              LDR      r6,|L1.1040|
0001cc  f886c00c          STRB     r12,[r6,#0xc]         ;284
0001d0  0910              LSRS     r0,r2,#4              ;285
0001d2  fbb0f0f1          UDIV     r0,r0,r1              ;285
0001d6  0a01              LSRS     r1,r0,#8              ;286
0001d8  7131              STRB     r1,[r6,#4]            ;286
0001da  7030              STRB     r0,[r6,#0]            ;287
0001dc  f886900c          STRB     r9,[r6,#0xc]          ;288
0001e0  f8868008          STRB     r8,[r6,#8]            ;289
0001e4  2005              MOVS     r0,#5                 ;291
0001e6  e024              B        |L1.562|
                  |L1.488|
0001e8  6930              LDR      r0,[r6,#0x10]         ;298
0001ea  f020000f          BIC      r0,r0,#0xf            ;298
0001ee  6130              STR      r0,[r6,#0x10]         ;298
0001f0  6930              LDR      r0,[r6,#0x10]         ;299
0001f2  f040000a          ORR      r0,r0,#0xa            ;299
0001f6  6130              STR      r0,[r6,#0x10]         ;299
0001f8  f8d701a8          LDR      r0,[r7,#0x1a8]        ;304
0001fc  f3c02001          UBFX     r0,r0,#8,#2           ;304
000200  2801              CMP      r0,#1                 ;305
000202  d008              BEQ      |L1.534|
000204  2802              CMP      r0,#2                 ;305
000206  d003              BEQ      |L1.528|
000208  2803              CMP      r0,#3                 ;305
00020a  d003              BEQ      |L1.532|
00020c  461a              MOV      r2,r3                 ;305
00020e  e002              B        |L1.534|
                  |L1.528|
000210  4622              MOV      r2,r4                 ;310
000212  e000              B        |L1.534|
                  |L1.532|
000214  462a              MOV      r2,r5                 ;316
                  |L1.534|
000216  4e83              LDR      r6,|L1.1060|
000218  f886c00c          STRB     r12,[r6,#0xc]         ;322
00021c  0910              LSRS     r0,r2,#4              ;323
00021e  fbb0f0f1          UDIV     r0,r0,r1              ;323
000222  0a01              LSRS     r1,r0,#8              ;324
000224  7131              STRB     r1,[r6,#4]            ;324
000226  7030              STRB     r0,[r6,#0]            ;325
000228  f886900c          STRB     r9,[r6,#0xc]          ;326
00022c  f8868008          STRB     r8,[r6,#8]            ;327
000230  2006              MOVS     r0,#6                 ;329
                  |L1.562|
000232  f7fffffe          BL       NVIC_EnableIRQ
000236  f8c68004          STR      r8,[r6,#4]            ;331
00023a  2001              MOVS     r0,#1                 ;332
00023c  e7ac              B        |L1.408|
;;;336    
                          ENDP

                  getchar0 PROC
;;;337    //-----------------------------------------------
;;;338    char getchar0(void)
00023e  4973              LDR      r1,|L1.1036|
;;;339    {
;;;340    char data;
;;;341    while (rx_counter0==0);
000240  890a              LDRH     r2,[r1,#8]  ; rx_counter0
                  |L1.578|
000242  2a00              CMP      r2,#0
000244  d0fd              BEQ      |L1.578|
;;;342    data=rx_buffer0[rx_rd_index0];
000246  4878              LDR      r0,|L1.1064|
000248  88cb              LDRH     r3,[r1,#6]  ; rx_rd_index0
00024a  5cc0              LDRB     r0,[r0,r3]
;;;343    if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
00024c  1c5b              ADDS     r3,r3,#1
00024e  b29b              UXTH     r3,r3
000250  80cb              STRH     r3,[r1,#6]
000252  f5b36f80          CMP      r3,#0x400
000256  d101              BNE      |L1.604|
000258  2300              MOVS     r3,#0
00025a  80cb              STRH     r3,[r1,#6]
                  |L1.604|
;;;344    --rx_counter0;
00025c  1e52              SUBS     r2,r2,#1
00025e  810a              STRH     r2,[r1,#8]
;;;345    return data;
;;;346    }
000260  4770              BX       lr
;;;347    
                          ENDP

                  UART0_IRQHandler PROC
;;;348    //***********************************************
;;;349    void UART0_IRQHandler (void) 
000262  e92d43f0          PUSH     {r4-r9,lr}
;;;350    {
;;;351    uint8_t IIRValue, LSRValue;
;;;352    uint8_t Dummy = Dummy;
;;;353    char /*status,u0iir,*/data;
;;;354    
;;;355    //uart_plazma++;
;;;356    			
;;;357    IIRValue = LPC_UART0->IIR;
000266  f8df81a8          LDR      r8,|L1.1040|
00026a  f8d80008          LDR      r0,[r8,#8]
;;;358        
;;;359    IIRValue >>= 1;			/* skip pending bit in IIR */
;;;360    IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
;;;361    if ( IIRValue == IIR_RLS )		/* Receive Line Status */
;;;362      	{
;;;363    	LSRValue = LPC_UART0->LSR;
;;;364    	/* Receive Line Status */
;;;365    	if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
;;;366    		{
;;;367    	  	/* There are errors or break interrupt */
;;;368    	  	/* Read LSR will clear the interrupt */
;;;369    	  	UART0Status = LSRValue;
;;;370    	  	Dummy = LPC_UART0->RBR;		/* Dummy read on RX to clear 
;;;371    							interrupt, then bail out */
;;;372    	  	return;
;;;373    		}
;;;374    	if ( LSRValue & LSR_RDR )	/* Receive Data Ready */			
;;;375    		{
;;;376    		
;;;377    		data=LPC_UART0->RBR;
;;;378    		rx_buffer0[rx_wr_index0]=data;
00026e  4e6e              LDR      r6,|L1.1064|
000270  f3c00542          UBFX     r5,r0,#1,#3           ;360
000274  4865              LDR      r0,|L1.1036|
;;;379       		bRXIN0=1;
000276  2701              MOVS     r7,#1
;;;380       		if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
000278  f44f6980          MOV      r9,#0x400
00027c  8881              LDRH     r1,[r0,#4]            ;378
00027e  460a              MOV      r2,r1                 ;378
000280  1c49              ADDS     r1,r1,#1
000282  b28b              UXTH     r3,r1
;;;381       		if (++rx_counter0 == RX_BUFFER_SIZE0)
000284  8901              LDRH     r1,[r0,#8]
000286  1c49              ADDS     r1,r1,#1
000288  b28c              UXTH     r4,r1
00028a  2100              MOVS     r1,#0                 ;380
00028c  2d03              CMP      r5,#3                 ;361
00028e  d01c              BEQ      |L1.714|
;;;382          		{
;;;383          		rx_counter0=0;
;;;384          		rx_buffer_overflow0=1;
;;;385          		}
;;;386    		}
;;;387      	}
;;;388    else if ( IIRValue == IIR_RDA )	/* Receive Data Available */
000290  2d02              CMP      r5,#2
000292  d033              BEQ      |L1.764|
;;;389      	{
;;;390    	
;;;391    	data=LPC_UART0->RBR;
;;;392    	rx_buffer0[rx_wr_index0]=data;
;;;393       	bRXIN0=1;
;;;394       	if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;;;395       	if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;396          	{
;;;397          	rx_counter0=0;
;;;398          	rx_buffer_overflow0=1;
;;;399          	}
;;;400    
;;;401    	modbus_rx_buffer[modbus_rx_buffer_ptr]=data;
;;;402    	modbus_rx_buffer_ptr++;
;;;403    	modbus_timeout_cnt=0;
;;;404      	}
;;;405    else if ( IIRValue == IIR_CTI )	/* Character timeout indicator */
000294  2d06              CMP      r5,#6
000296  d047              BEQ      |L1.808|
;;;406      	{
;;;407    	/* Character Time-out indicator */
;;;408    	UART0Status |= 0x100;		/* Bit 9 as the CTI error */
;;;409      	}
;;;410    else if ( IIRValue == IIR_THRE )	/* THRE, transmit holding register empty */
000298  2d01              CMP      r5,#1
00029a  d114              BNE      |L1.710|
;;;411      	{
;;;412    	/* THRE interrupt */
;;;413    	
;;;414    	LSRValue = LPC_UART0->LSR;		/* Check status in the LSR to see if
00029c  f8982014          LDRB     r2,[r8,#0x14]
;;;415    									valid data in U0THR or not */
;;;416    	if ( LSRValue & LSR_THRE )
0002a0  0692              LSLS     r2,r2,#26
0002a2  d53f              BPL      |L1.804|
;;;417    		{
;;;418    	  	UART0TxEmpty = 1;
0002a4  7007              STRB     r7,[r0,#0]
;;;419    		if (tx_counter0)
0002a6  89c2              LDRH     r2,[r0,#0xe]  ; tx_counter0
0002a8  2a00              CMP      r2,#0
0002aa  d00c              BEQ      |L1.710|
;;;420       			{
;;;421       			--tx_counter0;
0002ac  1e52              SUBS     r2,r2,#1
0002ae  81c2              STRH     r2,[r0,#0xe]
;;;422       			LPC_UART0->THR=tx_buffer0[tx_rd_index0];
0002b0  4b58              LDR      r3,|L1.1044|
0002b2  8982              LDRH     r2,[r0,#0xc]  ; tx_rd_index0
0002b4  5c9b              LDRB     r3,[r3,r2]
0002b6  f8883000          STRB     r3,[r8,#0]
;;;423       			if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0002ba  1c52              ADDS     r2,r2,#1
0002bc  b292              UXTH     r2,r2
0002be  8182              STRH     r2,[r0,#0xc]
0002c0  454a              CMP      r2,r9
0002c2  d100              BNE      |L1.710|
0002c4  8181              STRH     r1,[r0,#0xc]
                  |L1.710|
;;;424       			}
;;;425    		}
;;;426    	else
;;;427    		{
;;;428    	  	UART0TxEmpty = 0;
;;;429    		}
;;;430      	}
;;;431    }
0002c6  e8bd83f0          POP      {r4-r9,pc}
                  |L1.714|
0002ca  f8985014          LDRB     r5,[r8,#0x14]         ;363
0002ce  f0150f9e          TST      r5,#0x9e              ;365
0002d2  d003              BEQ      |L1.732|
0002d4  6105              STR      r5,[r0,#0x10]         ;369  ; UART0Status
0002d6  f8980000          LDRB     r0,[r8,#0]            ;370
0002da  e7f4              B        |L1.710|
                  |L1.732|
0002dc  07ed              LSLS     r5,r5,#31             ;374
0002de  d0f2              BEQ      |L1.710|
0002e0  f8985000          LDRB     r5,[r8,#0]            ;377
0002e4  54b5              STRB     r5,[r6,r2]            ;378
0002e6  7047              STRB     r7,[r0,#1]            ;379
0002e8  8083              STRH     r3,[r0,#4]            ;380
0002ea  454b              CMP      r3,r9                 ;380
0002ec  d100              BNE      |L1.752|
0002ee  8081              STRH     r1,[r0,#4]            ;380
                  |L1.752|
0002f0  8104              STRH     r4,[r0,#8]            ;381
0002f2  454c              CMP      r4,r9                 ;381
0002f4  d1e7              BNE      |L1.710|
0002f6  8101              STRH     r1,[r0,#8]            ;383
0002f8  7087              STRB     r7,[r0,#2]            ;384
0002fa  e7e4              B        |L1.710|
                  |L1.764|
0002fc  f8985000          LDRB     r5,[r8,#0]            ;391
000300  54b5              STRB     r5,[r6,r2]            ;392
000302  7047              STRB     r7,[r0,#1]            ;393
000304  8083              STRH     r3,[r0,#4]            ;394
000306  454b              CMP      r3,r9                 ;394
000308  d100              BNE      |L1.780|
00030a  8081              STRH     r1,[r0,#4]            ;394
                  |L1.780|
00030c  8104              STRH     r4,[r0,#8]            ;395
00030e  454c              CMP      r4,r9                 ;395
000310  d101              BNE      |L1.790|
000312  8101              STRH     r1,[r0,#8]            ;397
000314  7087              STRB     r7,[r0,#2]            ;398
                  |L1.790|
000316  4a46              LDR      r2,|L1.1072|
000318  4b44              LDR      r3,|L1.1068|
00031a  7810              LDRB     r0,[r2,#0]            ;401  ; modbus_rx_buffer_ptr
00031c  541d              STRB     r5,[r3,r0]            ;401
00031e  1c40              ADDS     r0,r0,#1              ;402
000320  7010              STRB     r0,[r2,#0]            ;402
000322  4844              LDR      r0,|L1.1076|
                  |L1.804|
000324  7001              STRB     r1,[r0,#0]            ;428
000326  e7ce              B        |L1.710|
                  |L1.808|
000328  6901              LDR      r1,[r0,#0x10]         ;408  ; UART0Status
00032a  f4417180          ORR      r1,r1,#0x100          ;408
00032e  6101              STR      r1,[r0,#0x10]         ;408  ; UART0Status
000330  e7c9              B        |L1.710|
;;;432    
                          ENDP

                  uart_in_an0 PROC
;;;435    //-----------------------------------------------
;;;436    void uart_in_an0(void)
000332  b5f0              PUSH     {r4-r7,lr}
;;;437    {
;;;438    
;;;439    
;;;440    
;;;441    if((UIB0[0]=='r')&&(UIB0[1]=='e')&&(UIB0[2]=='a')&&(UIB0[3]=='d')&&(UIB0[6]==crc_87(UIB0,6))&&(UIB0[7]==crc_95(UIB0,6)))
000334  4c3c              LDR      r4,|L1.1064|
000336  2672              MOVS     r6,#0x72
000338  3c64              SUBS     r4,r4,#0x64
00033a  2765              MOVS     r7,#0x65
00033c  7820              LDRB     r0,[r4,#0]  ; UIB0
00033e  b089              SUB      sp,sp,#0x24           ;437
000340  2872              CMP      r0,#0x72
000342  d179              BNE      |L1.1080|
000344  7860              LDRB     r0,[r4,#1]  ; UIB0
000346  2865              CMP      r0,#0x65
000348  d177              BNE      |L1.1082|
00034a  78a0              LDRB     r0,[r4,#2]  ; UIB0
00034c  2861              CMP      r0,#0x61
00034e  d174              BNE      |L1.1082|
000350  78e0              LDRB     r0,[r4,#3]  ; UIB0
000352  2864              CMP      r0,#0x64
000354  d171              BNE      |L1.1082|
000356  2106              MOVS     r1,#6
000358  4620              MOV      r0,r4
00035a  f7fffffe          BL       crc_87
00035e  79a1              LDRB     r1,[r4,#6]  ; UIB0
000360  4288              CMP      r0,r1
000362  d174              BNE      |L1.1102|
000364  2106              MOVS     r1,#6
000366  4620              MOV      r0,r4
000368  f7fffffe          BL       crc_95
00036c  79e1              LDRB     r1,[r4,#7]  ; UIB0
00036e  4288              CMP      r0,r1
000370  d16d              BNE      |L1.1102|
;;;442    	{
;;;443    	unsigned short ptr;
;;;444    	unsigned long data1,data2;
;;;445    	char temp_out[20];
;;;446    	ptr=UIB0[4]+(UIB0[5]*256U);
000372  7920              LDRB     r0,[r4,#4]  ; UIB0
000374  7961              LDRB     r1,[r4,#5]  ; UIB0
000376  eb002001          ADD      r0,r0,r1,LSL #8
00037a  b280              UXTH     r0,r0
00037c  f8ad0014          STRH     r0,[sp,#0x14]
000380  4605              MOV      r5,r0
;;;447    	data1=lc640_read_long(ptr);
000382  f7fffffe          BL       lc640_read_long
;;;448    	data2=lc640_read_long(ptr+4);
000386  9007              STR      r0,[sp,#0x1c]
000388  1d28              ADDS     r0,r5,#4
00038a  f7fffffe          BL       lc640_read_long
;;;449    	temp_out[0]='r';
00038e  9006              STR      r0,[sp,#0x18]
000390  f88d6000          STRB     r6,[sp,#0]
;;;450    	temp_out[1]='e';
000394  f88d7001          STRB     r7,[sp,#1]
;;;451    	temp_out[2]='a';
000398  2061              MOVS     r0,#0x61
00039a  f88d0002          STRB     r0,[sp,#2]
;;;452    	temp_out[3]='d';
00039e  2064              MOVS     r0,#0x64
0003a0  f88d0003          STRB     r0,[sp,#3]
;;;453    	temp_out[4]=*((char*)&ptr);
0003a4  f89d0014          LDRB     r0,[sp,#0x14]
0003a8  f88d0004          STRB     r0,[sp,#4]
;;;454    	temp_out[5]=*(((char*)&ptr)+1);	
0003ac  f89d0015          LDRB     r0,[sp,#0x15]
0003b0  f88d0005          STRB     r0,[sp,#5]
;;;455    	temp_out[6]=*((char*)&data1);
0003b4  f89d001c          LDRB     r0,[sp,#0x1c]
0003b8  f88d0006          STRB     r0,[sp,#6]
;;;456    	temp_out[7]=*(((char*)&data1)+1);		
0003bc  f89d001d          LDRB     r0,[sp,#0x1d]
0003c0  f88d0007          STRB     r0,[sp,#7]
;;;457    	temp_out[8]=*(((char*)&data1)+2);	
0003c4  f89d001e          LDRB     r0,[sp,#0x1e]
0003c8  f88d0008          STRB     r0,[sp,#8]
;;;458    	temp_out[9]=*(((char*)&data1)+3);		
0003cc  f89d001f          LDRB     r0,[sp,#0x1f]
0003d0  f88d0009          STRB     r0,[sp,#9]
;;;459    	temp_out[10]=*((char*)&data2);
0003d4  f89d0018          LDRB     r0,[sp,#0x18]
0003d8  f88d000a          STRB     r0,[sp,#0xa]
;;;460    	temp_out[11]=*(((char*)&data2)+1);		
0003dc  f89d0019          LDRB     r0,[sp,#0x19]
0003e0  f88d000b          STRB     r0,[sp,#0xb]
;;;461    	temp_out[12]=*(((char*)&data2)+2);	
0003e4  f89d001a          LDRB     r0,[sp,#0x1a]
0003e8  f88d000c          STRB     r0,[sp,#0xc]
;;;462    	temp_out[13]=*(((char*)&data2)+3);	
0003ec  f89d001b          LDRB     r0,[sp,#0x1b]
0003f0  f88d000d          STRB     r0,[sp,#0xd]
;;;463    	temp_out[14]=crc_87(temp_out,14);	
0003f4  210e              MOVS     r1,#0xe
0003f6  4668              MOV      r0,sp
0003f8  f7fffffe          BL       crc_87
0003fc  f88d000e          STRB     r0,[sp,#0xe]
;;;464    	temp_out[15]=crc_95(temp_out,14);			
000400  210e              MOVS     r1,#0xe
000402  e01b              B        |L1.1084|
                  |L1.1028|
                          DCD      Table87
                  |L1.1032|
                          DCD      Table95
                  |L1.1036|
                          DCD      ||.data||
                  |L1.1040|
                          DCD      0x4000c000
                  |L1.1044|
                          DCD      ||.bss||+0x464
                  |L1.1048|
                          DCD      0x4002c000
                  |L1.1052|
                          DCD      0x400fc000
                  |L1.1056|
                          DCD      SystemFrequency
                  |L1.1060|
                          DCD      0x40010000
                  |L1.1064|
                          DCD      ||.bss||+0x64
                  |L1.1068|
                          DCD      modbus_rx_buffer
                  |L1.1072|
                          DCD      modbus_rx_buffer_ptr
                  |L1.1076|
                          DCD      modbus_timeout_cnt
                  |L1.1080|
000438  e009              B        |L1.1102|
                  |L1.1082|
00043a  e08d              B        |L1.1368|
                  |L1.1084|
00043c  4668              MOV      r0,sp
00043e  f7fffffe          BL       crc_95
000442  f88d000f          STRB     r0,[sp,#0xf]
;;;465    	uart_out_adr0(temp_out,16);
000446  2110              MOVS     r1,#0x10
000448  4668              MOV      r0,sp
00044a  f7fffffe          BL       uart_out_adr0
                  |L1.1102|
;;;466    	}
;;;467    
;;;468    
;;;469    if((UIB0[0]=='w')&&(UIB0[1]=='r')&&(UIB0[2]=='i')&&(UIB0[3]=='t')&&(UIB0[4]=='e')&&(UIB0[15]==crc_87(UIB0,15))&&(UIB0[16]==crc_95(UIB0,15)))
00044e  7820              LDRB     r0,[r4,#0]  ; UIB0
000450  2877              CMP      r0,#0x77
000452  d165              BNE      |L1.1312|
000454  7860              LDRB     r0,[r4,#1]  ; UIB0
000456  2872              CMP      r0,#0x72
000458  d17e              BNE      |L1.1368|
00045a  78a0              LDRB     r0,[r4,#2]  ; UIB0
00045c  2869              CMP      r0,#0x69
00045e  d17b              BNE      |L1.1368|
000460  78e0              LDRB     r0,[r4,#3]  ; UIB0
000462  2874              CMP      r0,#0x74
000464  d17f              BNE      |L1.1382|
000466  7920              LDRB     r0,[r4,#4]  ; UIB0
000468  2865              CMP      r0,#0x65
00046a  d17c              BNE      |L1.1382|
00046c  210f              MOVS     r1,#0xf
00046e  4883              LDR      r0,|L1.1660|
000470  f7fffffe          BL       crc_87
000474  7be1              LDRB     r1,[r4,#0xf]  ; UIB0
000476  4288              CMP      r0,r1
000478  d152              BNE      |L1.1312|
00047a  210f              MOVS     r1,#0xf
00047c  487f              LDR      r0,|L1.1660|
00047e  f7fffffe          BL       crc_95
000482  7c21              LDRB     r1,[r4,#0x10]  ; UIB0
000484  4288              CMP      r0,r1
000486  d14b              BNE      |L1.1312|
;;;470    	{
;;;471    	unsigned short ptr;
;;;472    	unsigned long data1,data2;
;;;473    	char temp_out[20];
;;;474    	ptr=UIB0[5]+(UIB0[6]*256U);
000488  7960              LDRB     r0,[r4,#5]  ; UIB0
00048a  79a1              LDRB     r1,[r4,#6]  ; UIB0
00048c  eb002001          ADD      r0,r0,r1,LSL #8
000490  b285              UXTH     r5,r0
000492  f8ad5018          STRH     r5,[sp,#0x18]
;;;475    	*((char*)&data1)=UIB0[7];
000496  79e0              LDRB     r0,[r4,#7]  ; UIB0
000498  f88d001c          STRB     r0,[sp,#0x1c]
;;;476    	*(((char*)&data1)+1)=UIB0[8];
00049c  7a20              LDRB     r0,[r4,#8]  ; UIB0
00049e  f88d001d          STRB     r0,[sp,#0x1d]
;;;477    	*(((char*)&data1)+2)=UIB0[9];
0004a2  7a60              LDRB     r0,[r4,#9]  ; UIB0
0004a4  f88d001e          STRB     r0,[sp,#0x1e]
;;;478    	*(((char*)&data1)+3)=UIB0[10];
0004a8  7aa0              LDRB     r0,[r4,#0xa]  ; UIB0
0004aa  f88d001f          STRB     r0,[sp,#0x1f]
;;;479    	*((char*)&data2)=UIB0[11];
0004ae  7ae0              LDRB     r0,[r4,#0xb]  ; UIB0
0004b0  f88d0020          STRB     r0,[sp,#0x20]
;;;480    	*(((char*)&data2)+1)=UIB0[12];
0004b4  7b20              LDRB     r0,[r4,#0xc]  ; UIB0
0004b6  f88d0021          STRB     r0,[sp,#0x21]
;;;481    	*(((char*)&data2)+2)=UIB0[13];
0004ba  7b60              LDRB     r0,[r4,#0xd]  ; UIB0
0004bc  f88d0022          STRB     r0,[sp,#0x22]
;;;482    	*(((char*)&data2)+3)=UIB0[14];	
0004c0  7ba0              LDRB     r0,[r4,#0xe]  ; UIB0
0004c2  f88d0023          STRB     r0,[sp,#0x23]
;;;483    	lc640_write_long(ptr,data1);
0004c6  4628              MOV      r0,r5
0004c8  9907              LDR      r1,[sp,#0x1c]
0004ca  f7fffffe          BL       lc640_write_long
;;;484    	lc640_write_long(ptr+4,data2);
0004ce  1d28              ADDS     r0,r5,#4
0004d0  9908              LDR      r1,[sp,#0x20]
0004d2  f7fffffe          BL       lc640_write_long
;;;485    	
;;;486    	//data1=lc640_read_long(ptr);
;;;487    	//data2=lc640_read_long(ptr+4);
;;;488    	temp_out[0]='w';
0004d6  2077              MOVS     r0,#0x77
0004d8  f88d0000          STRB     r0,[sp,#0]
;;;489    	temp_out[1]='r';
0004dc  f88d6001          STRB     r6,[sp,#1]
;;;490    	temp_out[2]='i';
0004e0  2069              MOVS     r0,#0x69
0004e2  f88d0002          STRB     r0,[sp,#2]
;;;491    	temp_out[3]='t';
0004e6  2074              MOVS     r0,#0x74
0004e8  f88d0003          STRB     r0,[sp,#3]
;;;492    	temp_out[4]='e';
0004ec  f88d7004          STRB     r7,[sp,#4]
;;;493    	temp_out[5]=*((char*)&ptr);
0004f0  f89d0018          LDRB     r0,[sp,#0x18]
0004f4  f88d0005          STRB     r0,[sp,#5]
;;;494    	temp_out[6]=*(((char*)&ptr)+1);	
0004f8  f89d0019          LDRB     r0,[sp,#0x19]
0004fc  f88d0006          STRB     r0,[sp,#6]
;;;495    	/*temp_out[6]=*((char*)&data1);
;;;496    	temp_out[7]=*(((char*)&data1)+1);		
;;;497    	temp_out[8]=*(((char*)&data1)+2);	
;;;498    	temp_out[9]=*(((char*)&data1)+3);		
;;;499    	temp_out[10]=*((char*)&data2);
;;;500    	temp_out[11]=*(((char*)&data2)+1);		
;;;501    	temp_out[12]=*(((char*)&data2)+2);	
;;;502    	temp_out[13]=*(((char*)&data2)+3);	*/
;;;503    	temp_out[7]=crc_87(temp_out,7);	
000500  2107              MOVS     r1,#7
000502  4668              MOV      r0,sp
000504  f7fffffe          BL       crc_87
000508  f88d0007          STRB     r0,[sp,#7]
;;;504    	temp_out[8]=crc_95(temp_out,7);			
00050c  2107              MOVS     r1,#7
00050e  4668              MOV      r0,sp
000510  f7fffffe          BL       crc_95
000514  f88d0008          STRB     r0,[sp,#8]
;;;505    	uart_out_adr0(temp_out,9);
000518  2109              MOVS     r1,#9
00051a  4668              MOV      r0,sp
00051c  f7fffffe          BL       uart_out_adr0
                  |L1.1312|
;;;506    	}
;;;507    
;;;508    if(	((UIB0[0]=='g')||(UIB0[0]=='G'))&&
000520  7820              LDRB     r0,[r4,#0]  ; UIB0
000522  2867              CMP      r0,#0x67
000524  d001              BEQ      |L1.1322|
000526  2847              CMP      r0,#0x47
000528  d11d              BNE      |L1.1382|
                  |L1.1322|
;;;509    	((UIB0[1]=='e')||(UIB0[1]=='E'))&&
00052a  7860              LDRB     r0,[r4,#1]  ; UIB0
00052c  2865              CMP      r0,#0x65
00052e  d001              BEQ      |L1.1332|
000530  2845              CMP      r0,#0x45
000532  d118              BNE      |L1.1382|
                  |L1.1332|
;;;510    	((UIB0[2]=='t')||(UIB0[2]=='T'))		)
000534  78a0              LDRB     r0,[r4,#2]  ; UIB0
000536  2874              CMP      r0,#0x74
000538  d001              BEQ      |L1.1342|
00053a  2854              CMP      r0,#0x54
00053c  d113              BNE      |L1.1382|
                  |L1.1342|
;;;511    	{
;;;512    	//unsigned short ptr;
;;;513    	//unsigned long data1,data2;
;;;514    	char temp_out[20];
;;;515    
;;;516    	//load_U=485;
;;;517    	//load_I=567;
;;;518    	temp_out[0]=*(((char*)&load_U));
00053e  4850              LDR      r0,|L1.1664|
000540  7801              LDRB     r1,[r0,#0]  ; load_U
000542  f88d1000          STRB     r1,[sp,#0]
;;;519    	temp_out[1]=*(((char*)&load_U)+1);
000546  7840              LDRB     r0,[r0,#1]  ; load_U
000548  f88d0001          STRB     r0,[sp,#1]
;;;520    	temp_out[2]=*(((char*)&load_I));
00054c  484d              LDR      r0,|L1.1668|
00054e  7801              LDRB     r1,[r0,#0]  ; load_I
000550  f88d1002          STRB     r1,[sp,#2]
;;;521    	temp_out[3]=*(((char*)&load_I)+1);
000554  7840              LDRB     r0,[r0,#1]  ; load_I
000556  e000              B        |L1.1370|
                  |L1.1368|
000558  e005              B        |L1.1382|
                  |L1.1370|
00055a  f88d0003          STRB     r0,[sp,#3]
;;;522    	uart_out_adr0(temp_out,4);
00055e  2104              MOVS     r1,#4
000560  4668              MOV      r0,sp
000562  f7fffffe          BL       uart_out_adr0
                  |L1.1382|
;;;523    	}
;;;524    
;;;525    }
000566  b009              ADD      sp,sp,#0x24
000568  bdf0              POP      {r4-r7,pc}
;;;526    
                          ENDP

                  index_offset0 PROC
;;;529    //-----------------------------------------------
;;;530    signed short index_offset0 (signed short index,signed short offset)
00056a  4408              ADD      r0,r0,r1
;;;531    {
;;;532    index=index+offset;
00056c  b200              SXTH     r0,r0
;;;533    if(index>=RX_BUFFER_SIZE0) index-=RX_BUFFER_SIZE0; 
00056e  f5b06f80          CMP      r0,#0x400
000572  db02              BLT      |L1.1402|
000574  f5a06080          SUB      r0,r0,#0x400
000578  b200              SXTH     r0,r0
                  |L1.1402|
;;;534    if(index<0) index+=RX_BUFFER_SIZE0;
00057a  2800              CMP      r0,#0
00057c  da02              BGE      |L1.1412|
00057e  f5006080          ADD      r0,r0,#0x400
000582  b200              SXTH     r0,r0
                  |L1.1412|
;;;535    return index;
;;;536    }
000584  4770              BX       lr
;;;537    
                          ENDP

                  control_check0 PROC
;;;538    //-----------------------------------------------
;;;539    char control_check0(signed short index)
000586  b570              PUSH     {r4-r6,lr}
;;;540    {
;;;541    char i=0,ii=0,iii;
;;;542    
;;;543    if(rx_buffer0[index]!=END) goto error_cc;
000588  4b3c              LDR      r3,|L1.1660|
00058a  4606              MOV      r6,r0                 ;540
00058c  3364              ADDS     r3,r3,#0x64
00058e  2200              MOVS     r2,#0                 ;541
000590  5d98              LDRB     r0,[r3,r6]
000592  280a              CMP      r0,#0xa
000594  d11b              BNE      |L1.1486|
;;;544    
;;;545    ii=rx_buffer0[index_offset0(index,-2)];
000596  1e91              SUBS     r1,r2,#2
000598  4630              MOV      r0,r6
00059a  f7fffffe          BL       index_offset0
00059e  5c1d              LDRB     r5,[r3,r0]
;;;546    iii=0;
0005a0  2400              MOVS     r4,#0
;;;547    for(i=0;i<=ii;i++)
0005a2  e008              B        |L1.1462|
                  |L1.1444|
;;;548    	{
;;;549    	iii^=rx_buffer0[index_offset0(index,-2-ii+i)];
0005a4  1b51              SUBS     r1,r2,r5
0005a6  1e89              SUBS     r1,r1,#2
0005a8  4630              MOV      r0,r6
0005aa  f7fffffe          BL       index_offset0
0005ae  5c18              LDRB     r0,[r3,r0]
0005b0  4044              EORS     r4,r4,r0
0005b2  1c52              ADDS     r2,r2,#1              ;547
0005b4  b2d2              UXTB     r2,r2                 ;547
                  |L1.1462|
0005b6  42aa              CMP      r2,r5                 ;547
0005b8  d9f4              BLS      |L1.1444|
;;;550    	}
;;;551    if (iii!=rx_buffer0[index_offset0(index,-1)]) goto error_cc;	
0005ba  f04f31ff          MOV      r1,#0xffffffff
0005be  4630              MOV      r0,r6
0005c0  f7fffffe          BL       index_offset0
0005c4  5c18              LDRB     r0,[r3,r0]
0005c6  42a0              CMP      r0,r4
0005c8  d101              BNE      |L1.1486|
;;;552    
;;;553    
;;;554    //success_cc:
;;;555    return 1;
0005ca  2001              MOVS     r0,#1
;;;556    error_cc:
;;;557    return 0;
;;;558    
;;;559    }
0005cc  bd70              POP      {r4-r6,pc}
                  |L1.1486|
0005ce  2000              MOVS     r0,#0                 ;557
0005d0  bd70              POP      {r4-r6,pc}
;;;560    
                          ENDP

                  uart_in0 PROC
;;;561    //-----------------------------------------------
;;;562    void uart_in0(void)
0005d2  e92d41f0          PUSH     {r4-r8,lr}
;;;563    {
;;;564    char temp,i/*,count*/;
;;;565    
;;;566    //__disable_irq();
;;;567    
;;;568    if(rx_buffer_overflow0)
0005d6  4c2c              LDR      r4,|L1.1672|
0005d8  2500              MOVS     r5,#0
0005da  78a0              LDRB     r0,[r4,#2]  ; rx_buffer_overflow0
0005dc  b128              CBZ      r0,|L1.1514|
;;;569    	{
;;;570    	rx_wr_index0=0;
0005de  80a5              STRH     r5,[r4,#4]
;;;571    	rx_rd_index0=0;
0005e0  80e5              STRH     r5,[r4,#6]
;;;572    	rx_counter0=0;
0005e2  8125              STRH     r5,[r4,#8]
;;;573    	rx_buffer_overflow0=0;
0005e4  70a5              STRB     r5,[r4,#2]
                  |L1.1510|
;;;574    	}    
;;;575    	
;;;576    if(rx_counter0&&(rx_buffer0[index_offset0(rx_wr_index0,-1)])==END)
;;;577    	{
;;;578    	
;;;579         temp=rx_buffer0[index_offset0(rx_wr_index0,-3)];
;;;580        	if(temp<100) 
;;;581        		{
;;;582        		if(control_check0(index_offset0(rx_wr_index0,-1)))
;;;583        			{
;;;584        		
;;;585        			rx_rd_index0=index_offset0(rx_wr_index0,-3-temp);
;;;586        			for(i=0;i<temp;i++)
;;;587    				{
;;;588    				UIB0[i]=rx_buffer0[index_offset0(rx_rd_index0,i)];
;;;589    				} 
;;;590    			rx_rd_index0=rx_wr_index0;
;;;591    			rx_counter0=0;
;;;592    			
;;;593    			uart_in_an0();
;;;594        			}
;;;595     	
;;;596        		} 
;;;597        	}	
;;;598    
;;;599    
;;;600    //__enable_irq();     
;;;601    }   	
0005e6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1514|
0005ea  8920              LDRH     r0,[r4,#8]            ;576  ; rx_counter0
0005ec  2800              CMP      r0,#0                 ;576
0005ee  d0fa              BEQ      |L1.1510|
0005f0  88a0              LDRH     r0,[r4,#4]            ;576  ; rx_wr_index0
0005f2  f04f32ff          MOV      r2,#0xffffffff        ;576
0005f6  4611              MOV      r1,r2                 ;576
0005f8  b200              SXTH     r0,r0                 ;576
0005fa  f7fffffe          BL       index_offset0
0005fe  4f1f              LDR      r7,|L1.1660|
000600  3764              ADDS     r7,r7,#0x64           ;576
000602  5c38              LDRB     r0,[r7,r0]            ;576
000604  280a              CMP      r0,#0xa               ;576
000606  d1ee              BNE      |L1.1510|
000608  88a0              LDRH     r0,[r4,#4]            ;579  ; rx_wr_index0
00060a  f06f0102          MVN      r1,#2                 ;579
00060e  b200              SXTH     r0,r0                 ;579
000610  f7fffffe          BL       index_offset0
000614  5c3e              LDRB     r6,[r7,r0]            ;579
000616  2e64              CMP      r6,#0x64              ;580
000618  d2e5              BCS      |L1.1510|
00061a  88a0              LDRH     r0,[r4,#4]            ;582  ; rx_wr_index0
00061c  4611              MOV      r1,r2                 ;582
00061e  b200              SXTH     r0,r0                 ;582
000620  f7fffffe          BL       index_offset0
000624  f7fffffe          BL       control_check0
000628  2800              CMP      r0,#0                 ;582
00062a  d0dc              BEQ      |L1.1510|
00062c  1cf0              ADDS     r0,r6,#3              ;585
00062e  4241              RSBS     r1,r0,#0              ;585
000630  88a0              LDRH     r0,[r4,#4]            ;585  ; rx_wr_index0
000632  b200              SXTH     r0,r0                 ;585
000634  f7fffffe          BL       index_offset0
000638  80e0              STRH     r0,[r4,#6]            ;585
00063a  2200              MOVS     r2,#0                 ;586
00063c  4b0f              LDR      r3,|L1.1660|
00063e  e008              B        |L1.1618|
                  |L1.1600|
000640  88e0              LDRH     r0,[r4,#6]            ;588  ; rx_rd_index0
000642  4611              MOV      r1,r2                 ;588
000644  b200              SXTH     r0,r0                 ;588
000646  f7fffffe          BL       index_offset0
00064a  5c38              LDRB     r0,[r7,r0]            ;588
00064c  5498              STRB     r0,[r3,r2]            ;588
00064e  1c52              ADDS     r2,r2,#1              ;586
000650  b2d2              UXTB     r2,r2                 ;586
                  |L1.1618|
000652  42b2              CMP      r2,r6                 ;586
000654  d3f4              BCC      |L1.1600|
000656  88a0              LDRH     r0,[r4,#4]            ;590  ; rx_wr_index0
000658  80e0              STRH     r0,[r4,#6]            ;590
00065a  8125              STRH     r5,[r4,#8]            ;591
00065c  e8bd41f0          POP      {r4-r8,lr}            ;593
000660  e7fe              B        uart_in_an0
                          ENDP

                  NVIC_EnableIRQ PROC
;;;927     */
;;;928    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000662  f000021f          AND      r2,r0,#0x1f
;;;929    {
;;;930      NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000666  2101              MOVS     r1,#1
000668  4091              LSLS     r1,r1,r2
00066a  0940              LSRS     r0,r0,#5
00066c  f04f22e0          MOV      r2,#0xe000e000
000670  eb020080          ADD      r0,r2,r0,LSL #2
000674  f8c01100          STR      r1,[r0,#0x100]
;;;931    }
000678  4770              BX       lr
;;;932    
                          ENDP

00067a  0000              DCW      0x0000
                  |L1.1660|
                          DCD      ||.bss||
                  |L1.1664|
                          DCD      load_U
                  |L1.1668|
                          DCD      load_I
                  |L1.1672|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UIB0
                          %        100
                  rx_buffer0
                          %        1024
                  tx_buffer0
                          %        1024

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.4||, ||.bss||
                  memo_out
                          %        50

                          AREA ||area_number.5||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.5||, ||.bss||
                  data_rs
                          %        50

                          AREA ||area_number.6||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.bss||
                  data_rs0
                          %        50

                          AREA ||.data||, DATA, ALIGN=2

                  UART0TxEmpty
000000  01                DCB      0x01
                  bRXIN0
000001  00                DCB      0x00
                  rx_buffer_overflow0
000002  0000              DCB      0x00,0x00
                  rx_wr_index0
000004  0000              DCB      0x00,0x00
                  rx_rd_index0
000006  0000              DCB      0x00,0x00
                  rx_counter0
000008  0000              DCB      0x00,0x00
                  tx_wr_index0
00000a  0000              DCB      0x00,0x00
                  tx_rd_index0
00000c  0000              DCB      0x00,0x00
                  tx_counter0
00000e  0000              DCB      0x00,0x00
                  UART0Status
                          DCD      0x00000000

                          AREA ||area_number.9||, DATA, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.data||
                  UART0Count
                          DCD      0x00000000

                          AREA ||area_number.10||, DATA, ALIGN=0

                          EXPORTAS ||area_number.10||, ||.data||
                  flag0
000000  00                DCB      0x00

                          AREA ||area_number.11||, DATA, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.data||
                  plazma_uart0
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "uart0.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_uart0_c_UIB0____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_uart0_c_UIB0____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_uart0_c_UIB0____REVSH|
#line 130
|__asm___7_uart0_c_UIB0____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
