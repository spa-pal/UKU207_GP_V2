; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\sc16is7xx.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\sc16is7xx.d --feedback=.\EXE\UKU2071x_GALV_IBv2.fed --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 --omf_browse=.\EXE\sc16is7xx.crf sc16is7xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sc16is700_spi_init PROC
;;;18     //настройка SPI1
;;;19     void sc16is700_spi_init(void)
000000  4890              LDR      r0,|L1.580|
;;;20     {
;;;21     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  6801              LDR      r1,[r0,#0]
000004  f0210103          BIC      r1,r1,#3
000008  6001              STR      r1,[r0,#0]
;;;22     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  6801              LDR      r1,[r0,#0]
00000c  f0414140          ORR      r1,r1,#0xc0000000
000010  6001              STR      r1,[r0,#0]
;;;23     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  6841              LDR      r1,[r0,#4]
000014  f0210103          BIC      r1,r1,#3
000018  6041              STR      r1,[r0,#4]
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  6841              LDR      r1,[r0,#4]
00001c  f041010c          ORR      r1,r1,#0xc
000020  6041              STR      r1,[r0,#4]
;;;25     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  6841              LDR      r1,[r0,#4]
000024  f0410130          ORR      r1,r1,#0x30
000028  6041              STR      r1,[r0,#4]
;;;26     /*
;;;27     S1SPCCR=100;
;;;28     S1SPCR=0x3f; */
;;;29     
;;;30     LPC_SPI->SPCCR=20;
00002a  4887              LDR      r0,|L1.584|
00002c  2114              MOVS     r1,#0x14
00002e  60c1              STR      r1,[r0,#0xc]
;;;31     LPC_SPI->SPCR=0x20;
000030  2120              MOVS     r1,#0x20
000032  6001              STR      r1,[r0,#0]
;;;32     }
000034  4770              BX       lr
;;;33     
                          ENDP

                  sc16is700_wr_buff PROC
;;;35     //Отправка num байт из программного буфера передачи в sc16is700
;;;36     void sc16is700_wr_buff(char reg_num,char num)
000036  e92d41f0          PUSH     {r4-r8,lr}
;;;37     {
00003a  4602              MOV      r2,r0
00003c  460e              MOV      r6,r1
;;;38     short i;
;;;39     sc16is700_spi_init();
00003e  f7fffffe          BL       sc16is700_spi_init
;;;40     delay_us(2);
000042  2118              MOVS     r1,#0x18
                  |L1.68|
000044  1e49              SUBS     r1,r1,#1
000046  d1fd              BNE      |L1.68|
;;;41     sc16is700_CS_ON 
000048  4d80              LDR      r5,|L1.588|
00004a  6828              LDR      r0,[r5,#0]
00004c  f0400001          ORR      r0,r0,#1
000050  6028              STR      r0,[r5,#0]
000052  69e8              LDR      r0,[r5,#0x1c]
000054  f0400001          ORR      r0,r0,#1
000058  61e8              STR      r0,[r5,#0x1c]
;;;42     spi1((reg_num&0x0f)<<3);
00005a  0710              LSLS     r0,r2,#28
00005c  0e40              LSRS     r0,r0,#25
00005e  f7fffffe          BL       spi1
;;;43     for (i=0;i<num;i++)spi1(tx_buffer_sc16is700[i]);
000062  2400              MOVS     r4,#0
000064  4f7a              LDR      r7,|L1.592|
000066  e004              B        |L1.114|
                  |L1.104|
000068  5d38              LDRB     r0,[r7,r4]
00006a  f7fffffe          BL       spi1
00006e  1c64              ADDS     r4,r4,#1
000070  b224              SXTH     r4,r4
                  |L1.114|
000072  42b4              CMP      r4,r6
000074  dbf8              BLT      |L1.104|
;;;44     sc16is700_CS_OFF
000076  6828              LDR      r0,[r5,#0]
000078  f0400001          ORR      r0,r0,#1
00007c  6028              STR      r0,[r5,#0]
00007e  69a8              LDR      r0,[r5,#0x18]
000080  f0400001          ORR      r0,r0,#1
000084  61a8              STR      r0,[r5,#0x18]
;;;45     }
000086  e8bd81f0          POP      {r4-r8,pc}
;;;46     
                          ENDP

                  sc16is700_wr_byte PROC
;;;47     void sc16is700_wr_byte(char reg_num,char data)
00008a  b570              PUSH     {r4-r6,lr}
;;;48     {
00008c  4602              MOV      r2,r0
00008e  460d              MOV      r5,r1
;;;49     sc16is700_spi_init();
000090  f7fffffe          BL       sc16is700_spi_init
;;;50     delay_us(2);
000094  2018              MOVS     r0,#0x18
                  |L1.150|
000096  1e40              SUBS     r0,r0,#1
000098  d1fd              BNE      |L1.150|
;;;51     sc16is700_CS_ON
00009a  4c6c              LDR      r4,|L1.588|
00009c  6820              LDR      r0,[r4,#0]
00009e  f0400001          ORR      r0,r0,#1
0000a2  6020              STR      r0,[r4,#0]
0000a4  69e0              LDR      r0,[r4,#0x1c]
0000a6  f0400001          ORR      r0,r0,#1
0000aa  61e0              STR      r0,[r4,#0x1c]
;;;52     spi1((reg_num&0x0f)<<3);
0000ac  0710              LSLS     r0,r2,#28
0000ae  0e40              LSRS     r0,r0,#25
0000b0  f7fffffe          BL       spi1
;;;53     spi1(data);
0000b4  4628              MOV      r0,r5
0000b6  f7fffffe          BL       spi1
;;;54     sc16is700_CS_OFF
0000ba  6820              LDR      r0,[r4,#0]
0000bc  f0400001          ORR      r0,r0,#1
0000c0  6020              STR      r0,[r4,#0]
0000c2  69a0              LDR      r0,[r4,#0x18]
0000c4  f0400001          ORR      r0,r0,#1
0000c8  61a0              STR      r0,[r4,#0x18]
;;;55     }
0000ca  bd70              POP      {r4-r6,pc}
;;;56     
                          ENDP

                  sc16is700_rd_byte PROC
;;;57     
;;;58     char sc16is700_rd_byte(char reg_num)
0000cc  b510              PUSH     {r4,lr}
;;;59     {
0000ce  4602              MOV      r2,r0
;;;60     char out;
;;;61     sc16is700_spi_init();
0000d0  f7fffffe          BL       sc16is700_spi_init
;;;62     delay_us(2);
0000d4  2118              MOVS     r1,#0x18
                  |L1.214|
0000d6  1e49              SUBS     r1,r1,#1
0000d8  d1fd              BNE      |L1.214|
;;;63     sc16is700_CS_ON
0000da  4c5c              LDR      r4,|L1.588|
0000dc  6820              LDR      r0,[r4,#0]
0000de  f0400001          ORR      r0,r0,#1
0000e2  6020              STR      r0,[r4,#0]
0000e4  69e0              LDR      r0,[r4,#0x1c]
0000e6  f0400001          ORR      r0,r0,#1
0000ea  61e0              STR      r0,[r4,#0x1c]
;;;64     spi1(((reg_num&0x0f)<<3)|0x80);
0000ec  f002000f          AND      r0,r2,#0xf
0000f0  2180              MOVS     r1,#0x80
0000f2  ea4100c0          ORR      r0,r1,r0,LSL #3
0000f6  f7fffffe          BL       spi1
;;;65     out = spi1(0xff);
0000fa  20ff              MOVS     r0,#0xff
0000fc  f7fffffe          BL       spi1
;;;66     sc16is700_CS_OFF
000100  6821              LDR      r1,[r4,#0]
000102  f0410101          ORR      r1,r1,#1
000106  6021              STR      r1,[r4,#0]
000108  69a1              LDR      r1,[r4,#0x18]
00010a  f0410101          ORR      r1,r1,#1
00010e  61a1              STR      r1,[r4,#0x18]
;;;67     return out;
;;;68     }
000110  bd10              POP      {r4,pc}
;;;69     
                          ENDP

                  sc16is700_init PROC
;;;89     
;;;90     void sc16is700_init(uint32_t baudrate)
000112  b570              PUSH     {r4-r6,lr}
;;;91     {
;;;92     
;;;93     unsigned char baud_h,baud_l;
;;;94     modbus_plazma_ppp++;
000114  4a4f              LDR      r2,|L1.596|
000116  8811              LDRH     r1,[r2,#0]  ; modbus_plazma_ppp
000118  1c49              ADDS     r1,r1,#1
00011a  8011              STRH     r1,[r2,#0]
;;;95     
;;;96     baud_h = (char)((10000000U/16U/baudrate)>>8);
00011c  494e              LDR      r1,|L1.600|
00011e  fbb1f1f0          UDIV     r1,r1,r0
;;;97     baud_l = (char)((10000000U/16U/baudrate)); 
;;;98     
;;;99     if(baudrate==57600U)baud_l=11;
;;;100    //if(baudrate==115200U)baud_l=6;
;;;101    
;;;102    
;;;103    baud_h = (char)((10000000U/16U/baudrate)>>8);
;;;104    baud_l = (char)((10000000U/16U/baudrate));
000122  b2cc              UXTB     r4,r1
;;;105    
;;;106    if(RS485_QWARZ_DIGIT==40)
000124  494d              LDR      r1,|L1.604|
000126  f9b11000          LDRSH    r1,[r1,#0]  ; RS485_QWARZ_DIGIT
00012a  2928              CMP      r1,#0x28
00012c  d002              BEQ      |L1.308|
;;;107    	{
;;;108    	baud_h = (char)((40000000U/16U/baudrate)>>8);
;;;109    	baud_l = (char)((40000000U/16U/baudrate));
;;;110    	} 
;;;111    if(RS485_QWARZ_DIGIT==30)
00012e  291e              CMP      r1,#0x1e
000130  d002              BEQ      |L1.312|
000132  e005              B        |L1.320|
                  |L1.308|
000134  494a              LDR      r1,|L1.608|
000136  e000              B        |L1.314|
                  |L1.312|
;;;112    	{
;;;113    	baud_h = (char)((30000000U/16U/baudrate)>>8);
000138  494a              LDR      r1,|L1.612|
                  |L1.314|
00013a  fbb1f0f0          UDIV     r0,r1,r0              ;108
00013e  b2c4              UXTB     r4,r0                 ;109
                  |L1.320|
;;;114    	baud_l = (char)((30000000U/16U/baudrate));
;;;115    	}
;;;116    
;;;117    
;;;118    baud_h=123;
000140  257b              MOVS     r5,#0x7b
;;;119    
;;;120    sc16is700_wr_byte(CS16IS7xx_LCR, 0x80);
000142  2180              MOVS     r1,#0x80
000144  2003              MOVS     r0,#3
000146  f7fffffe          BL       sc16is700_wr_byte
;;;121    sc16is700_wr_byte(CS16IS7xx_DLL, baud_l);
00014a  4621              MOV      r1,r4
00014c  2000              MOVS     r0,#0
00014e  f7fffffe          BL       sc16is700_wr_byte
;;;122    sc16is700_wr_byte(CS16IS7xx_DLH, baud_h);
000152  4629              MOV      r1,r5
000154  2001              MOVS     r0,#1
000156  f7fffffe          BL       sc16is700_wr_byte
;;;123    sc16is700_wr_byte(CS16IS7xx_LCR, 0xBF);
00015a  21bf              MOVS     r1,#0xbf
00015c  2003              MOVS     r0,#3
00015e  f7fffffe          BL       sc16is700_wr_byte
;;;124    sc16is700_wr_byte(CS16IS7xx_EFR, 0X10);
000162  2110              MOVS     r1,#0x10
000164  2002              MOVS     r0,#2
000166  f7fffffe          BL       sc16is700_wr_byte
;;;125    sc16is700_wr_byte(CS16IS7xx_LCR, 0x03);
00016a  2103              MOVS     r1,#3
00016c  4608              MOV      r0,r1
00016e  f7fffffe          BL       sc16is700_wr_byte
;;;126    sc16is700_wr_byte(CS16IS7xx_FCR, 0x06);
000172  2106              MOVS     r1,#6
000174  2002              MOVS     r0,#2
000176  f7fffffe          BL       sc16is700_wr_byte
;;;127    sc16is700_wr_byte(CS16IS7xx_FCR, 0x01);
00017a  2101              MOVS     r1,#1
00017c  2002              MOVS     r0,#2
00017e  f7fffffe          BL       sc16is700_wr_byte
;;;128    sc16is700_wr_byte(CS16IS7xx_EFCR, 0X30);
000182  e8bd4070          POP      {r4-r6,lr}
000186  2130              MOVS     r1,#0x30
000188  200f              MOVS     r0,#0xf
00018a  e7fe              B        sc16is700_wr_byte
;;;129    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;130    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;131    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;132    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;133    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;134    }
;;;135    
                          ENDP

                  putchar_sc16is700 PROC
;;;154    //Посылка байта через sc16is700
;;;155    void putchar_sc16is700(char out_byte)
00018c  4a36              LDR      r2,|L1.616|
;;;156    {
;;;157    tx_buffer_sc16is700[tx_wr_index_sc16is700]=out_byte;
00018e  4b30              LDR      r3,|L1.592|
000190  7891              LDRB     r1,[r2,#2]  ; tx_wr_index_sc16is700
000192  5458              STRB     r0,[r3,r1]
;;;158    if (++tx_wr_index_sc16is700 == TX_BUFFER_SIZE_SC16IS700) tx_wr_index_sc16is700=0;
000194  1c49              ADDS     r1,r1,#1
000196  b2c8              UXTB     r0,r1
000198  7090              STRB     r0,[r2,#2]
00019a  2820              CMP      r0,#0x20
00019c  d101              BNE      |L1.418|
00019e  2000              MOVS     r0,#0
0001a0  7090              STRB     r0,[r2,#2]
                  |L1.418|
;;;159    }
0001a2  4770              BX       lr
;;;160    
                          ENDP

                  sc16is700_uart_hndl PROC
;;;191    //Обработчик sc16is700
;;;192    void sc16is700_uart_hndl(void)
0001a4  e92d47f0          PUSH     {r4-r10,lr}
;;;193    {
;;;194    modbus_plazma_p++;
0001a8  4830              LDR      r0,|L1.620|
0001aa  8801              LDRH     r1,[r0,#0]  ; modbus_plazma_p
0001ac  1c49              ADDS     r1,r1,#1
0001ae  8001              STRH     r1,[r0,#0]
;;;195    							//Отладка 
;;;196    
;;;197    //sc16is700ByteAvailable=sc16is700_rd_byte(CS16IS7xx_RXLVL); //Читаем состояние ФИФО приема микросхемы
;;;198    
;;;199    modbus_plazma_pp=sc16is700_rd_byte(CS16IS7xx_DLH);
0001b0  2001              MOVS     r0,#1
0001b2  f7fffffe          BL       sc16is700_rd_byte
0001b6  492e              LDR      r1,|L1.624|
;;;200    //if(sc16is700ByteAvailable)modbus_plazma_pp++;
;;;201    
;;;202    
;;;203    if(sc16is700ByteAvailable) //Если в приемном ФИФО	микросхемы есть данные
0001b8  4c2b              LDR      r4,|L1.616|
0001ba  2600              MOVS     r6,#0
0001bc  8008              STRH     r0,[r1,#0]            ;199
0001be  7820              LDRB     r0,[r4,#0]  ; sc16is700ByteAvailable
0001c0  b1a0              CBZ      r0,|L1.492|
;;;204    	{
;;;205    	char i;	
;;;206    	
;;;207    	for(i=0;(i<sc16is700ByteAvailable)&&(i<5);i++) //Читаем их пачками не больше 5 в программный буфер модбас
0001c2  2500              MOVS     r5,#0
;;;208    		{
;;;209    		if(!sc16is700RecieveDisableFlag)
;;;210    			{
;;;211    			modbus_rx_buffer[modbus_rx_buffer_ptr]=sc16is700_rd_byte(CS16IS7xx_RHR);
0001c4  f8df80ac          LDR      r8,|L1.628|
0001c8  4f2b              LDR      r7,|L1.632|
;;;212    			modbus_rx_buffer_ptr++;
;;;213    			modbus_timeout_cnt=0;   //Запускаем таймер опознавания конца посылки
0001ca  f8df90b0          LDR      r9,|L1.636|
0001ce  e008              B        |L1.482|
                  |L1.464|
0001d0  79a0              LDRB     r0,[r4,#6]            ;209  ; sc16is700RecieveDisableFlag
0001d2  2800              CMP      r0,#0                 ;209
;;;214    
;;;215    			}
;;;216    		else sc16is700_rd_byte(CS16IS7xx_RHR);
0001d4  f04f0000          MOV      r0,#0
0001d8  d00e              BEQ      |L1.504|
0001da  f7fffffe          BL       sc16is700_rd_byte
                  |L1.478|
0001de  1c6d              ADDS     r5,r5,#1              ;207
0001e0  b2ed              UXTB     r5,r5                 ;207
                  |L1.482|
0001e2  7820              LDRB     r0,[r4,#0]            ;207  ; sc16is700ByteAvailable
0001e4  4285              CMP      r5,r0                 ;207
0001e6  d201              BCS      |L1.492|
0001e8  2d05              CMP      r5,#5                 ;207
0001ea  d3f1              BCC      |L1.464|
                  |L1.492|
;;;217    		}
;;;218    	}
;;;219    
;;;220    
;;;221    
;;;222    //sc16is700TxFifoLevel=sc16is700_rd_byte(CS16IS7xx_TXLVL);//Читаем состояние ФИФО передачи
;;;223    
;;;224    if(sc16is700TxFifoLevel!=64) sc16is700TxFifoEmptyCnt=0;//Если ФИФО не пустой обнуляем счетчик свободности ФИФО передачи
0001ec  7861              LDRB     r1,[r4,#1]  ; sc16is700TxFifoLevel
0001ee  2001              MOVS     r0,#1                 ;199
0001f0  2940              CMP      r1,#0x40
0001f2  d00b              BEQ      |L1.524|
0001f4  7126              STRB     r6,[r4,#4]
0001f6  e011              B        |L1.540|
                  |L1.504|
0001f8  f7fffffe          BL       sc16is700_rd_byte
0001fc  7839              LDRB     r1,[r7,#0]            ;211  ; modbus_rx_buffer_ptr
0001fe  f8080001          STRB     r0,[r8,r1]            ;211
000202  1c49              ADDS     r1,r1,#1              ;212
000204  7039              STRB     r1,[r7,#0]            ;212
000206  f8896000          STRB     r6,[r9,#0]            ;213
00020a  e7e8              B        |L1.478|
                  |L1.524|
;;;225    if(sc16is700TxFifoLevel==64) //если ФИФО пустой то плюсуем счетчик если он меньше константы
;;;226    	{
;;;227    	if(sc16is700TxFifoEmptyCnt<SC16IS700TXFIFOEMPTYCNTMAX)sc16is700TxFifoEmptyCnt++;
00020c  7921              LDRB     r1,[r4,#4]  ; sc16is700TxFifoEmptyCnt
00020e  2905              CMP      r1,#5
000210  d201              BCS      |L1.534|
000212  1c49              ADDS     r1,r1,#1
000214  7121              STRB     r1,[r4,#4]
                  |L1.534|
;;;228    	}
;;;229    if(sc16is700TxFifoEmptyCnt==SC16IS700TXFIFOEMPTYCNTMAX) sc16is700TxPossibleFlag=1;//Если счетчик сравнялся с константой поднимаем флаг возможности передачи
000216  b2c9              UXTB     r1,r1
000218  2905              CMP      r1,#5
00021a  d010              BEQ      |L1.574|
                  |L1.540|
;;;230    else sc16is700TxPossibleFlag=0;//Если не сравнялся - флаг сбрасываем.
00021c  7166              STRB     r6,[r4,#5]
                  |L1.542|
;;;231    
;;;232    
;;;233    if((tx_wr_index_sc16is700)&&(tx_wr_index_sc16is700!=tx_rd_index_sc16is700)) //Если программный буфер передачи не пуст
00021e  78a1              LDRB     r1,[r4,#2]  ; tx_wr_index_sc16is700
000220  2900              CMP      r1,#0
000222  d00a              BEQ      |L1.570|
000224  78e2              LDRB     r2,[r4,#3]  ; tx_rd_index_sc16is700
000226  4291              CMP      r1,r2
000228  d007              BEQ      |L1.570|
;;;234    	{
;;;235    	if(sc16is700TxPossibleFlag)//проверяем возможность передачи
00022a  7962              LDRB     r2,[r4,#5]  ; sc16is700TxPossibleFlag
00022c  2a00              CMP      r2,#0
00022e  d004              BEQ      |L1.570|
;;;236    		{
;;;237    		//char i;
;;;238    		//for(;tx_rd_index_sc16is700++;tx_rd_index_sc16is700<=tx_wr_index_sc16is700)
;;;239    			//{
;;;240    		sc16is700RecieveDisableFlag=1;
000230  71a0              STRB     r0,[r4,#6]
;;;241    		sc16is700_wr_buff(CS16IS7xx_THR, tx_wr_index_sc16is700);
000232  2000              MOVS     r0,#0
000234  f7fffffe          BL       sc16is700_wr_buff
;;;242    			//}
;;;243    		
;;;244    		tx_wr_index_sc16is700=0;
000238  70a6              STRB     r6,[r4,#2]
                  |L1.570|
;;;245    		}
;;;246    	}
;;;247    
;;;248    //if((sc16is700_rd_byte(CS16IS7xx_LSR))&0x40)	sc16is700RecieveDisableFlag=0;
;;;249    
;;;250    
;;;251    }
00023a  e8bd87f0          POP      {r4-r10,pc}
                  |L1.574|
00023e  7160              STRB     r0,[r4,#5]            ;229
000240  e7ed              B        |L1.542|
                          ENDP

000242  0000              DCW      0x0000
                  |L1.580|
                          DCD      0x4002c000
                  |L1.584|
                          DCD      0x40020000
                  |L1.588|
                          DCD      0x2009c000
                  |L1.592|
                          DCD      ||.bss||
                  |L1.596|
                          DCD      modbus_plazma_ppp
                  |L1.600|
                          DCD      0x00098968
                  |L1.604|
                          DCD      RS485_QWARZ_DIGIT
                  |L1.608|
                          DCD      0x002625a0
                  |L1.612|
                          DCD      0x001c9c38
                  |L1.616|
                          DCD      ||.data||
                  |L1.620|
                          DCD      modbus_plazma_p
                  |L1.624|
                          DCD      modbus_plazma_pp
                  |L1.628|
                          DCD      modbus_rx_buffer
                  |L1.632|
                          DCD      modbus_rx_buffer_ptr
                  |L1.636|
                          DCD      modbus_timeout_cnt

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  sc16is700_init_ PROC
;;;18     //настройка SPI1
;;;19     void sc16is700_spi_init(void)
000000  b510              PUSH     {r4,lr}
;;;20     {
;;;21     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  2180              MOVS     r1,#0x80
000004  2003              MOVS     r0,#3
000006  f7fffffe          BL       sc16is700_wr_byte
;;;22     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  2141              MOVS     r1,#0x41
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       sc16is700_wr_byte
;;;23     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       sc16is700_wr_byte
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  21bf              MOVS     r1,#0xbf
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       sc16is700_wr_byte
;;;25     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  2110              MOVS     r1,#0x10
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       sc16is700_wr_byte
;;;26     /*
;;;27     S1SPCCR=100;
;;;28     S1SPCR=0x3f; */
;;;29     
;;;30     LPC_SPI->SPCCR=20;
00002a  2103              MOVS     r1,#3
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       sc16is700_wr_byte
;;;31     LPC_SPI->SPCR=0x20;
000032  2106              MOVS     r1,#6
;;;32     }
000034  2002              MOVS     r0,#2
000036  f7fffffe          BL       sc16is700_wr_byte
00003a  2101              MOVS     r1,#1
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       sc16is700_wr_byte
000042  2130              MOVS     r1,#0x30
000044  e8bd4010          POP      {r4,lr}
000048  200f              MOVS     r0,#0xf
00004a  f7ffbffe          B.W      sc16is700_wr_byte
;;;33     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  sc16is700_out PROC
;;;18     //настройка SPI1
;;;19     void sc16is700_spi_init(void)
000000  b5ff              PUSH     {r0-r7,lr}
;;;20     {
;;;21     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  ad09              ADD      r5,sp,#0x24
000004  cdd0              LDM      r5!,{r4,r6,r7}
000006  f88d1000          STRB     r1,[sp,#0]
;;;22     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  f88d2001          STRB     r2,[sp,#1]
00000e  f88d3002          STRB     r3,[sp,#2]
;;;23     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  2500              MOVS     r5,#0
000014  f88d4003          STRB     r4,[sp,#3]
000018  f88d6004          STRB     r6,[sp,#4]
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001c  f88d7005          STRB     r7,[sp,#5]
000020  4629              MOV      r1,r5
;;;25     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  466c              MOV      r4,sp
000024  e003              B        |L3.46|
                  |L3.38|
000026  5c62              LDRB     r2,[r4,r1]
000028  4055              EORS     r5,r5,r2
;;;26     /*
;;;27     S1SPCCR=100;
;;;28     S1SPCR=0x3f; */
;;;29     
;;;30     LPC_SPI->SPCCR=20;
00002a  1c49              ADDS     r1,r1,#1
00002c  b2c9              UXTB     r1,r1
                  |L3.46|
00002e  4281              CMP      r1,r0
;;;31     LPC_SPI->SPCR=0x20;
000030  d3f9              BCC      |L3.38|
000032  ea800105          EOR      r1,r0,r5
;;;32     }
000036  1822              ADDS     r2,r4,r0
000038  5420              STRB     r0,[r4,r0]
00003a  7051              STRB     r1,[r2,#1]
00003c  210a              MOVS     r1,#0xa
00003e  2500              MOVS     r5,#0
000040  7091              STRB     r1,[r2,#2]
000042  1cc6              ADDS     r6,r0,#3
000044  e004              B        |L3.80|
                  |L3.70|
000046  5d60              LDRB     r0,[r4,r5]
000048  f7fffffe          BL       putchar_sc16is700
00004c  1c6d              ADDS     r5,r5,#1
00004e  b2ed              UXTB     r5,r5
                  |L3.80|
000050  42b5              CMP      r5,r6
000052  d3f8              BCC      |L3.70|
000054  bdff              POP      {r0-r7,pc}
;;;33     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  tx_buffer_sc16is700
                          %        32

                          AREA ||.data||, DATA, ALIGN=0

                  sc16is700ByteAvailable
000000  00                DCB      0x00
                  sc16is700TxFifoLevel
000001  00                DCB      0x00
                  tx_wr_index_sc16is700
000002  00                DCB      0x00
                  tx_rd_index_sc16is700
000003  00                DCB      0x00
                  sc16is700TxFifoEmptyCnt
000004  00                DCB      0x00
                  sc16is700TxPossibleFlag
000005  00                DCB      0x00
                  sc16is700RecieveDisableFlag
000006  00                DCB      0x00
