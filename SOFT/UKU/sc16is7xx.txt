; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\sc16is7xx.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\sc16is7xx.d --feedback=.\EXE\UKU2071x_GALV_IBv2.fed --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 --omf_browse=.\EXE\sc16is7xx.crf sc16is7xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sc16is700_spi_init PROC
;;;18     //настройка SPI1
;;;19     void sc16is700_spi_init(void)
000000  488a              LDR      r0,|L1.556|
;;;20     {
;;;21     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  6801              LDR      r1,[r0,#0]
000004  f0210103          BIC      r1,r1,#3
000008  6001              STR      r1,[r0,#0]
;;;22     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  6801              LDR      r1,[r0,#0]
00000c  f0414140          ORR      r1,r1,#0xc0000000
000010  6001              STR      r1,[r0,#0]
;;;23     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  6841              LDR      r1,[r0,#4]
000014  f0210103          BIC      r1,r1,#3
000018  6041              STR      r1,[r0,#4]
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  6841              LDR      r1,[r0,#4]
00001c  f041010c          ORR      r1,r1,#0xc
000020  6041              STR      r1,[r0,#4]
;;;25     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  6841              LDR      r1,[r0,#4]
000024  f0410130          ORR      r1,r1,#0x30
000028  6041              STR      r1,[r0,#4]
;;;26     /*
;;;27     S1SPCCR=100;
;;;28     S1SPCR=0x3f; */
;;;29     
;;;30     LPC_SPI->SPCCR=20;
00002a  4881              LDR      r0,|L1.560|
00002c  2114              MOVS     r1,#0x14
00002e  60c1              STR      r1,[r0,#0xc]
;;;31     LPC_SPI->SPCR=0x20;
000030  2120              MOVS     r1,#0x20
000032  6001              STR      r1,[r0,#0]
;;;32     }
000034  4770              BX       lr
;;;33     
                          ENDP

                  sc16is700_wr_buff PROC
;;;35     //Отправка num байт из программного буфера передачи в sc16is700
;;;36     void sc16is700_wr_buff(char reg_num,char num)
000036  e92d41f0          PUSH     {r4-r8,lr}
;;;37     {
00003a  4602              MOV      r2,r0
00003c  460e              MOV      r6,r1
;;;38     short i;
;;;39     sc16is700_spi_init();
00003e  f7fffffe          BL       sc16is700_spi_init
;;;40     delay_us(2);
000042  2118              MOVS     r1,#0x18
                  |L1.68|
000044  1e49              SUBS     r1,r1,#1
000046  d1fd              BNE      |L1.68|
;;;41     sc16is700_CS_ON 
000048  4d7a              LDR      r5,|L1.564|
00004a  6828              LDR      r0,[r5,#0]
00004c  f0400001          ORR      r0,r0,#1
000050  6028              STR      r0,[r5,#0]
000052  69e8              LDR      r0,[r5,#0x1c]
000054  f0400001          ORR      r0,r0,#1
000058  61e8              STR      r0,[r5,#0x1c]
;;;42     spi1((reg_num&0x0f)<<3);
00005a  0710              LSLS     r0,r2,#28
00005c  0e40              LSRS     r0,r0,#25
00005e  f7fffffe          BL       spi1
;;;43     for (i=0;i<num;i++)spi1(tx_buffer_sc16is700[i]);
000062  2400              MOVS     r4,#0
000064  4f74              LDR      r7,|L1.568|
000066  e004              B        |L1.114|
                  |L1.104|
000068  5d38              LDRB     r0,[r7,r4]
00006a  f7fffffe          BL       spi1
00006e  1c64              ADDS     r4,r4,#1
000070  b224              SXTH     r4,r4
                  |L1.114|
000072  42b4              CMP      r4,r6
000074  dbf8              BLT      |L1.104|
;;;44     sc16is700_CS_OFF
000076  6828              LDR      r0,[r5,#0]
000078  f0400001          ORR      r0,r0,#1
00007c  6028              STR      r0,[r5,#0]
00007e  69a8              LDR      r0,[r5,#0x18]
000080  f0400001          ORR      r0,r0,#1
000084  61a8              STR      r0,[r5,#0x18]
;;;45     }
000086  e8bd81f0          POP      {r4-r8,pc}
;;;46     
                          ENDP

                  sc16is700_wr_byte PROC
;;;47     void sc16is700_wr_byte(char reg_num,char data)
00008a  b570              PUSH     {r4-r6,lr}
;;;48     {
00008c  4602              MOV      r2,r0
00008e  460d              MOV      r5,r1
;;;49     sc16is700_spi_init();
000090  f7fffffe          BL       sc16is700_spi_init
;;;50     delay_us(2);
000094  2018              MOVS     r0,#0x18
                  |L1.150|
000096  1e40              SUBS     r0,r0,#1
000098  d1fd              BNE      |L1.150|
;;;51     sc16is700_CS_ON
00009a  4c66              LDR      r4,|L1.564|
00009c  6820              LDR      r0,[r4,#0]
00009e  f0400001          ORR      r0,r0,#1
0000a2  6020              STR      r0,[r4,#0]
0000a4  69e0              LDR      r0,[r4,#0x1c]
0000a6  f0400001          ORR      r0,r0,#1
0000aa  61e0              STR      r0,[r4,#0x1c]
;;;52     spi1((reg_num&0x0f)<<3);
0000ac  0710              LSLS     r0,r2,#28
0000ae  0e40              LSRS     r0,r0,#25
0000b0  f7fffffe          BL       spi1
;;;53     spi1(data);
0000b4  4628              MOV      r0,r5
0000b6  f7fffffe          BL       spi1
;;;54     sc16is700_CS_OFF
0000ba  6820              LDR      r0,[r4,#0]
0000bc  f0400001          ORR      r0,r0,#1
0000c0  6020              STR      r0,[r4,#0]
0000c2  69a0              LDR      r0,[r4,#0x18]
0000c4  f0400001          ORR      r0,r0,#1
0000c8  61a0              STR      r0,[r4,#0x18]
;;;55     }
0000ca  bd70              POP      {r4-r6,pc}
;;;56     
                          ENDP

                  sc16is700_rd_byte PROC
;;;57     
;;;58     char sc16is700_rd_byte(char reg_num)
0000cc  b510              PUSH     {r4,lr}
;;;59     {
0000ce  4602              MOV      r2,r0
;;;60     char out;
;;;61     sc16is700_spi_init();
0000d0  f7fffffe          BL       sc16is700_spi_init
;;;62     delay_us(2);
0000d4  2118              MOVS     r1,#0x18
                  |L1.214|
0000d6  1e49              SUBS     r1,r1,#1
0000d8  d1fd              BNE      |L1.214|
;;;63     sc16is700_CS_ON
0000da  4c56              LDR      r4,|L1.564|
0000dc  6820              LDR      r0,[r4,#0]
0000de  f0400001          ORR      r0,r0,#1
0000e2  6020              STR      r0,[r4,#0]
0000e4  69e0              LDR      r0,[r4,#0x1c]
0000e6  f0400001          ORR      r0,r0,#1
0000ea  61e0              STR      r0,[r4,#0x1c]
;;;64     spi1(((reg_num&0x0f)<<3)|0x80);
0000ec  f002000f          AND      r0,r2,#0xf
0000f0  2180              MOVS     r1,#0x80
0000f2  ea4100c0          ORR      r0,r1,r0,LSL #3
0000f6  f7fffffe          BL       spi1
;;;65     out = spi1(0xff);
0000fa  20ff              MOVS     r0,#0xff
0000fc  f7fffffe          BL       spi1
;;;66     sc16is700_CS_OFF
000100  6821              LDR      r1,[r4,#0]
000102  f0410101          ORR      r1,r1,#1
000106  6021              STR      r1,[r4,#0]
000108  69a1              LDR      r1,[r4,#0x18]
00010a  f0410101          ORR      r1,r1,#1
00010e  61a1              STR      r1,[r4,#0x18]
;;;67     return out;
;;;68     }
000110  bd10              POP      {r4,pc}
;;;69     
                          ENDP

                  sc16is700_init PROC
;;;89     
;;;90     void sc16is700_init(uint32_t baudrate)
000112  494a              LDR      r1,|L1.572|
;;;91     {
000114  b570              PUSH     {r4-r6,lr}
;;;92     
;;;93     unsigned char baud_h,baud_l;
;;;94     
;;;95     baud_h = (char)((10000000U/16U/baudrate)>>8);
000116  fbb1f1f0          UDIV     r1,r1,r0
00011a  f3c12507          UBFX     r5,r1,#8,#8
;;;96     baud_l = (char)((10000000U/16U/baudrate)); 
00011e  b2cc              UXTB     r4,r1
;;;97     
;;;98     if(baudrate==57600U)baud_l=11;
000120  f5b04f61          CMP      r0,#0xe100
000124  d100              BNE      |L1.296|
000126  240b              MOVS     r4,#0xb
                  |L1.296|
;;;99     //if(baudrate==115200U)baud_l=6;
;;;100    
;;;101    sc16is700_wr_byte(CS16IS7xx_LCR, 0x80);
000128  2180              MOVS     r1,#0x80
00012a  2003              MOVS     r0,#3
00012c  f7fffffe          BL       sc16is700_wr_byte
;;;102    sc16is700_wr_byte(CS16IS7xx_DLL, baud_l);
000130  4621              MOV      r1,r4
000132  2000              MOVS     r0,#0
000134  f7fffffe          BL       sc16is700_wr_byte
;;;103    sc16is700_wr_byte(CS16IS7xx_DLH, baud_h);
000138  4629              MOV      r1,r5
00013a  2001              MOVS     r0,#1
00013c  f7fffffe          BL       sc16is700_wr_byte
;;;104    sc16is700_wr_byte(CS16IS7xx_LCR, 0xBF);
000140  21bf              MOVS     r1,#0xbf
000142  2003              MOVS     r0,#3
000144  f7fffffe          BL       sc16is700_wr_byte
;;;105    sc16is700_wr_byte(CS16IS7xx_EFR, 0X10);
000148  2110              MOVS     r1,#0x10
00014a  2002              MOVS     r0,#2
00014c  f7fffffe          BL       sc16is700_wr_byte
;;;106    sc16is700_wr_byte(CS16IS7xx_LCR, 0x03);
000150  2103              MOVS     r1,#3
000152  4608              MOV      r0,r1
000154  f7fffffe          BL       sc16is700_wr_byte
;;;107    sc16is700_wr_byte(CS16IS7xx_FCR, 0x06);
000158  2106              MOVS     r1,#6
00015a  2002              MOVS     r0,#2
00015c  f7fffffe          BL       sc16is700_wr_byte
;;;108    sc16is700_wr_byte(CS16IS7xx_FCR, 0x01);
000160  2101              MOVS     r1,#1
000162  2002              MOVS     r0,#2
000164  f7fffffe          BL       sc16is700_wr_byte
;;;109    sc16is700_wr_byte(CS16IS7xx_EFCR, 0X30);
000168  e8bd4070          POP      {r4-r6,lr}
00016c  2130              MOVS     r1,#0x30
00016e  200f              MOVS     r0,#0xf
000170  e7fe              B        sc16is700_wr_byte
;;;110    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;111    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;112    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;113    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;114    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;115    }
;;;116    
                          ENDP

                  putchar_sc16is700 PROC
;;;135    //Посылка байта через sc16is700
;;;136    void putchar_sc16is700(char out_byte)
000172  4a33              LDR      r2,|L1.576|
;;;137    {
;;;138    tx_buffer_sc16is700[tx_wr_index_sc16is700]=out_byte;
000174  4b30              LDR      r3,|L1.568|
000176  7891              LDRB     r1,[r2,#2]  ; tx_wr_index_sc16is700
000178  5458              STRB     r0,[r3,r1]
;;;139    if (++tx_wr_index_sc16is700 == TX_BUFFER_SIZE_SC16IS700) tx_wr_index_sc16is700=0;
00017a  1c49              ADDS     r1,r1,#1
00017c  b2c8              UXTB     r0,r1
00017e  7090              STRB     r0,[r2,#2]
000180  2820              CMP      r0,#0x20
000182  d101              BNE      |L1.392|
000184  2000              MOVS     r0,#0
000186  7090              STRB     r0,[r2,#2]
                  |L1.392|
;;;140    }
000188  4770              BX       lr
;;;141    
                          ENDP

                  sc16is700_uart_hndl PROC
;;;172    //Обработчик sc16is700
;;;173    void sc16is700_uart_hndl(void)
00018a  e92d47f0          PUSH     {r4-r10,lr}
;;;174    {
;;;175    
;;;176    sc16is700ByteAvailable=sc16is700_rd_byte(CS16IS7xx_RXLVL); //Читаем состояние ФИФО приема микросхемы
00018e  2009              MOVS     r0,#9
000190  f7fffffe          BL       sc16is700_rd_byte
000194  4c2a              LDR      r4,|L1.576|
000196  2600              MOVS     r6,#0
000198  7020              STRB     r0,[r4,#0]
;;;177    
;;;178    if(sc16is700ByteAvailable) //Если в приемном ФИФО	микросхемы есть данные
00019a  b1a0              CBZ      r0,|L1.454|
;;;179    	{
;;;180    	char i;
;;;181    	for(i=0;(i<sc16is700ByteAvailable)&&(i<5);i++) //Читаем их пачками не больше 5 в программный буфер модбас
00019c  2500              MOVS     r5,#0
;;;182    		{
;;;183    		if(!sc16is700RecieveDisableFlag)
;;;184    			{
;;;185    			modbus_rx_buffer[modbus_rx_buffer_ptr]=sc16is700_rd_byte(CS16IS7xx_RHR);
00019e  f8df80a4          LDR      r8,|L1.580|
0001a2  4f29              LDR      r7,|L1.584|
;;;186    			modbus_rx_buffer_ptr++;
;;;187    			modbus_timeout_cnt=0;   //Запускаем таймер опознавания конца посылки 
0001a4  f8df90a4          LDR      r9,|L1.588|
0001a8  e008              B        |L1.444|
                  |L1.426|
0001aa  79a0              LDRB     r0,[r4,#6]            ;183  ; sc16is700RecieveDisableFlag
0001ac  2800              CMP      r0,#0                 ;183
;;;188    			}
;;;189    		else sc16is700_rd_byte(CS16IS7xx_RHR);
0001ae  f04f0000          MOV      r0,#0
0001b2  d011              BEQ      |L1.472|
0001b4  f7fffffe          BL       sc16is700_rd_byte
                  |L1.440|
0001b8  1c6d              ADDS     r5,r5,#1              ;181
0001ba  b2ed              UXTB     r5,r5                 ;181
                  |L1.444|
0001bc  7820              LDRB     r0,[r4,#0]            ;181  ; sc16is700ByteAvailable
0001be  4285              CMP      r5,r0                 ;181
0001c0  d201              BCS      |L1.454|
0001c2  2d05              CMP      r5,#5                 ;181
0001c4  d3f1              BCC      |L1.426|
                  |L1.454|
;;;190    		}
;;;191    	}
;;;192    
;;;193    
;;;194    
;;;195    sc16is700TxFifoLevel=sc16is700_rd_byte(CS16IS7xx_TXLVL);//Читаем состояние ФИФО передачи
0001c6  2008              MOVS     r0,#8
0001c8  f7fffffe          BL       sc16is700_rd_byte
;;;196    
;;;197    if(sc16is700TxFifoLevel!=64) sc16is700TxFifoEmptyCnt=0;//Если ФИФО не пустой обнуляем счетчик свободности ФИФО передачи
;;;198    if(sc16is700TxFifoLevel==64) //если ФИФО пустой то плюсуем счетчик если он меньше константы
;;;199    	{
;;;200    	if(sc16is700TxFifoEmptyCnt<SC16IS700TXFIFOEMPTYCNTMAX)sc16is700TxFifoEmptyCnt++;
;;;201    	}
;;;202    if(sc16is700TxFifoEmptyCnt==SC16IS700TXFIFOEMPTYCNTMAX) sc16is700TxPossibleFlag=1;//Если счетчик сравнялся с константой поднимаем флаг возможности передачи
0001cc  2201              MOVS     r2,#1
0001ce  7060              STRB     r0,[r4,#1]            ;195
0001d0  2840              CMP      r0,#0x40              ;197
0001d2  d00b              BEQ      |L1.492|
0001d4  7126              STRB     r6,[r4,#4]            ;197
0001d6  e011              B        |L1.508|
                  |L1.472|
0001d8  f7fffffe          BL       sc16is700_rd_byte
0001dc  7839              LDRB     r1,[r7,#0]            ;185  ; modbus_rx_buffer_ptr
0001de  f8080001          STRB     r0,[r8,r1]            ;185
0001e2  1c49              ADDS     r1,r1,#1              ;186
0001e4  7039              STRB     r1,[r7,#0]            ;186
0001e6  f8896000          STRB     r6,[r9,#0]            ;187
0001ea  e7e5              B        |L1.440|
                  |L1.492|
0001ec  7920              LDRB     r0,[r4,#4]            ;200  ; sc16is700TxFifoEmptyCnt
0001ee  2805              CMP      r0,#5                 ;200
0001f0  d201              BCS      |L1.502|
0001f2  1c40              ADDS     r0,r0,#1              ;200
0001f4  7120              STRB     r0,[r4,#4]            ;200
                  |L1.502|
0001f6  b2c0              UXTB     r0,r0
0001f8  2805              CMP      r0,#5
0001fa  d014              BEQ      |L1.550|
                  |L1.508|
;;;203    else sc16is700TxPossibleFlag=0;//Если не сравнялся - флаг сбрасываем.
0001fc  7166              STRB     r6,[r4,#5]
                  |L1.510|
;;;204    
;;;205    
;;;206    if((tx_wr_index_sc16is700)&&(tx_wr_index_sc16is700!=tx_rd_index_sc16is700)) //Если программный буфер передачи не пуст
0001fe  78a1              LDRB     r1,[r4,#2]  ; tx_wr_index_sc16is700
000200  b149              CBZ      r1,|L1.534|
000202  78e0              LDRB     r0,[r4,#3]  ; tx_rd_index_sc16is700
000204  4281              CMP      r1,r0
000206  d006              BEQ      |L1.534|
;;;207    	{
;;;208    	if(sc16is700TxPossibleFlag)//проверяем возможность передачи
000208  7960              LDRB     r0,[r4,#5]  ; sc16is700TxPossibleFlag
00020a  b120              CBZ      r0,|L1.534|
;;;209    		{
;;;210    		//char i;
;;;211    		//for(;tx_rd_index_sc16is700++;tx_rd_index_sc16is700<=tx_wr_index_sc16is700)
;;;212    			//{
;;;213    		sc16is700RecieveDisableFlag=1;
00020c  71a2              STRB     r2,[r4,#6]
;;;214    		sc16is700_wr_buff(CS16IS7xx_THR, tx_wr_index_sc16is700);
00020e  2000              MOVS     r0,#0
000210  f7fffffe          BL       sc16is700_wr_buff
;;;215    			//}
;;;216    		
;;;217    		tx_wr_index_sc16is700=0;
000214  70a6              STRB     r6,[r4,#2]
                  |L1.534|
;;;218    		}
;;;219    	}
;;;220    
;;;221    if((sc16is700_rd_byte(CS16IS7xx_LSR))&0x40)	sc16is700RecieveDisableFlag=0;
000216  2005              MOVS     r0,#5
000218  f7fffffe          BL       sc16is700_rd_byte
00021c  0640              LSLS     r0,r0,#25
00021e  d500              BPL      |L1.546|
000220  71a6              STRB     r6,[r4,#6]
                  |L1.546|
;;;222    
;;;223    
;;;224    }
000222  e8bd87f0          POP      {r4-r10,pc}
                  |L1.550|
000226  7162              STRB     r2,[r4,#5]            ;202
000228  e7e9              B        |L1.510|
                          ENDP

00022a  0000              DCW      0x0000
                  |L1.556|
                          DCD      0x4002c000
                  |L1.560|
                          DCD      0x40020000
                  |L1.564|
                          DCD      0x2009c000
                  |L1.568|
                          DCD      ||.bss||
                  |L1.572|
                          DCD      0x00098968
                  |L1.576|
                          DCD      ||.data||
                  |L1.580|
                          DCD      modbus_rx_buffer
                  |L1.584|
                          DCD      modbus_rx_buffer_ptr
                  |L1.588|
                          DCD      modbus_timeout_cnt

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  sc16is700_init_ PROC
;;;18     //настройка SPI1
;;;19     void sc16is700_spi_init(void)
000000  b510              PUSH     {r4,lr}
;;;20     {
;;;21     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  2180              MOVS     r1,#0x80
000004  2003              MOVS     r0,#3
000006  f7fffffe          BL       sc16is700_wr_byte
;;;22     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  2141              MOVS     r1,#0x41
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       sc16is700_wr_byte
;;;23     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       sc16is700_wr_byte
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  21bf              MOVS     r1,#0xbf
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       sc16is700_wr_byte
;;;25     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  2110              MOVS     r1,#0x10
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       sc16is700_wr_byte
;;;26     /*
;;;27     S1SPCCR=100;
;;;28     S1SPCR=0x3f; */
;;;29     
;;;30     LPC_SPI->SPCCR=20;
00002a  2103              MOVS     r1,#3
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       sc16is700_wr_byte
;;;31     LPC_SPI->SPCR=0x20;
000032  2106              MOVS     r1,#6
;;;32     }
000034  2002              MOVS     r0,#2
000036  f7fffffe          BL       sc16is700_wr_byte
00003a  2101              MOVS     r1,#1
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       sc16is700_wr_byte
000042  2130              MOVS     r1,#0x30
000044  e8bd4010          POP      {r4,lr}
000048  200f              MOVS     r0,#0xf
00004a  f7ffbffe          B.W      sc16is700_wr_byte
;;;33     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  sc16is700_out PROC
;;;18     //настройка SPI1
;;;19     void sc16is700_spi_init(void)
000000  b5ff              PUSH     {r0-r7,lr}
;;;20     {
;;;21     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  ad09              ADD      r5,sp,#0x24
000004  cdd0              LDM      r5!,{r4,r6,r7}
000006  f88d1000          STRB     r1,[sp,#0]
;;;22     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  f88d2001          STRB     r2,[sp,#1]
00000e  f88d3002          STRB     r3,[sp,#2]
;;;23     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  2500              MOVS     r5,#0
000014  f88d4003          STRB     r4,[sp,#3]
000018  f88d6004          STRB     r6,[sp,#4]
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001c  f88d7005          STRB     r7,[sp,#5]
000020  4629              MOV      r1,r5
;;;25     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  466c              MOV      r4,sp
000024  e003              B        |L3.46|
                  |L3.38|
000026  5c62              LDRB     r2,[r4,r1]
000028  4055              EORS     r5,r5,r2
;;;26     /*
;;;27     S1SPCCR=100;
;;;28     S1SPCR=0x3f; */
;;;29     
;;;30     LPC_SPI->SPCCR=20;
00002a  1c49              ADDS     r1,r1,#1
00002c  b2c9              UXTB     r1,r1
                  |L3.46|
00002e  4281              CMP      r1,r0
;;;31     LPC_SPI->SPCR=0x20;
000030  d3f9              BCC      |L3.38|
000032  ea800105          EOR      r1,r0,r5
;;;32     }
000036  1822              ADDS     r2,r4,r0
000038  5420              STRB     r0,[r4,r0]
00003a  7051              STRB     r1,[r2,#1]
00003c  210a              MOVS     r1,#0xa
00003e  2500              MOVS     r5,#0
000040  7091              STRB     r1,[r2,#2]
000042  1cc6              ADDS     r6,r0,#3
000044  e004              B        |L3.80|
                  |L3.70|
000046  5d60              LDRB     r0,[r4,r5]
000048  f7fffffe          BL       putchar_sc16is700
00004c  1c6d              ADDS     r5,r5,#1
00004e  b2ed              UXTB     r5,r5
                  |L3.80|
000050  42b5              CMP      r5,r6
000052  d3f8              BCC      |L3.70|
000054  bdff              POP      {r0-r7,pc}
;;;33     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  tx_buffer_sc16is700
                          %        32

                          AREA ||.data||, DATA, ALIGN=0

                  sc16is700ByteAvailable
000000  00                DCB      0x00
                  sc16is700TxFifoLevel
000001  00                DCB      0x00
                  tx_wr_index_sc16is700
000002  00                DCB      0x00
                  tx_rd_index_sc16is700
000003  00                DCB      0x00
                  sc16is700TxFifoEmptyCnt
000004  00                DCB      0x00
                  sc16is700TxPossibleFlag
000005  00                DCB      0x00
                  sc16is700RecieveDisableFlag
000006  00                DCB      0x00
