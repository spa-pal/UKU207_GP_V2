; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\graphic.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\graphic.d --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 -DWG12232A --omf_browse=.\EXE\graphic.crf graphic.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  draw PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;8      {
000004  469e              MOV      lr,r3
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  9b0a              LDR      r3,[sp,#0x28]
000008  2920              CMP      r1,#0x20
00000a  d231              BCS      |L1.112|
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000c  17cc              ASRS     r4,r1,#31
00000e  eb017554          ADD      r5,r1,r4,LSR #29
000012  10ec              ASRS     r4,r5,#3
000014  4626              MOV      r6,r4
000016  f06f073c          MVN      r7,#0x3c
00001a  437c              MULS     r4,r7,r4
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
00001c  f0250507          BIC      r5,r5,#7
000020  eb000444          ADD      r4,r0,r4,LSL #1       ;25
000024  1b4d              SUBS     r5,r1,r5
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
000026  f8dfa7c4          LDR      r10,|L1.2028|
00002a  f50474b7          ADD      r4,r4,#0x16e          ;25
00002e  2a00              CMP      r2,#0                 ;23
000030  d034              BEQ      |L1.156|
000032  b2a0              UXTH     r0,r4                 ;25
000034  f1c50107          RSB      r1,r5,#7              ;28
000038  b2c9              UXTB     r1,r1                 ;28
00003a  f04f0401          MOV      r4,#1
00003e  fa04f401          LSL      r4,r4,r1
000042  4402              ADD      r2,r2,r0              ;31
000044  4651              MOV      r1,r10
000046  dc11              BGT      |L1.108|
000048  e025              B        |L1.150|
                  |L1.74|
00004a  b123              CBZ      r3,|L1.86|
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004c  2b01              CMP      r3,#1
00004e  d005              BEQ      |L1.92|
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
000050  2b02              CMP      r3,#2
000052  d006              BEQ      |L1.98|
000054  e008              B        |L1.104|
                  |L1.86|
000056  5c0d              LDRB     r5,[r1,r0]            ;33
000058  4325              ORRS     r5,r5,r4              ;33
00005a  e004              B        |L1.102|
                  |L1.92|
00005c  5c0d              LDRB     r5,[r1,r0]            ;34
00005e  4065              EORS     r5,r5,r4              ;34
000060  e001              B        |L1.102|
                  |L1.98|
000062  5c0d              LDRB     r5,[r1,r0]
000064  4025              ANDS     r5,r5,r4
                  |L1.102|
000066  540d              STRB     r5,[r1,r0]
                  |L1.104|
000068  1c40              ADDS     r0,r0,#1              ;31
00006a  b280              UXTH     r0,r0                 ;31
                  |L1.108|
00006c  4282              CMP      r2,r0                 ;31
00006e  dcec              BGT      |L1.74|
                  |L1.112|
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
000070  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.116|
000074  b123              CBZ      r3,|L1.128|
000076  2b01              CMP      r3,#1                 ;43
000078  d005              BEQ      |L1.134|
00007a  2b02              CMP      r3,#2                 ;44
00007c  d006              BEQ      |L1.140|
00007e  e008              B        |L1.146|
                  |L1.128|
000080  5c0d              LDRB     r5,[r1,r0]            ;42
000082  4325              ORRS     r5,r5,r4              ;42
000084  e004              B        |L1.144|
                  |L1.134|
000086  5c0d              LDRB     r5,[r1,r0]            ;43
000088  4065              EORS     r5,r5,r4              ;43
00008a  e001              B        |L1.144|
                  |L1.140|
00008c  5c0d              LDRB     r5,[r1,r0]            ;44
00008e  4025              ANDS     r5,r5,r4              ;44
                  |L1.144|
000090  540d              STRB     r5,[r1,r0]            ;44
                  |L1.146|
000092  1e40              SUBS     r0,r0,#1              ;40
000094  b280              UXTH     r0,r0                 ;40
                  |L1.150|
000096  4282              CMP      r2,r0                 ;40
000098  dbec              BLT      |L1.116|
                  |L1.154|
00009a  e7e9              B        |L1.112|
                  |L1.156|
00009c  f1be0f00          CMP      lr,#0                 ;48
0000a0  d0e6              BEQ      |L1.112|
0000a2  b2b2              UXTH     r2,r6                 ;51
0000a4  eb01060e          ADD      r6,r1,lr              ;52
0000a8  ea4f74e6          ASR      r4,r6,#31             ;52
0000ac  eb067754          ADD      r7,r6,r4,LSR #29      ;52
0000b0  b2ad              UXTH     r5,r5                 ;53
0000b2  46a9              MOV      r9,r5                 ;53
0000b4  f0270507          BIC      r5,r7,#7              ;54
0000b8  f3c704cf          UBFX     r4,r7,#3,#16          ;52
0000bc  eba60505          SUB      r5,r6,r5              ;54
0000c0  b2af              UXTH     r7,r5                 ;54
0000c2  dd77              BLE      |L1.436|
0000c4  42a2              CMP      r2,r4                 ;59
0000c6  d144              BNE      |L1.338|
0000c8  46c8              MOV      r8,r9                 ;61
0000ca  e03f              B        |L1.332|
                  |L1.204|
0000cc  b123              CBZ      r3,|L1.216|
0000ce  2b01              CMP      r3,#1                 ;64
0000d0  d013              BEQ      |L1.250|
0000d2  2b02              CMP      r3,#2                 ;65
0000d4  d024              BEQ      |L1.288|
0000d6  e035              B        |L1.324|
                  |L1.216|
0000d8  f1c20103          RSB      r1,r2,#3              ;63
0000dc  eb010541          ADD      r5,r1,r1,LSL #1       ;63
0000e0  ebc51181          RSB      r1,r5,r1,LSL #6       ;63
0000e4  eb000641          ADD      r6,r0,r1,LSL #1       ;63
0000e8  f1c80c07          RSB      r12,r8,#7             ;63
0000ec  f81a1006          LDRB     r1,[r10,r6]           ;63
0000f0  2501              MOVS     r5,#1                 ;63
0000f2  fa05f50c          LSL      r5,r5,r12             ;63
0000f6  4329              ORRS     r1,r1,r5              ;63
0000f8  e00f              B        |L1.282|
                  |L1.250|
0000fa  f1c20103          RSB      r1,r2,#3              ;64
0000fe  eb010541          ADD      r5,r1,r1,LSL #1       ;64
000102  ebc51181          RSB      r1,r5,r1,LSL #6       ;64
000106  eb000641          ADD      r6,r0,r1,LSL #1       ;64
00010a  f1c80c07          RSB      r12,r8,#7             ;64
00010e  f81a1006          LDRB     r1,[r10,r6]           ;64
000112  2501              MOVS     r5,#1                 ;64
000114  fa05f50c          LSL      r5,r5,r12             ;64
000118  4069              EORS     r1,r1,r5              ;64
                  |L1.282|
00011a  f80a1006          STRB     r1,[r10,r6]           ;64
00011e  e011              B        |L1.324|
                  |L1.288|
000120  f1c20103          RSB      r1,r2,#3              ;65
000124  eb010541          ADD      r5,r1,r1,LSL #1       ;65
000128  ebc51181          RSB      r1,r5,r1,LSL #6       ;65
00012c  eb000541          ADD      r5,r0,r1,LSL #1       ;65
000130  f1c80c07          RSB      r12,r8,#7             ;65
000134  f81a6005          LDRB     r6,[r10,r5]           ;65
000138  2101              MOVS     r1,#1                 ;65
00013a  fa01f10c          LSL      r1,r1,r12             ;65
00013e  438e              BICS     r6,r6,r1              ;65
000140  f80a6005          STRB     r6,[r10,r5]           ;65
                  |L1.324|
000144  f1080801          ADD      r8,r8,#1              ;61
000148  fa1ff888          UXTH     r8,r8                 ;61
                  |L1.332|
00014c  45b8              CMP      r8,r7                 ;61
00014e  d3bd              BCC      |L1.204|
000150  e08c              B        |L1.620|
                  |L1.338|
000152  17cd              ASRS     r5,r1,#31             ;25
000154  eb017c55          ADD      r12,r1,r5,LSR #29     ;25
000158  f3cc05cf          UBFX     r5,r12,#3,#16         ;51
00015c  f1c50503          RSB      r5,r5,#3              ;70
000160  eb050645          ADD      r6,r5,r5,LSL #1       ;70
000164  ebc61585          RSB      r5,r6,r5,LSL #6       ;70
000168  eb000845          ADD      r8,r0,r5,LSL #1       ;70
00016c  f02c0507          BIC      r5,r12,#7             ;28
000170  1b4e              SUBS     r6,r1,r5              ;28
000172  25ff              MOVS     r5,#0xff              ;70
000174  40f5              LSRS     r5,r5,r6              ;70
000176  4471              ADD      r1,r1,lr              ;52
000178  17ce              ASRS     r6,r1,#31             ;52
00017a  eb017656          ADD      r6,r1,r6,LSR #29      ;52
00017e  9600              STR      r6,[sp,#0]            ;52
000180  f3c606cf          UBFX     r6,r6,#3,#16          ;52
000184  f1c60603          RSB      r6,r6,#3              ;74
000188  eb060c46          ADD      r12,r6,r6,LSL #1      ;74
00018c  ebcc1686          RSB      r6,r12,r6,LSL #6      ;74
000190  eb000646          ADD      r6,r0,r6,LSL #1       ;74
000194  46b3              MOV      r11,r6                ;74
000196  9e00              LDR      r6,[sp,#0]            ;54
000198  f0260607          BIC      r6,r6,#7              ;54
00019c  1b89              SUBS     r1,r1,r6              ;54
00019e  b289              UXTH     r1,r1                 ;54
0001a0  f1c10608          RSB      r6,r1,#8              ;74
0001a4  21ff              MOVS     r1,#0xff              ;74
0001a6  40b1              LSLS     r1,r1,r6              ;74
0001a8  b12b              CBZ      r3,|L1.438|
0001aa  2b01              CMP      r3,#1                 ;71
0001ac  d00e              BEQ      |L1.460|
0001ae  2b02              CMP      r3,#2                 ;72
0001b0  d019              BEQ      |L1.486|
0001b2  e023              B        |L1.508|
                  |L1.436|
0001b4  e05e              B        |L1.628|
                  |L1.438|
0001b6  f81ac008          LDRB     r12,[r10,r8]          ;70
0001ba  ea4c0c05          ORR      r12,r12,r5            ;70
0001be  f80ac008          STRB     r12,[r10,r8]          ;70
0001c2  f81ac00b          LDRB     r12,[r10,r11]         ;74
0001c6  ea4c0c01          ORR      r12,r12,r1            ;74
0001ca  e009              B        |L1.480|
                  |L1.460|
0001cc  f81ac008          LDRB     r12,[r10,r8]          ;71
0001d0  ea8c0c05          EOR      r12,r12,r5            ;71
0001d4  f80ac008          STRB     r12,[r10,r8]          ;71
0001d8  f81ac00b          LDRB     r12,[r10,r11]         ;75
0001dc  ea8c0c01          EOR      r12,r12,r1            ;75
                  |L1.480|
0001e0  f80ac00b          STRB     r12,[r10,r11]         ;75
0001e4  e00a              B        |L1.508|
                  |L1.486|
0001e6  f81ac008          LDRB     r12,[r10,r8]          ;72
0001ea  ea2c0c05          BIC      r12,r12,r5            ;72
0001ee  f80ac008          STRB     r12,[r10,r8]          ;72
0001f2  f81a600b          LDRB     r6,[r10,r11]          ;76
0001f6  438e              BICS     r6,r6,r1              ;76
0001f8  f80a600b          STRB     r6,[r10,r11]          ;76
                  |L1.508|
0001fc  1aa1              SUBS     r1,r4,r2              ;78
0001fe  2901              CMP      r1,#1                 ;78
000200  f77faf4b          BLE      |L1.154|
000204  1c51              ADDS     r1,r2,#1              ;80
000206  fa1ffc81          UXTH     r12,r1                ;80
00020a  e02d              B        |L1.616|
                  |L1.524|
00020c  b123              CBZ      r3,|L1.536|
00020e  2b01              CMP      r3,#1                 ;83
000210  d00d              BEQ      |L1.558|
000212  2b02              CMP      r3,#2                 ;84
000214  d019              BEQ      |L1.586|
000216  e023              B        |L1.608|
                  |L1.536|
000218  f1cc0103          RSB      r1,r12,#3             ;82
00021c  eb010541          ADD      r5,r1,r1,LSL #1       ;82
000220  ebc51181          RSB      r1,r5,r1,LSL #6       ;82
000224  eb000541          ADD      r5,r0,r1,LSL #1       ;82
000228  f04f36ff          MOV      r6,#0xffffffff        ;82
00022c  e00a              B        |L1.580|
                  |L1.558|
00022e  f1cc0103          RSB      r1,r12,#3             ;83
000232  eb010541          ADD      r5,r1,r1,LSL #1       ;83
000236  ebc51181          RSB      r1,r5,r1,LSL #6       ;83
00023a  eb000541          ADD      r5,r0,r1,LSL #1       ;83
00023e  f81a6005          LDRB     r6,[r10,r5]           ;83
000242  43f6              MVNS     r6,r6                 ;83
                  |L1.580|
000244  f80a6005          STRB     r6,[r10,r5]           ;83
000248  e00a              B        |L1.608|
                  |L1.586|
00024a  f1cc0503          RSB      r5,r12,#3             ;84
00024e  eb050645          ADD      r6,r5,r5,LSL #1       ;84
000252  ebc61585          RSB      r5,r6,r5,LSL #6       ;84
000256  eb000645          ADD      r6,r0,r5,LSL #1       ;84
00025a  2100              MOVS     r1,#0                 ;84
00025c  f80a1006          STRB     r1,[r10,r6]           ;84
                  |L1.608|
000260  f10c0c01          ADD      r12,r12,#1            ;80
000264  fa1ffc8c          UXTH     r12,r12               ;80
                  |L1.616|
000268  45a4              CMP      r12,r4                ;80
00026a  d3cf              BCC      |L1.524|
                  |L1.620|
00026c  f1be0f00          CMP      lr,#0                 ;90
000270  f6bfaf13          BGE      |L1.154|
                  |L1.628|
000274  42a2              CMP      r2,r4                 ;93
000276  d140              BNE      |L1.762|
000278  f1a90101          SUB      r1,r9,#1              ;95
00027c  e039              B        |L1.754|
                  |L1.638|
00027e  b123              CBZ      r3,|L1.650|
000280  2b01              CMP      r3,#1                 ;98
000282  d012              BEQ      |L1.682|
000284  2b02              CMP      r3,#2                 ;99
000286  d022              BEQ      |L1.718|
000288  e032              B        |L1.752|
                  |L1.650|
00028a  f1c20403          RSB      r4,r2,#3              ;97
00028e  eb040544          ADD      r5,r4,r4,LSL #1       ;97
000292  ebc51484          RSB      r4,r5,r4,LSL #6       ;97
000296  eb000c44          ADD      r12,r0,r4,LSL #1      ;97
00029a  f1c10607          RSB      r6,r1,#7              ;97
00029e  f81a400c          LDRB     r4,[r10,r12]          ;97
0002a2  2501              MOVS     r5,#1                 ;97
0002a4  40b5              LSLS     r5,r5,r6              ;97
0002a6  432c              ORRS     r4,r4,r5              ;97
0002a8  e00e              B        |L1.712|
                  |L1.682|
0002aa  f1c20403          RSB      r4,r2,#3              ;98
0002ae  eb040544          ADD      r5,r4,r4,LSL #1       ;98
0002b2  ebc51484          RSB      r4,r5,r4,LSL #6       ;98
0002b6  eb000c44          ADD      r12,r0,r4,LSL #1      ;98
0002ba  f1c10607          RSB      r6,r1,#7              ;98
0002be  f81a400c          LDRB     r4,[r10,r12]          ;98
0002c2  2501              MOVS     r5,#1                 ;98
0002c4  40b5              LSLS     r5,r5,r6              ;98
0002c6  406c              EORS     r4,r4,r5              ;98
                  |L1.712|
0002c8  f80a400c          STRB     r4,[r10,r12]          ;98
0002cc  e010              B        |L1.752|
                  |L1.718|
0002ce  f1c20403          RSB      r4,r2,#3              ;99
0002d2  eb040544          ADD      r5,r4,r4,LSL #1       ;99
0002d6  ebc51484          RSB      r4,r5,r4,LSL #6       ;99
0002da  eb000c44          ADD      r12,r0,r4,LSL #1      ;99
0002de  f1c10607          RSB      r6,r1,#7              ;99
0002e2  f81a500c          LDRB     r5,[r10,r12]          ;99
0002e6  2401              MOVS     r4,#1                 ;99
0002e8  40b4              LSLS     r4,r4,r6              ;99
0002ea  43a5              BICS     r5,r5,r4              ;99
0002ec  f80a500c          STRB     r5,[r10,r12]          ;99
                  |L1.752|
0002f0  1e49              SUBS     r1,r1,#1              ;95
                  |L1.754|
0002f2  b289              UXTH     r1,r1                 ;95
0002f4  42b9              CMP      r1,r7                 ;95
0002f6  d2c2              BCS      |L1.638|
                  |L1.760|
0002f8  e6ba              B        |L1.112|
                  |L1.762|
0002fa  b123              CBZ      r3,|L1.774|
0002fc  2b01              CMP      r3,#1                 ;105
0002fe  d026              BEQ      |L1.846|
000300  2b02              CMP      r3,#2                 ;106
000302  d043              BEQ      |L1.908|
000304  e062              B        |L1.972|
                  |L1.774|
000306  f1c20103          RSB      r1,r2,#3              ;104
00030a  eb010541          ADD      r5,r1,r1,LSL #1       ;104
00030e  ebc51181          RSB      r1,r5,r1,LSL #6       ;104
000312  eb000c41          ADD      r12,r0,r1,LSL #1      ;104
000316  f1c90608          RSB      r6,r9,#8              ;104
00031a  f81a500c          LDRB     r5,[r10,r12]          ;104
00031e  f04f09ff          MOV      r9,#0xff              ;104
000322  fa09f106          LSL      r1,r9,r6              ;104
000326  430d              ORRS     r5,r5,r1              ;104
000328  f80a500c          STRB     r5,[r10,r12]          ;104
00032c  f1c40103          RSB      r1,r4,#3              ;108
000330  eb010541          ADD      r5,r1,r1,LSL #1       ;108
000334  ebc51181          RSB      r1,r5,r1,LSL #6       ;108
000338  eb000141          ADD      r1,r0,r1,LSL #1       ;108
00033c  fa29f907          LSR      r9,r9,r7              ;108
000340  f81a5001          LDRB     r5,[r10,r1]           ;108
000344  ea450509          ORR      r5,r5,r9              ;108
000348  f80a5001          STRB     r5,[r10,r1]           ;108
00034c  e03e              B        |L1.972|
                  |L1.846|
00034e  f1c20103          RSB      r1,r2,#3              ;105
000352  eb010541          ADD      r5,r1,r1,LSL #1       ;105
000356  ebc51181          RSB      r1,r5,r1,LSL #6       ;105
00035a  eb000c41          ADD      r12,r0,r1,LSL #1      ;105
00035e  f1c90608          RSB      r6,r9,#8              ;105
000362  f81a500c          LDRB     r5,[r10,r12]          ;105
000366  21ff              MOVS     r1,#0xff              ;105
000368  fa01f606          LSL      r6,r1,r6              ;105
00036c  4075              EORS     r5,r5,r6              ;105
00036e  f80a500c          STRB     r5,[r10,r12]          ;105
000372  f1c40503          RSB      r5,r4,#3              ;109
000376  eb050645          ADD      r6,r5,r5,LSL #1       ;109
00037a  ebc61585          RSB      r5,r6,r5,LSL #6       ;109
00037e  eb000545          ADD      r5,r0,r5,LSL #1       ;109
000382  40f9              LSRS     r1,r1,r7              ;109
000384  f81a6005          LDRB     r6,[r10,r5]           ;109
000388  404e              EORS     r6,r6,r1              ;109
00038a  e01d              B        |L1.968|
                  |L1.908|
00038c  f1c20103          RSB      r1,r2,#3              ;106
000390  eb010541          ADD      r5,r1,r1,LSL #1       ;106
000394  ebc51181          RSB      r1,r5,r1,LSL #6       ;106
000398  eb000c41          ADD      r12,r0,r1,LSL #1      ;106
00039c  f1c90608          RSB      r6,r9,#8              ;106
0003a0  f81a500c          LDRB     r5,[r10,r12]          ;106
0003a4  21ff              MOVS     r1,#0xff              ;106
0003a6  fa01f606          LSL      r6,r1,r6              ;106
0003aa  43b5              BICS     r5,r5,r6              ;106
0003ac  f80a500c          STRB     r5,[r10,r12]          ;106
0003b0  f1c40503          RSB      r5,r4,#3              ;110
0003b4  eb050645          ADD      r6,r5,r5,LSL #1       ;110
0003b8  ebc61585          RSB      r5,r6,r5,LSL #6       ;110
0003bc  eb000545          ADD      r5,r0,r5,LSL #1       ;110
0003c0  40f9              LSRS     r1,r1,r7              ;110
0003c2  f81a6005          LDRB     r6,[r10,r5]           ;110
0003c6  438e              BICS     r6,r6,r1              ;110
                  |L1.968|
0003c8  f80a6005          STRB     r6,[r10,r5]           ;110
                  |L1.972|
0003cc  1b11              SUBS     r1,r2,r4              ;112
0003ce  2901              CMP      r1,#1                 ;112
0003d0  dd92              BLE      |L1.760|
0003d2  1e52              SUBS     r2,r2,#1              ;114
0003d4  b291              UXTH     r1,r2                 ;114
0003d6  e02b              B        |L1.1072|
                  |L1.984|
0003d8  b123              CBZ      r3,|L1.996|
0003da  2b01              CMP      r3,#1                 ;117
0003dc  d00d              BEQ      |L1.1018|
0003de  2b02              CMP      r3,#2                 ;118
0003e0  d019              BEQ      |L1.1046|
0003e2  e023              B        |L1.1068|
                  |L1.996|
0003e4  f1c10203          RSB      r2,r1,#3              ;116
0003e8  eb020542          ADD      r5,r2,r2,LSL #1       ;116
0003ec  ebc51282          RSB      r2,r5,r2,LSL #6       ;116
0003f0  eb000542          ADD      r5,r0,r2,LSL #1       ;116
0003f4  f04f36ff          MOV      r6,#0xffffffff        ;116
0003f8  e00a              B        |L1.1040|
                  |L1.1018|
0003fa  f1c10203          RSB      r2,r1,#3              ;117
0003fe  eb020542          ADD      r5,r2,r2,LSL #1       ;117
000402  ebc51282          RSB      r2,r5,r2,LSL #6       ;117
000406  eb000542          ADD      r5,r0,r2,LSL #1       ;117
00040a  f81a6005          LDRB     r6,[r10,r5]           ;117
00040e  43f6              MVNS     r6,r6                 ;117
                  |L1.1040|
000410  f80a6005          STRB     r6,[r10,r5]           ;117
000414  e00a              B        |L1.1068|
                  |L1.1046|
000416  f1c10503          RSB      r5,r1,#3              ;118
00041a  eb050645          ADD      r6,r5,r5,LSL #1       ;118
00041e  ebc61585          RSB      r5,r6,r5,LSL #6       ;118
000422  eb000645          ADD      r6,r0,r5,LSL #1       ;118
000426  2200              MOVS     r2,#0                 ;118
000428  f80a2006          STRB     r2,[r10,r6]           ;118
                  |L1.1068|
00042c  1e49              SUBS     r1,r1,#1              ;114
00042e  b289              UXTH     r1,r1                 ;114
                  |L1.1072|
000430  42a1              CMP      r1,r4                 ;114
000432  d8d1              BHI      |L1.984|
000434  e61c              B        |L1.112|
;;;126    //---------------------------------------------
                          ENDP

                  draw_rectangle PROC
;;;127    void draw_rectangle(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char solid,char inverse)
000436  e92d47f8          PUSH     {r3-r10,lr}
;;;128    {
00043a  4604              MOV      r4,r0
00043c  e9dd0509          LDRD     r0,r5,[sp,#0x24]
000440  4617              MOV      r7,r2
000442  468a              MOV      r10,r1
000444  4699              MOV      r9,r3
;;;129    
;;;130    signed short i;
;;;131    /*draw(x_b,y_b,0,y_o,inverse);
;;;132    draw(x_b,y_b+y_o,x_o,0,inverse);
;;;133    draw(x_b+x_o,y_b+y_o,0,-y_o,inverse);
;;;134    draw(x_b+x_o,y_b,-x_o,0,inverse);*/
;;;135    
;;;136    if(solid)
;;;137    	{
;;;138    	for(i=x_b;i<=(x_b+x_o);i++)
000446  19e6              ADDS     r6,r4,r7
000448  b948              CBNZ     r0,|L1.1118|
00044a  e00c              B        |L1.1126|
                  |L1.1100|
;;;139    		{
;;;140    		draw(i,y_b,0,y_o,inverse);
00044c  464b              MOV      r3,r9
00044e  2200              MOVS     r2,#0
000450  4651              MOV      r1,r10
000452  4620              MOV      r0,r4
000454  9500              STR      r5,[sp,#0]
000456  f7fffffe          BL       draw
00045a  1c64              ADDS     r4,r4,#1              ;138
00045c  b224              SXTH     r4,r4                 ;138
                  |L1.1118|
00045e  42a6              CMP      r6,r4                 ;138
000460  daf4              BGE      |L1.1100|
                  |L1.1122|
;;;141    		}
;;;142    	}
;;;143    else
;;;144    	{
;;;145    	draw(x_b,y_b,0,y_o,inverse);
;;;146    	draw(x_b,y_b+y_o-1,x_o,0,inverse);
;;;147    	draw(x_b+x_o-1,y_b+y_o,0,-y_o,inverse);
;;;148    	draw(x_b+x_o-1,y_b,-x_o,0,inverse);	
;;;149    	}	
;;;150    
;;;151    }
000462  e8bd87f8          POP      {r3-r10,pc}
                  |L1.1126|
000466  2200              MOVS     r2,#0                 ;145
000468  4620              MOV      r0,r4                 ;145
00046a  9500              STR      r5,[sp,#0]            ;145
00046c  f7fffffe          BL       draw
000470  eb0a0009          ADD      r0,r10,r9             ;146
000474  4680              MOV      r8,r0                 ;146
000476  1e40              SUBS     r0,r0,#1              ;146
000478  b201              SXTH     r1,r0                 ;146
00047a  2300              MOVS     r3,#0                 ;146
00047c  463a              MOV      r2,r7                 ;146
00047e  4620              MOV      r0,r4                 ;146
000480  9500              STR      r5,[sp,#0]            ;146
000482  f7fffffe          BL       draw
000486  1e76              SUBS     r6,r6,#1              ;147
000488  f1c90000          RSB      r0,r9,#0              ;147
00048c  b234              SXTH     r4,r6                 ;147
00048e  b203              SXTH     r3,r0                 ;147
000490  fa0ff188          SXTH     r1,r8                 ;147
000494  2200              MOVS     r2,#0                 ;147
000496  4620              MOV      r0,r4                 ;147
000498  9500              STR      r5,[sp,#0]            ;147
00049a  f7fffffe          BL       draw
00049e  4278              RSBS     r0,r7,#0              ;148
0004a0  b202              SXTH     r2,r0                 ;148
0004a2  2300              MOVS     r3,#0                 ;148
0004a4  4651              MOV      r1,r10                ;148
0004a6  4620              MOV      r0,r4                 ;148
0004a8  9500              STR      r5,[sp,#0]            ;148
0004aa  f7fffffe          BL       draw
0004ae  e7d8              B        |L1.1122|
;;;152    
                          ENDP

                  draw_ptr PROC
;;;153    //---------------------------------------------
;;;154    void draw_ptr(char x_b,char y_b,char ptr,char vol)
0004b0  e92d43f8          PUSH     {r3-r9,lr}
;;;155    {
0004b4  4681              MOV      r9,r0
0004b6  460e              MOV      r6,r1
0004b8  461d              MOV      r5,r3
0004ba  2000              MOVS     r0,#0
;;;156    char i;
;;;157    if(ptr==0)
0004bc  b122              CBZ      r2,|L1.1224|
;;;158    	{
;;;159    	for(i=0;i<vol;i++)
;;;160    		{
;;;161    		draw(x_b,y_b+i,-(vol-i),0,0);
;;;162    		draw(x_b,y_b+i,(vol-i),0,0);
;;;163    		}
;;;164    	}
;;;165    else if(ptr==2)
0004be  2a02              CMP      r2,#2
0004c0  d11a              BNE      |L1.1272|
;;;166    	{
;;;167    	for(i=0;i<vol;i++)
0004c2  2400              MOVS     r4,#0
0004c4  4680              MOV      r8,r0                 ;155
0004c6  e02c              B        |L1.1314|
                  |L1.1224|
0004c8  2400              MOVS     r4,#0                 ;159
0004ca  4680              MOV      r8,r0                 ;155
0004cc  e012              B        |L1.1268|
                  |L1.1230|
0004ce  1937              ADDS     r7,r6,r4              ;161
0004d0  1b62              SUBS     r2,r4,r5              ;161
0004d2  2300              MOVS     r3,#0                 ;161
0004d4  4639              MOV      r1,r7                 ;161
0004d6  4648              MOV      r0,r9                 ;161
0004d8  f8cd8000          STR      r8,[sp,#0]            ;161
0004dc  f7fffffe          BL       draw
0004e0  1b2a              SUBS     r2,r5,r4              ;162
0004e2  2300              MOVS     r3,#0                 ;162
0004e4  4639              MOV      r1,r7                 ;162
0004e6  4648              MOV      r0,r9                 ;162
0004e8  f8cd8000          STR      r8,[sp,#0]            ;162
0004ec  f7fffffe          BL       draw
0004f0  1c64              ADDS     r4,r4,#1              ;159
0004f2  b2e4              UXTB     r4,r4                 ;159
                  |L1.1268|
0004f4  42ac              CMP      r4,r5                 ;159
0004f6  d3ea              BCC      |L1.1230|
                  |L1.1272|
;;;168    		{
;;;169    		draw(x_b,y_b-i,-(vol-i),0,0);
;;;170    		draw(x_b,y_b-i,(vol-i),0,0);
;;;171    		}
;;;172    	}	
;;;173    }
0004f8  e8bd83f8          POP      {r3-r9,pc}
                  |L1.1276|
0004fc  1b37              SUBS     r7,r6,r4              ;169
0004fe  1b62              SUBS     r2,r4,r5              ;169
000500  2300              MOVS     r3,#0                 ;169
000502  4639              MOV      r1,r7                 ;169
000504  4648              MOV      r0,r9                 ;169
000506  f8cd8000          STR      r8,[sp,#0]            ;169
00050a  f7fffffe          BL       draw
00050e  1b2a              SUBS     r2,r5,r4              ;170
000510  2300              MOVS     r3,#0                 ;170
000512  4639              MOV      r1,r7                 ;170
000514  4648              MOV      r0,r9                 ;170
000516  f8cd8000          STR      r8,[sp,#0]            ;170
00051a  f7fffffe          BL       draw
00051e  1c64              ADDS     r4,r4,#1              ;167
000520  b2e4              UXTB     r4,r4                 ;167
                  |L1.1314|
000522  42ac              CMP      r4,r5                 ;167
000524  d3ea              BCC      |L1.1276|
000526  e7e7              B        |L1.1272|
;;;174    
                          ENDP

                  plot PROC
;;;175    //-----------------------------------------------
;;;176    void plot(signed short x_b,signed short y_b,unsigned long data,signed short len,char inverse)
000528  e92d47f8          PUSH     {r3-r10,lr}
;;;177    {
;;;178    //unsigned short num_byte;
;;;179    //signed short byte_offset;
;;;180    //unsigned short x_target;
;;;181    //unsigned short i;
;;;182    //char num_bite;
;;;183    //unsigned short /*y_begin*/y_bit_begin;
;;;184    //unsigned short y_target,y_bit_target;
;;;185    unsigned long data1/*,data2*/;
;;;186    char data1_0,data1_1,data1_2,data1_3;
;;;187    
;;;188    data1=0xffffffffUL;
00052c  f04f35ff          MOV      r5,#0xffffffff
;;;189    data1<<=(32-len);
000530  f1c30320          RSB      r3,r3,#0x20
000534  409d              LSLS     r5,r5,r3
;;;190    data1&=data;
000536  ea050302          AND      r3,r5,r2
;;;191    data1=data1>>y_b;
00053a  fa23f201          LSR      r2,r3,r1
;;;192    
;;;193    data1_0=*((char*)&data1);
00053e  9200              STR      r2,[sp,#0]
;;;194    data1_1=*(((char*)&data1)+1);
;;;195    data1_2=*(((char*)&data1)+2);
000540  f89d1002          LDRB     r1,[sp,#2]
;;;196    data1_3=*(((char*)&data1)+3);
;;;197    
;;;198    if(!inverse)
;;;199    	{
;;;200    	lcd_bitmap[x_b]|=data1_0;
000544  f8df82a4          LDR      r8,|L1.2028|
000548  4689              MOV      r9,r1                 ;195
00054a  f89d1003          LDRB     r1,[sp,#3]            ;196
00054e  9c09              LDR      r4,[sp,#0x24]         ;191
000550  468a              MOV      r10,r1                ;196
000552  eb080100          ADD      r1,r8,r0
000556  f89d7000          LDRB     r7,[sp,#0]            ;193
00055a  f89dc001          LDRB     r12,[sp,#1]           ;194
00055e  f8182000          LDRB     r2,[r8,r0]
;;;201    	lcd_bitmap[122+x_b]|=data1_1;
000562  f891307a          LDRB     r3,[r1,#0x7a]
;;;202    	lcd_bitmap[244+x_b]|=data1_2;
000566  f89150f4          LDRB     r5,[r1,#0xf4]
;;;203    	lcd_bitmap[366+x_b]|=data1_3;
00056a  f891616e          LDRB     r6,[r1,#0x16e]
00056e  b184              CBZ      r4,|L1.1426|
;;;204    	}
;;;205    else if(inverse)
;;;206    	{
;;;207    	lcd_bitmap[x_b]^=data1_0;
000570  407a              EORS     r2,r2,r7
000572  f8082000          STRB     r2,[r8,r0]
;;;208    	lcd_bitmap[122+x_b]^=data1_1;
000576  ea83030c          EOR      r3,r3,r12
00057a  f881307a          STRB     r3,[r1,#0x7a]
;;;209    	lcd_bitmap[244+x_b]^=data1_2;
00057e  ea850509          EOR      r5,r5,r9
000582  f88150f4          STRB     r5,[r1,#0xf4]
;;;210    	lcd_bitmap[366+x_b]^=data1_3;
000586  ea86060a          EOR      r6,r6,r10
00058a  bf00              NOP                            ;203
                  |L1.1420|
00058c  f881616e          STRB     r6,[r1,#0x16e]        ;203
;;;211    	}
;;;212    
;;;213    }	
000590  e767              B        |L1.1122|
                  |L1.1426|
000592  433a              ORRS     r2,r2,r7              ;200
000594  f8082000          STRB     r2,[r8,r0]            ;200
000598  ea43030c          ORR      r3,r3,r12             ;201
00059c  f881307a          STRB     r3,[r1,#0x7a]         ;201
0005a0  ea450509          ORR      r5,r5,r9              ;202
0005a4  f88150f4          STRB     r5,[r1,#0xf4]         ;202
0005a8  ea46060a          ORR      r6,r6,r10             ;203
0005ac  e7ee              B        |L1.1420|
;;;214    
                          ENDP

                  graphic_print PROC
;;;216    //-----------------------------------------------
;;;217    void graphic_print(signed short x_b,signed short y_b,signed short x_l,signed short y_l,signed short x_d,signed short y_d,const char* adress,char inverse)
0005ae  e92d4ffc          PUSH     {r2-r11,lr}
;;;218    {
0005b2  4607              MOV      r7,r0
0005b4  a80c              ADD      r0,sp,#0x30
0005b6  468a              MOV      r10,r1
0005b8  e8b00310          LDM      r0!,{r4,r8,r9}
0005bc  4616              MOV      r6,r2
0005be  469b              MOV      r11,r3
;;;219    signed short i;
;;;220    
;;;221    for(i=0;i<x_l;i++)
0005c0  2500              MOVS     r5,#0
0005c2  e01c              B        |L1.1534|
                  |L1.1476|
;;;222    	{
;;;223    	long data;
;;;224    	
;;;225    	*(((char*)&data)+3)=adress[(i*y_d)+y_d-1];
0005c4  fb058004          MLA      r0,r5,r4,r8
0005c8  1e61              SUBS     r1,r4,#1
;;;226    	*(((char*)&data)+2)=adress[(i*y_d)+y_d-2];
;;;227    	*(((char*)&data)+1)=adress[(i*y_d)+y_d-3];
;;;228    	*((char*)&data)=adress[(i*y_d)+y_d-4];
;;;229    	
;;;230    	//data=0x08000000;
;;;231    	
;;;232    	plot(x_b+i,y_b,data,y_l,inverse);
0005ca  465b              MOV      r3,r11
0005cc  5c41              LDRB     r1,[r0,r1]            ;225
0005ce  f88d1007          STRB     r1,[sp,#7]            ;225
0005d2  1ea1              SUBS     r1,r4,#2              ;226
0005d4  5c41              LDRB     r1,[r0,r1]            ;226
0005d6  f88d1006          STRB     r1,[sp,#6]            ;226
0005da  1ee1              SUBS     r1,r4,#3              ;227
0005dc  5c41              LDRB     r1,[r0,r1]            ;227
0005de  f88d1005          STRB     r1,[sp,#5]            ;227
0005e2  1f21              SUBS     r1,r4,#4              ;228
0005e4  5c40              LDRB     r0,[r0,r1]            ;228
0005e6  f88d0004          STRB     r0,[sp,#4]            ;228
0005ea  1978              ADDS     r0,r7,r5
0005ec  b200              SXTH     r0,r0
0005ee  f8cd9000          STR      r9,[sp,#0]
0005f2  4651              MOV      r1,r10
0005f4  9a01              LDR      r2,[sp,#4]
0005f6  f7fffffe          BL       plot
0005fa  1c6d              ADDS     r5,r5,#1              ;221
0005fc  b22d              SXTH     r5,r5                 ;221
                  |L1.1534|
0005fe  42b5              CMP      r5,r6                 ;221
000600  dbe0              BLT      |L1.1476|
;;;233    	}
;;;234    }
000602  e8bd8ffc          POP      {r2-r11,pc}
;;;235    
                          ENDP

                  graphic_print_text PROC
;;;236    //-----------------------------------------------
;;;237    void graphic_print_text(signed short x_b,signed short y_b,const char* bgnd,signed short num,signed short data,signed short des,signed short pos,char inverse)
000606  e92d4fff          PUSH     {r0-r11,lr}
;;;238    {
00060a  b096              SUB      sp,sp,#0x58
00060c  4681              MOV      r9,r0
00060e  a824              ADD      r0,sp,#0x90
;;;239    signed short i;
;;;240    char buffer[10];
000610  f8dd508c          LDR.W    r5,[sp,#0x8c]
000614  e8b00c10          LDM      r0!,{r4,r10,r11}      ;238
;;;241    char bitmap_buffer[60];
;;;242    for(i=0;i<10;i++)
000618  2000              MOVS     r0,#0
;;;243    	{
;;;244    	buffer[i]=' ';
00061a  2620              MOVS     r6,#0x20
00061c  f10d0840          ADD      r8,sp,#0x40           ;240
                  |L1.1568|
000620  f8086000          STRB     r6,[r8,r0]
000624  1c40              ADDS     r0,r0,#1              ;242
000626  b200              SXTH     r0,r0                 ;242
000628  280a              CMP      r0,#0xa               ;242
00062a  dbf9              BLT      |L1.1568|
;;;245    	}
;;;246    for(i=0;i<num;i++)
00062c  2000              MOVS     r0,#0
00062e  e004              B        |L1.1594|
                  |L1.1584|
;;;247    	{
;;;248    	buffer[i]=bgnd[i];
000630  5c11              LDRB     r1,[r2,r0]
000632  f8081000          STRB     r1,[r8,r0]
000636  1c40              ADDS     r0,r0,#1              ;246
000638  b200              SXTH     r0,r0                 ;246
                  |L1.1594|
00063a  4298              CMP      r0,r3                 ;246
00063c  dbf8              BLT      |L1.1584|
;;;249    	}	
;;;250    	
;;;251    {	
;;;252    signed char i;
;;;253    //char n;
;;;254    char s[10];
;;;255    char minus='+';
00063e  272b              MOVS     r7,#0x2b
;;;256    char zero_on;
;;;257    char simb_num;
;;;258    
;;;259    if(data<0)
000640  2d00              CMP      r5,#0
000642  da02              BGE      |L1.1610|
;;;260    	{
;;;261    	data=-data;
000644  4268              RSBS     r0,r5,#0
000646  b205              SXTH     r5,r0
;;;262    	minus='-';
000648  272d              MOVS     r7,#0x2d
                  |L1.1610|
;;;263    	}
;;;264    
;;;265    for(i=0;i<10;i++)
00064a  2100              MOVS     r1,#0
;;;266    	{
;;;267    	s[i]=data%10;
00064c  f04f0c0a          MOV      r12,#0xa
000650  f10d004c          ADD.W    r0,sp,#0x4c           ;254
                  |L1.1620|
000654  fb95f2fc          SDIV     r2,r5,r12
000658  fb0c5512          MLS      r5,r12,r2,r5
00065c  5445              STRB     r5,[r0,r1]
00065e  1c49              ADDS     r1,r1,#1              ;265
000660  b249              SXTB     r1,r1                 ;265
;;;268    	data/=10;
000662  b215              SXTH     r5,r2
000664  290a              CMP      r1,#0xa               ;265
000666  dbf5              BLT      |L1.1620|
;;;269    	}   
;;;270    
;;;271    zero_on=1;
000668  2501              MOVS     r5,#1
;;;272    simb_num=0;
00066a  2100              MOVS     r1,#0
;;;273    
;;;274    for (i=9;i>=0;i--)
00066c  2209              MOVS     r2,#9
00066e  e000              B        |L1.1650|
                  |L1.1648|
;;;275    	{
;;;276    	if(zero_on&&(!s[i])&&(i>(des)))
000670  b145              CBZ      r5,|L1.1668|
                  |L1.1650|
000672  f810c002          LDRB     r12,[r0,r2]
000676  f1bc0f00          CMP      r12,#0
00067a  d103              BNE      |L1.1668|
00067c  42a2              CMP      r2,r4
00067e  dd01              BLE      |L1.1668|
;;;277    	     {
;;;278    	     s[i]=0x20;
000680  5486              STRB     r6,[r0,r2]
000682  e005              B        |L1.1680|
                  |L1.1668|
;;;279    	     }
;;;280    	else 
;;;281    	     {
;;;282    	     s[i]=s[i]+0x30;
000684  5c85              LDRB     r5,[r0,r2]
000686  3530              ADDS     r5,r5,#0x30
000688  5485              STRB     r5,[r0,r2]
;;;283    	     zero_on=0;
00068a  2500              MOVS     r5,#0
;;;284    	     simb_num++;
00068c  1c49              ADDS     r1,r1,#1
00068e  b2c9              UXTB     r1,r1
                  |L1.1680|
000690  1e52              SUBS     r2,r2,#1              ;274
000692  b252              SXTB     r2,r2                 ;274
000694  2a00              CMP      r2,#0                 ;274
000696  daeb              BGE      |L1.1648|
;;;285    	     }
;;;286    	 }
;;;287    	          
;;;288    if(minus=='-')	
000698  2f2d              CMP      r7,#0x2d
00069a  d102              BNE      |L1.1698|
;;;289         {
;;;290         s[simb_num++]=minus; 
00069c  5447              STRB     r7,[r0,r1]
00069e  1c49              ADDS     r1,r1,#1
0006a0  b2c9              UXTB     r1,r1
                  |L1.1698|
;;;291         }    
;;;292    if(des)
0006a2  b16c              CBZ      r4,|L1.1728|
;;;293         {
;;;294         for(i=simb_num;i>des;i--)
0006a4  b24a              SXTB     r2,r1
0006a6  e005              B        |L1.1716|
                  |L1.1704|
;;;295              {
;;;296              s[i]=s[i-1];
0006a8  1885              ADDS     r5,r0,r2
0006aa  f8155c01          LDRB     r5,[r5,#-1]
0006ae  5485              STRB     r5,[r0,r2]
0006b0  1e52              SUBS     r2,r2,#1              ;294
0006b2  b252              SXTB     r2,r2                 ;294
                  |L1.1716|
0006b4  42a2              CMP      r2,r4                 ;294
0006b6  dcf7              BGT      |L1.1704|
;;;297              }
;;;298         s[des]='.';
0006b8  222e              MOVS     r2,#0x2e
;;;299         simb_num++;     
0006ba  1c49              ADDS     r1,r1,#1
0006bc  5502              STRB     r2,[r0,r4]            ;298
0006be  b2c9              UXTB     r1,r1
                  |L1.1728|
;;;300         }
;;;301    	
;;;302    for (i=0;i<simb_num;i++)
0006c0  2200              MOVS     r2,#0
0006c2  e007              B        |L1.1748|
                  |L1.1732|
;;;303    	{
;;;304         buffer[pos-1-i]=s[i];
0006c4  ebaa0402          SUB      r4,r10,r2
0006c8  5c85              LDRB     r5,[r0,r2]
0006ca  4444              ADD      r4,r4,r8
0006cc  1c52              ADDS     r2,r2,#1              ;302
0006ce  f8045c01          STRB     r5,[r4,#-1]
0006d2  b252              SXTB     r2,r2                 ;302
                  |L1.1748|
0006d4  428a              CMP      r2,r1                 ;302
0006d6  dbf5              BLT      |L1.1732|
;;;305    	}
;;;306    }	
;;;307    	
;;;308    		
;;;309    for(i=0;i<num;i++)
0006d8  2000              MOVS     r0,#0
0006da  ac01              ADD      r4,sp,#4              ;241
0006dc  e01b              B        |L1.1814|
;;;310    	{
;;;311    	bitmap_buffer[(6*i)+0]=caracter[(unsigned)buffer[i]*6];
0006de  bf00              NOP      
                  |L1.1760|
0006e0  f8181000          LDRB     r1,[r8,r0]
0006e4  4e42              LDR      r6,|L1.2032|
0006e6  eb010241          ADD      r2,r1,r1,LSL #1
0006ea  eb000140          ADD      r1,r0,r0,LSL #1
0006ee  f8165012          LDRB     r5,[r6,r2,LSL #1]
0006f2  f8045011          STRB     r5,[r4,r1,LSL #1]
;;;312    	bitmap_buffer[(6*i)+1]=caracter[((unsigned)buffer[i]*6)+1];
0006f6  eb060242          ADD      r2,r6,r2,LSL #1
0006fa  eb040141          ADD      r1,r4,r1,LSL #1
0006fe  7855              LDRB     r5,[r2,#1]
000700  704d              STRB     r5,[r1,#1]
;;;313    	bitmap_buffer[(6*i)+2]=caracter[((unsigned)buffer[i]*6)+2];
000702  7895              LDRB     r5,[r2,#2]
000704  708d              STRB     r5,[r1,#2]
;;;314    	bitmap_buffer[(6*i)+3]=caracter[((unsigned)buffer[i]*6)+3];
000706  78d5              LDRB     r5,[r2,#3]
000708  70cd              STRB     r5,[r1,#3]
;;;315    	bitmap_buffer[(6*i)+4]=caracter[((unsigned)buffer[i]*6)+4];
00070a  7915              LDRB     r5,[r2,#4]
00070c  710d              STRB     r5,[r1,#4]
;;;316    	bitmap_buffer[(6*i)+5]=caracter[((unsigned)buffer[i]*6)+5];
00070e  7952              LDRB     r2,[r2,#5]
000710  1c40              ADDS     r0,r0,#1              ;309
000712  714a              STRB     r2,[r1,#5]
000714  b200              SXTH     r0,r0                 ;309
                  |L1.1814|
000716  4298              CMP      r0,r3                 ;309
000718  dbe2              BLT      |L1.1760|
;;;317    	}
;;;318    for(i=0;i<(num*6);i++)
00071a  2500              MOVS     r5,#0
00071c  eb030643          ADD      r6,r3,r3,LSL #1
000720  e00e              B        |L1.1856|
                  |L1.1826|
;;;319    	{
;;;320    	long data;
;;;321    	
;;;322    	*(((char*)&data)+3)=bitmap_buffer[i];
000722  5d60              LDRB     r0,[r4,r5]
000724  f88d004f          STRB     r0,[sp,#0x4f]
;;;323    	
;;;324    	//data=0x08000000;
;;;325    	
;;;326    	plot(x_b+i,y_b,data,8,inverse);
000728  eb090005          ADD      r0,r9,r5
00072c  b200              SXTH     r0,r0
00072e  2308              MOVS     r3,#8
000730  f8cdb000          STR      r11,[sp,#0]
000734  9a13              LDR      r2,[sp,#0x4c]
000736  9917              LDR      r1,[sp,#0x5c]
000738  f7fffffe          BL       plot
00073c  1c6d              ADDS     r5,r5,#1              ;318
00073e  b22d              SXTH     r5,r5                 ;318
                  |L1.1856|
000740  ebb50f46          CMP      r5,r6,LSL #1          ;318
000744  dbed              BLT      |L1.1826|
;;;327    	}
;;;328    }
000746  b01a              ADD      sp,sp,#0x68
000748  e8bd8ff0          POP      {r4-r11,pc}
;;;329    
                          ENDP

                  graphic_print_text_text PROC
;;;330    //-----------------------------------------------
;;;331    void graphic_print_text_text(signed short x_b,signed short y_b,const char* bgnd,signed short num,signed short data,signed short des,signed short pos,char inverse)
00074c  e92d47f0          PUSH     {r4-r10,lr}
;;;332    {
000750  b094              SUB      sp,sp,#0x50
000752  4680              MOV      r8,r0
000754  468a              MOV      r10,r1
;;;333    signed short i;
;;;334    char buffer[10];
;;;335    char bitmap_buffer[60];
;;;336    for(i=0;i<10;i++)
000756  2000              MOVS     r0,#0
000758  f8dd907c          LDR      r9,[sp,#0x7c]         ;334
;;;337    	{
;;;338    	buffer[i]=' ';
00075c  2420              MOVS     r4,#0x20
00075e  a910              ADD      r1,sp,#0x40           ;334
                  |L1.1888|
000760  540c              STRB     r4,[r1,r0]
000762  1c40              ADDS     r0,r0,#1              ;336
000764  b200              SXTH     r0,r0                 ;336
000766  280a              CMP      r0,#0xa               ;336
000768  dbfa              BLT      |L1.1888|
;;;339    	}
;;;340    for(i=0;i<num;i++)
00076a  2000              MOVS     r0,#0
00076c  e003              B        |L1.1910|
                  |L1.1902|
;;;341    	{
;;;342    	buffer[i]=bgnd[i];
00076e  5c14              LDRB     r4,[r2,r0]
000770  540c              STRB     r4,[r1,r0]
000772  1c40              ADDS     r0,r0,#1              ;340
000774  b200              SXTH     r0,r0                 ;340
                  |L1.1910|
000776  4298              CMP      r0,r3                 ;340
000778  dbf9              BLT      |L1.1902|
;;;343    	}	
;;;344    	
;;;345    {	
;;;346    //signed char i;
;;;347    //char n;
;;;348    //char s[10];
;;;349    //char minus='+';
;;;350    //char zero_on;
;;;351    //char simb_num;
;;;352    /*
;;;353    if(data<0)
;;;354    	{
;;;355    	data=-data;
;;;356    	minus='-';
;;;357    	}
;;;358    
;;;359    for(i=0;i<10;i++)
;;;360    	{
;;;361    	s[i]=data%10;
;;;362    	data/=10;
;;;363    	} */  
;;;364    
;;;365    //zero_on=1;
;;;366    //simb_num=0;
;;;367    
;;;368    //if(s[0]==0)s[0]=0;
;;;369    /*
;;;370    for (i=9;i>=0;i--)
;;;371    	{
;;;372    	if(zero_on&&(!s[i])&&(i>(des)))
;;;373    	     {
;;;374    	     s[i]=0x20;
;;;375    	     }
;;;376    	else 
;;;377    	     {
;;;378    	     s[i]=s[i]+0x30;
;;;379    	     zero_on=0;
;;;380    	     simb_num++;
;;;381    	     }
;;;382    	 }
;;;383    	          
;;;384    	
;;;385    */
;;;386    }	
;;;387    	
;;;388    		
;;;389    for(i=0;i<num;i++)
00077a  2000              MOVS     r0,#0
00077c  ac01              ADD      r4,sp,#4              ;335
00077e  e019              B        |L1.1972|
                  |L1.1920|
;;;390    	{
;;;391    	bitmap_buffer[(6*i)+0]=caracter[(unsigned)buffer[i]*6];
000780  5c0a              LDRB     r2,[r1,r0]
000782  4f1b              LDR      r7,|L1.2032|
000784  eb020242          ADD      r2,r2,r2,LSL #1
000788  eb000540          ADD      r5,r0,r0,LSL #1
00078c  f8176012          LDRB     r6,[r7,r2,LSL #1]
000790  f8046015          STRB     r6,[r4,r5,LSL #1]
;;;392    	bitmap_buffer[(6*i)+1]=caracter[((unsigned)buffer[i]*6)+1];
000794  eb070242          ADD      r2,r7,r2,LSL #1
000798  eb040545          ADD      r5,r4,r5,LSL #1
00079c  7856              LDRB     r6,[r2,#1]
00079e  706e              STRB     r6,[r5,#1]
;;;393    	bitmap_buffer[(6*i)+2]=caracter[((unsigned)buffer[i]*6)+2];
0007a0  7896              LDRB     r6,[r2,#2]
0007a2  70ae              STRB     r6,[r5,#2]
;;;394    	bitmap_buffer[(6*i)+3]=caracter[((unsigned)buffer[i]*6)+3];
0007a4  78d6              LDRB     r6,[r2,#3]
0007a6  70ee              STRB     r6,[r5,#3]
;;;395    	bitmap_buffer[(6*i)+4]=caracter[((unsigned)buffer[i]*6)+4];
0007a8  7916              LDRB     r6,[r2,#4]
0007aa  712e              STRB     r6,[r5,#4]
;;;396    	bitmap_buffer[(6*i)+5]=caracter[((unsigned)buffer[i]*6)+5];
0007ac  7952              LDRB     r2,[r2,#5]
0007ae  1c40              ADDS     r0,r0,#1              ;389
0007b0  716a              STRB     r2,[r5,#5]
0007b2  b200              SXTH     r0,r0                 ;389
                  |L1.1972|
0007b4  4298              CMP      r0,r3                 ;389
0007b6  dbe3              BLT      |L1.1920|
;;;397    	}
;;;398    for(i=0;i<(num*6);i++)
0007b8  2500              MOVS     r5,#0
0007ba  eb030643          ADD      r6,r3,r3,LSL #1
0007be  e00e              B        |L1.2014|
                  |L1.1984|
;;;399    	{
;;;400    	long data;
;;;401    	
;;;402    	*(((char*)&data)+3)=bitmap_buffer[i];
0007c0  5d60              LDRB     r0,[r4,r5]
0007c2  f88d004f          STRB     r0,[sp,#0x4f]
;;;403    	
;;;404    	//data=0x08000000;
;;;405    	
;;;406    	plot(x_b+i,y_b,data,8,inverse);
0007c6  eb080005          ADD      r0,r8,r5
0007ca  b200              SXTH     r0,r0
0007cc  2308              MOVS     r3,#8
0007ce  f8cd9000          STR      r9,[sp,#0]
0007d2  4651              MOV      r1,r10
0007d4  9a13              LDR      r2,[sp,#0x4c]
0007d6  f7fffffe          BL       plot
0007da  1c6d              ADDS     r5,r5,#1              ;398
0007dc  b22d              SXTH     r5,r5                 ;398
                  |L1.2014|
0007de  ebb50f46          CMP      r5,r6,LSL #1          ;398
0007e2  dbed              BLT      |L1.1984|
;;;407    	}
;;;408    }
0007e4  b014              ADD      sp,sp,#0x50
0007e6  e8bd87f0          POP      {r4-r10,pc}
                          ENDP

0007ea  0000              DCW      0x0000
                  |L1.2028|
                          DCD      lcd_bitmap
                  |L1.2032|
                          DCD      caracter

;*** Start embedded assembler ***

#line 1 "graphic.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_graphic_c_draw____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_graphic_c_draw____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_graphic_c_draw____REVSH|
#line 130
|__asm___9_graphic_c_draw____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
