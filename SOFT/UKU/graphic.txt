; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\graphic.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\graphic.d --feedback=.\EXE\UKU2071x_GALV_IBv2.fed --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 -DWG12232A --omf_browse=.\EXE\graphic.crf graphic.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  draw PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;8      {
000004  469e              MOV      lr,r3
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  9b0a              LDR      r3,[sp,#0x28]
000008  2920              CMP      r1,#0x20
00000a  d231              BCS      |L1.112|
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000c  17cc              ASRS     r4,r1,#31
00000e  eb017554          ADD      r5,r1,r4,LSR #29
000012  10ec              ASRS     r4,r5,#3
000014  4626              MOV      r6,r4
000016  f06f073c          MVN      r7,#0x3c
00001a  437c              MULS     r4,r7,r4
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
00001c  f0250507          BIC      r5,r5,#7
000020  eb000444          ADD      r4,r0,r4,LSL #1       ;25
000024  1b4d              SUBS     r5,r1,r5
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
000026  f8dfa410          LDR      r10,|L1.1080|
00002a  f50474b7          ADD      r4,r4,#0x16e          ;25
00002e  2a00              CMP      r2,#0                 ;23
000030  d034              BEQ      |L1.156|
000032  b2a0              UXTH     r0,r4                 ;25
000034  f1c50107          RSB      r1,r5,#7              ;28
000038  b2c9              UXTB     r1,r1                 ;28
00003a  f04f0401          MOV      r4,#1
00003e  fa04f401          LSL      r4,r4,r1
000042  4402              ADD      r2,r2,r0              ;31
000044  4651              MOV      r1,r10
000046  dc11              BGT      |L1.108|
000048  e025              B        |L1.150|
                  |L1.74|
00004a  b123              CBZ      r3,|L1.86|
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004c  2b01              CMP      r3,#1
00004e  d005              BEQ      |L1.92|
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
000050  2b02              CMP      r3,#2
000052  d006              BEQ      |L1.98|
000054  e008              B        |L1.104|
                  |L1.86|
000056  5c0d              LDRB     r5,[r1,r0]            ;33
000058  4325              ORRS     r5,r5,r4              ;33
00005a  e004              B        |L1.102|
                  |L1.92|
00005c  5c0d              LDRB     r5,[r1,r0]            ;34
00005e  4065              EORS     r5,r5,r4              ;34
000060  e001              B        |L1.102|
                  |L1.98|
000062  5c0d              LDRB     r5,[r1,r0]
000064  4025              ANDS     r5,r5,r4
                  |L1.102|
000066  540d              STRB     r5,[r1,r0]
                  |L1.104|
000068  1c40              ADDS     r0,r0,#1              ;31
00006a  b280              UXTH     r0,r0                 ;31
                  |L1.108|
00006c  4282              CMP      r2,r0                 ;31
00006e  dcec              BGT      |L1.74|
                  |L1.112|
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
000070  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.116|
000074  b123              CBZ      r3,|L1.128|
000076  2b01              CMP      r3,#1                 ;43
000078  d005              BEQ      |L1.134|
00007a  2b02              CMP      r3,#2                 ;44
00007c  d006              BEQ      |L1.140|
00007e  e008              B        |L1.146|
                  |L1.128|
000080  5c0d              LDRB     r5,[r1,r0]            ;42
000082  4325              ORRS     r5,r5,r4              ;42
000084  e004              B        |L1.144|
                  |L1.134|
000086  5c0d              LDRB     r5,[r1,r0]            ;43
000088  4065              EORS     r5,r5,r4              ;43
00008a  e001              B        |L1.144|
                  |L1.140|
00008c  5c0d              LDRB     r5,[r1,r0]            ;44
00008e  4025              ANDS     r5,r5,r4              ;44
                  |L1.144|
000090  540d              STRB     r5,[r1,r0]            ;44
                  |L1.146|
000092  1e40              SUBS     r0,r0,#1              ;40
000094  b280              UXTH     r0,r0                 ;40
                  |L1.150|
000096  4282              CMP      r2,r0                 ;40
000098  dbec              BLT      |L1.116|
                  |L1.154|
00009a  e7e9              B        |L1.112|
                  |L1.156|
00009c  f1be0f00          CMP      lr,#0                 ;48
0000a0  d0e6              BEQ      |L1.112|
0000a2  b2b2              UXTH     r2,r6                 ;51
0000a4  eb01060e          ADD      r6,r1,lr              ;52
0000a8  ea4f74e6          ASR      r4,r6,#31             ;52
0000ac  eb067754          ADD      r7,r6,r4,LSR #29      ;52
0000b0  b2ad              UXTH     r5,r5                 ;53
0000b2  46a9              MOV      r9,r5                 ;53
0000b4  f0270507          BIC      r5,r7,#7              ;54
0000b8  f3c704cf          UBFX     r4,r7,#3,#16          ;52
0000bc  eba60505          SUB      r5,r6,r5              ;54
0000c0  b2af              UXTH     r7,r5                 ;54
0000c2  dd77              BLE      |L1.436|
0000c4  42a2              CMP      r2,r4                 ;59
0000c6  d144              BNE      |L1.338|
0000c8  46c8              MOV      r8,r9                 ;61
0000ca  e03f              B        |L1.332|
                  |L1.204|
0000cc  b123              CBZ      r3,|L1.216|
0000ce  2b01              CMP      r3,#1                 ;64
0000d0  d013              BEQ      |L1.250|
0000d2  2b02              CMP      r3,#2                 ;65
0000d4  d024              BEQ      |L1.288|
0000d6  e035              B        |L1.324|
                  |L1.216|
0000d8  f1c20103          RSB      r1,r2,#3              ;63
0000dc  eb010541          ADD      r5,r1,r1,LSL #1       ;63
0000e0  ebc51181          RSB      r1,r5,r1,LSL #6       ;63
0000e4  eb000641          ADD      r6,r0,r1,LSL #1       ;63
0000e8  f1c80c07          RSB      r12,r8,#7             ;63
0000ec  f81a1006          LDRB     r1,[r10,r6]           ;63
0000f0  2501              MOVS     r5,#1                 ;63
0000f2  fa05f50c          LSL      r5,r5,r12             ;63
0000f6  4329              ORRS     r1,r1,r5              ;63
0000f8  e00f              B        |L1.282|
                  |L1.250|
0000fa  f1c20103          RSB      r1,r2,#3              ;64
0000fe  eb010541          ADD      r5,r1,r1,LSL #1       ;64
000102  ebc51181          RSB      r1,r5,r1,LSL #6       ;64
000106  eb000641          ADD      r6,r0,r1,LSL #1       ;64
00010a  f1c80c07          RSB      r12,r8,#7             ;64
00010e  f81a1006          LDRB     r1,[r10,r6]           ;64
000112  2501              MOVS     r5,#1                 ;64
000114  fa05f50c          LSL      r5,r5,r12             ;64
000118  4069              EORS     r1,r1,r5              ;64
                  |L1.282|
00011a  f80a1006          STRB     r1,[r10,r6]           ;64
00011e  e011              B        |L1.324|
                  |L1.288|
000120  f1c20103          RSB      r1,r2,#3              ;65
000124  eb010541          ADD      r5,r1,r1,LSL #1       ;65
000128  ebc51181          RSB      r1,r5,r1,LSL #6       ;65
00012c  eb000541          ADD      r5,r0,r1,LSL #1       ;65
000130  f1c80c07          RSB      r12,r8,#7             ;65
000134  f81a6005          LDRB     r6,[r10,r5]           ;65
000138  2101              MOVS     r1,#1                 ;65
00013a  fa01f10c          LSL      r1,r1,r12             ;65
00013e  438e              BICS     r6,r6,r1              ;65
000140  f80a6005          STRB     r6,[r10,r5]           ;65
                  |L1.324|
000144  f1080801          ADD      r8,r8,#1              ;61
000148  fa1ff888          UXTH     r8,r8                 ;61
                  |L1.332|
00014c  45b8              CMP      r8,r7                 ;61
00014e  d3bd              BCC      |L1.204|
000150  e08c              B        |L1.620|
                  |L1.338|
000152  17cd              ASRS     r5,r1,#31             ;25
000154  eb017c55          ADD      r12,r1,r5,LSR #29     ;25
000158  f3cc05cf          UBFX     r5,r12,#3,#16         ;51
00015c  f1c50503          RSB      r5,r5,#3              ;70
000160  eb050645          ADD      r6,r5,r5,LSL #1       ;70
000164  ebc61585          RSB      r5,r6,r5,LSL #6       ;70
000168  eb000845          ADD      r8,r0,r5,LSL #1       ;70
00016c  f02c0507          BIC      r5,r12,#7             ;28
000170  1b4e              SUBS     r6,r1,r5              ;28
000172  25ff              MOVS     r5,#0xff              ;70
000174  40f5              LSRS     r5,r5,r6              ;70
000176  4471              ADD      r1,r1,lr              ;52
000178  17ce              ASRS     r6,r1,#31             ;52
00017a  eb017656          ADD      r6,r1,r6,LSR #29      ;52
00017e  9600              STR      r6,[sp,#0]            ;52
000180  f3c606cf          UBFX     r6,r6,#3,#16          ;52
000184  f1c60603          RSB      r6,r6,#3              ;74
000188  eb060c46          ADD      r12,r6,r6,LSL #1      ;74
00018c  ebcc1686          RSB      r6,r12,r6,LSL #6      ;74
000190  eb000646          ADD      r6,r0,r6,LSL #1       ;74
000194  46b3              MOV      r11,r6                ;74
000196  9e00              LDR      r6,[sp,#0]            ;54
000198  f0260607          BIC      r6,r6,#7              ;54
00019c  1b89              SUBS     r1,r1,r6              ;54
00019e  b289              UXTH     r1,r1                 ;54
0001a0  f1c10608          RSB      r6,r1,#8              ;74
0001a4  21ff              MOVS     r1,#0xff              ;74
0001a6  40b1              LSLS     r1,r1,r6              ;74
0001a8  b12b              CBZ      r3,|L1.438|
0001aa  2b01              CMP      r3,#1                 ;71
0001ac  d00e              BEQ      |L1.460|
0001ae  2b02              CMP      r3,#2                 ;72
0001b0  d019              BEQ      |L1.486|
0001b2  e023              B        |L1.508|
                  |L1.436|
0001b4  e05e              B        |L1.628|
                  |L1.438|
0001b6  f81ac008          LDRB     r12,[r10,r8]          ;70
0001ba  ea4c0c05          ORR      r12,r12,r5            ;70
0001be  f80ac008          STRB     r12,[r10,r8]          ;70
0001c2  f81ac00b          LDRB     r12,[r10,r11]         ;74
0001c6  ea4c0c01          ORR      r12,r12,r1            ;74
0001ca  e009              B        |L1.480|
                  |L1.460|
0001cc  f81ac008          LDRB     r12,[r10,r8]          ;71
0001d0  ea8c0c05          EOR      r12,r12,r5            ;71
0001d4  f80ac008          STRB     r12,[r10,r8]          ;71
0001d8  f81ac00b          LDRB     r12,[r10,r11]         ;75
0001dc  ea8c0c01          EOR      r12,r12,r1            ;75
                  |L1.480|
0001e0  f80ac00b          STRB     r12,[r10,r11]         ;75
0001e4  e00a              B        |L1.508|
                  |L1.486|
0001e6  f81ac008          LDRB     r12,[r10,r8]          ;72
0001ea  ea2c0c05          BIC      r12,r12,r5            ;72
0001ee  f80ac008          STRB     r12,[r10,r8]          ;72
0001f2  f81a600b          LDRB     r6,[r10,r11]          ;76
0001f6  438e              BICS     r6,r6,r1              ;76
0001f8  f80a600b          STRB     r6,[r10,r11]          ;76
                  |L1.508|
0001fc  1aa1              SUBS     r1,r4,r2              ;78
0001fe  2901              CMP      r1,#1                 ;78
000200  f77faf4b          BLE      |L1.154|
000204  1c51              ADDS     r1,r2,#1              ;80
000206  fa1ffc81          UXTH     r12,r1                ;80
00020a  e02d              B        |L1.616|
                  |L1.524|
00020c  b123              CBZ      r3,|L1.536|
00020e  2b01              CMP      r3,#1                 ;83
000210  d00d              BEQ      |L1.558|
000212  2b02              CMP      r3,#2                 ;84
000214  d019              BEQ      |L1.586|
000216  e023              B        |L1.608|
                  |L1.536|
000218  f1cc0103          RSB      r1,r12,#3             ;82
00021c  eb010541          ADD      r5,r1,r1,LSL #1       ;82
000220  ebc51181          RSB      r1,r5,r1,LSL #6       ;82
000224  eb000541          ADD      r5,r0,r1,LSL #1       ;82
000228  f04f36ff          MOV      r6,#0xffffffff        ;82
00022c  e00a              B        |L1.580|
                  |L1.558|
00022e  f1cc0103          RSB      r1,r12,#3             ;83
000232  eb010541          ADD      r5,r1,r1,LSL #1       ;83
000236  ebc51181          RSB      r1,r5,r1,LSL #6       ;83
00023a  eb000541          ADD      r5,r0,r1,LSL #1       ;83
00023e  f81a6005          LDRB     r6,[r10,r5]           ;83
000242  43f6              MVNS     r6,r6                 ;83
                  |L1.580|
000244  f80a6005          STRB     r6,[r10,r5]           ;83
000248  e00a              B        |L1.608|
                  |L1.586|
00024a  f1cc0503          RSB      r5,r12,#3             ;84
00024e  eb050645          ADD      r6,r5,r5,LSL #1       ;84
000252  ebc61585          RSB      r5,r6,r5,LSL #6       ;84
000256  eb000645          ADD      r6,r0,r5,LSL #1       ;84
00025a  2100              MOVS     r1,#0                 ;84
00025c  f80a1006          STRB     r1,[r10,r6]           ;84
                  |L1.608|
000260  f10c0c01          ADD      r12,r12,#1            ;80
000264  fa1ffc8c          UXTH     r12,r12               ;80
                  |L1.616|
000268  45a4              CMP      r12,r4                ;80
00026a  d3cf              BCC      |L1.524|
                  |L1.620|
00026c  f1be0f00          CMP      lr,#0                 ;90
000270  f6bfaf13          BGE      |L1.154|
                  |L1.628|
000274  42a2              CMP      r2,r4                 ;93
000276  d140              BNE      |L1.762|
000278  f1a90101          SUB      r1,r9,#1              ;95
00027c  e039              B        |L1.754|
                  |L1.638|
00027e  b123              CBZ      r3,|L1.650|
000280  2b01              CMP      r3,#1                 ;98
000282  d012              BEQ      |L1.682|
000284  2b02              CMP      r3,#2                 ;99
000286  d022              BEQ      |L1.718|
000288  e032              B        |L1.752|
                  |L1.650|
00028a  f1c20403          RSB      r4,r2,#3              ;97
00028e  eb040544          ADD      r5,r4,r4,LSL #1       ;97
000292  ebc51484          RSB      r4,r5,r4,LSL #6       ;97
000296  eb000c44          ADD      r12,r0,r4,LSL #1      ;97
00029a  f1c10607          RSB      r6,r1,#7              ;97
00029e  f81a400c          LDRB     r4,[r10,r12]          ;97
0002a2  2501              MOVS     r5,#1                 ;97
0002a4  40b5              LSLS     r5,r5,r6              ;97
0002a6  432c              ORRS     r4,r4,r5              ;97
0002a8  e00e              B        |L1.712|
                  |L1.682|
0002aa  f1c20403          RSB      r4,r2,#3              ;98
0002ae  eb040544          ADD      r5,r4,r4,LSL #1       ;98
0002b2  ebc51484          RSB      r4,r5,r4,LSL #6       ;98
0002b6  eb000c44          ADD      r12,r0,r4,LSL #1      ;98
0002ba  f1c10607          RSB      r6,r1,#7              ;98
0002be  f81a400c          LDRB     r4,[r10,r12]          ;98
0002c2  2501              MOVS     r5,#1                 ;98
0002c4  40b5              LSLS     r5,r5,r6              ;98
0002c6  406c              EORS     r4,r4,r5              ;98
                  |L1.712|
0002c8  f80a400c          STRB     r4,[r10,r12]          ;98
0002cc  e010              B        |L1.752|
                  |L1.718|
0002ce  f1c20403          RSB      r4,r2,#3              ;99
0002d2  eb040544          ADD      r5,r4,r4,LSL #1       ;99
0002d6  ebc51484          RSB      r4,r5,r4,LSL #6       ;99
0002da  eb000c44          ADD      r12,r0,r4,LSL #1      ;99
0002de  f1c10607          RSB      r6,r1,#7              ;99
0002e2  f81a500c          LDRB     r5,[r10,r12]          ;99
0002e6  2401              MOVS     r4,#1                 ;99
0002e8  40b4              LSLS     r4,r4,r6              ;99
0002ea  43a5              BICS     r5,r5,r4              ;99
0002ec  f80a500c          STRB     r5,[r10,r12]          ;99
                  |L1.752|
0002f0  1e49              SUBS     r1,r1,#1              ;95
                  |L1.754|
0002f2  b289              UXTH     r1,r1                 ;95
0002f4  42b9              CMP      r1,r7                 ;95
0002f6  d2c2              BCS      |L1.638|
                  |L1.760|
0002f8  e6ba              B        |L1.112|
                  |L1.762|
0002fa  b123              CBZ      r3,|L1.774|
0002fc  2b01              CMP      r3,#1                 ;105
0002fe  d026              BEQ      |L1.846|
000300  2b02              CMP      r3,#2                 ;106
000302  d043              BEQ      |L1.908|
000304  e062              B        |L1.972|
                  |L1.774|
000306  f1c20103          RSB      r1,r2,#3              ;104
00030a  eb010541          ADD      r5,r1,r1,LSL #1       ;104
00030e  ebc51181          RSB      r1,r5,r1,LSL #6       ;104
000312  eb000c41          ADD      r12,r0,r1,LSL #1      ;104
000316  f1c90608          RSB      r6,r9,#8              ;104
00031a  f81a500c          LDRB     r5,[r10,r12]          ;104
00031e  f04f09ff          MOV      r9,#0xff              ;104
000322  fa09f106          LSL      r1,r9,r6              ;104
000326  430d              ORRS     r5,r5,r1              ;104
000328  f80a500c          STRB     r5,[r10,r12]          ;104
00032c  f1c40103          RSB      r1,r4,#3              ;108
000330  eb010541          ADD      r5,r1,r1,LSL #1       ;108
000334  ebc51181          RSB      r1,r5,r1,LSL #6       ;108
000338  eb000141          ADD      r1,r0,r1,LSL #1       ;108
00033c  fa29f907          LSR      r9,r9,r7              ;108
000340  f81a5001          LDRB     r5,[r10,r1]           ;108
000344  ea450509          ORR      r5,r5,r9              ;108
000348  f80a5001          STRB     r5,[r10,r1]           ;108
00034c  e03e              B        |L1.972|
                  |L1.846|
00034e  f1c20103          RSB      r1,r2,#3              ;105
000352  eb010541          ADD      r5,r1,r1,LSL #1       ;105
000356  ebc51181          RSB      r1,r5,r1,LSL #6       ;105
00035a  eb000c41          ADD      r12,r0,r1,LSL #1      ;105
00035e  f1c90608          RSB      r6,r9,#8              ;105
000362  f81a500c          LDRB     r5,[r10,r12]          ;105
000366  21ff              MOVS     r1,#0xff              ;105
000368  fa01f606          LSL      r6,r1,r6              ;105
00036c  4075              EORS     r5,r5,r6              ;105
00036e  f80a500c          STRB     r5,[r10,r12]          ;105
000372  f1c40503          RSB      r5,r4,#3              ;109
000376  eb050645          ADD      r6,r5,r5,LSL #1       ;109
00037a  ebc61585          RSB      r5,r6,r5,LSL #6       ;109
00037e  eb000545          ADD      r5,r0,r5,LSL #1       ;109
000382  40f9              LSRS     r1,r1,r7              ;109
000384  f81a6005          LDRB     r6,[r10,r5]           ;109
000388  404e              EORS     r6,r6,r1              ;109
00038a  e01d              B        |L1.968|
                  |L1.908|
00038c  f1c20103          RSB      r1,r2,#3              ;106
000390  eb010541          ADD      r5,r1,r1,LSL #1       ;106
000394  ebc51181          RSB      r1,r5,r1,LSL #6       ;106
000398  eb000c41          ADD      r12,r0,r1,LSL #1      ;106
00039c  f1c90608          RSB      r6,r9,#8              ;106
0003a0  f81a500c          LDRB     r5,[r10,r12]          ;106
0003a4  21ff              MOVS     r1,#0xff              ;106
0003a6  fa01f606          LSL      r6,r1,r6              ;106
0003aa  43b5              BICS     r5,r5,r6              ;106
0003ac  f80a500c          STRB     r5,[r10,r12]          ;106
0003b0  f1c40503          RSB      r5,r4,#3              ;110
0003b4  eb050645          ADD      r6,r5,r5,LSL #1       ;110
0003b8  ebc61585          RSB      r5,r6,r5,LSL #6       ;110
0003bc  eb000545          ADD      r5,r0,r5,LSL #1       ;110
0003c0  40f9              LSRS     r1,r1,r7              ;110
0003c2  f81a6005          LDRB     r6,[r10,r5]           ;110
0003c6  438e              BICS     r6,r6,r1              ;110
                  |L1.968|
0003c8  f80a6005          STRB     r6,[r10,r5]           ;110
                  |L1.972|
0003cc  1b11              SUBS     r1,r2,r4              ;112
0003ce  2901              CMP      r1,#1                 ;112
0003d0  dd92              BLE      |L1.760|
0003d2  1e52              SUBS     r2,r2,#1              ;114
0003d4  b291              UXTH     r1,r2                 ;114
0003d6  e02b              B        |L1.1072|
                  |L1.984|
0003d8  b123              CBZ      r3,|L1.996|
0003da  2b01              CMP      r3,#1                 ;117
0003dc  d00d              BEQ      |L1.1018|
0003de  2b02              CMP      r3,#2                 ;118
0003e0  d019              BEQ      |L1.1046|
0003e2  e023              B        |L1.1068|
                  |L1.996|
0003e4  f1c10203          RSB      r2,r1,#3              ;116
0003e8  eb020542          ADD      r5,r2,r2,LSL #1       ;116
0003ec  ebc51282          RSB      r2,r5,r2,LSL #6       ;116
0003f0  eb000542          ADD      r5,r0,r2,LSL #1       ;116
0003f4  f04f36ff          MOV      r6,#0xffffffff        ;116
0003f8  e00a              B        |L1.1040|
                  |L1.1018|
0003fa  f1c10203          RSB      r2,r1,#3              ;117
0003fe  eb020542          ADD      r5,r2,r2,LSL #1       ;117
000402  ebc51282          RSB      r2,r5,r2,LSL #6       ;117
000406  eb000542          ADD      r5,r0,r2,LSL #1       ;117
00040a  f81a6005          LDRB     r6,[r10,r5]           ;117
00040e  43f6              MVNS     r6,r6                 ;117
                  |L1.1040|
000410  f80a6005          STRB     r6,[r10,r5]           ;117
000414  e00a              B        |L1.1068|
                  |L1.1046|
000416  f1c10503          RSB      r5,r1,#3              ;118
00041a  eb050645          ADD      r6,r5,r5,LSL #1       ;118
00041e  ebc61585          RSB      r5,r6,r5,LSL #6       ;118
000422  eb000645          ADD      r6,r0,r5,LSL #1       ;118
000426  2200              MOVS     r2,#0                 ;118
000428  f80a2006          STRB     r2,[r10,r6]           ;118
                  |L1.1068|
00042c  1e49              SUBS     r1,r1,#1              ;114
00042e  b289              UXTH     r1,r1                 ;114
                  |L1.1072|
000430  42a1              CMP      r1,r4                 ;114
000432  d8d1              BHI      |L1.984|
000434  e61c              B        |L1.112|
;;;126    //---------------------------------------------
                          ENDP

000436  0000              DCW      0x0000
                  |L1.1080|
                          DCD      lcd_bitmap

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  draw_rectangle PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d47f8          PUSH     {r3-r10,lr}
;;;8      {
000004  4604              MOV      r4,r0
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  e9dd0509          LDRD     r0,r5,[sp,#0x24]
00000a  4617              MOV      r7,r2
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000c  468a              MOV      r10,r1
00000e  4699              MOV      r9,r3
000010  19e6              ADDS     r6,r4,r7
000012  b948              CBNZ     r0,|L2.40|
000014  e00c              B        |L2.48|
                  |L2.22|
000016  464b              MOV      r3,r9
000018  2200              MOVS     r2,#0
00001a  4651              MOV      r1,r10
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
00001c  4620              MOV      r0,r4
00001e  9500              STR      r5,[sp,#0]
000020  f7fffffe          BL       draw
000024  1c64              ADDS     r4,r4,#1
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
000026  b224              SXTH     r4,r4
                  |L2.40|
000028  42a6              CMP      r6,r4
00002a  daf4              BGE      |L2.22|
                  |L2.44|
00002c  e8bd87f8          POP      {r3-r10,pc}           ;25
                  |L2.48|
000030  2200              MOVS     r2,#0                 ;23
000032  4620              MOV      r0,r4                 ;25
000034  9500              STR      r5,[sp,#0]            ;28
000036  f7fffffe          BL       draw
00003a  eb0a0009          ADD      r0,r10,r9
00003e  4680              MOV      r8,r0
000040  1e40              SUBS     r0,r0,#1
000042  b201              SXTH     r1,r0                 ;31
000044  2300              MOVS     r3,#0
000046  463a              MOV      r2,r7                 ;29
000048  4620              MOV      r0,r4                 ;29
00004a  9500              STR      r5,[sp,#0]
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004c  f7fffffe          BL       draw
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
000050  1e76              SUBS     r6,r6,#1
000052  f1c90000          RSB      r0,r9,#0
000056  b234              SXTH     r4,r6                 ;33
000058  b203              SXTH     r3,r0                 ;33
00005a  fa0ff188          SXTH     r1,r8                 ;33
00005e  2200              MOVS     r2,#0                 ;34
000060  4620              MOV      r0,r4                 ;34
000062  9500              STR      r5,[sp,#0]
000064  f7fffffe          BL       draw
000068  4278              RSBS     r0,r7,#0              ;31
00006a  b202              SXTH     r2,r0                 ;31
00006c  2300              MOVS     r3,#0                 ;31
00006e  4651              MOV      r1,r10                ;31
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
000070  4620              MOV      r0,r4
000072  9500              STR      r5,[sp,#0]
000074  f7fffffe          BL       draw
000078  e7d8              B        |L2.44|
;;;126    //---------------------------------------------
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  draw_ptr PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;8      {
000004  4681              MOV      r9,r0
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  460e              MOV      r6,r1
000008  461d              MOV      r5,r3
00000a  2000              MOVS     r0,#0
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000c  b122              CBZ      r2,|L3.24|
00000e  2a02              CMP      r2,#2
000010  d11a              BNE      |L3.72|
000012  2400              MOVS     r4,#0
000014  4680              MOV      r8,r0
000016  e02c              B        |L3.114|
                  |L3.24|
000018  2400              MOVS     r4,#0
00001a  4680              MOV      r8,r0
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
00001c  e012              B        |L3.68|
                  |L3.30|
00001e  1937              ADDS     r7,r6,r4
000020  1b62              SUBS     r2,r4,r5              ;25
000022  2300              MOVS     r3,#0                 ;25
000024  4639              MOV      r1,r7
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
000026  4648              MOV      r0,r9
000028  f8cd8000          STR      r8,[sp,#0]
00002c  f7fffffe          BL       draw
000030  1b2a              SUBS     r2,r5,r4              ;23
000032  2300              MOVS     r3,#0                 ;25
000034  4639              MOV      r1,r7                 ;28
000036  4648              MOV      r0,r9                 ;28
000038  f8cd8000          STR      r8,[sp,#0]            ;28
00003c  f7fffffe          BL       draw
000040  1c64              ADDS     r4,r4,#1
000042  b2e4              UXTB     r4,r4                 ;31
                  |L3.68|
000044  42ac              CMP      r4,r5
000046  d3ea              BCC      |L3.30|
                  |L3.72|
000048  e8bd83f8          POP      {r3-r9,pc}            ;29
                  |L3.76|
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004c  1b37              SUBS     r7,r6,r4
00004e  1b62              SUBS     r2,r4,r5
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
000050  2300              MOVS     r3,#0
000052  4639              MOV      r1,r7
000054  4648              MOV      r0,r9
000056  f8cd8000          STR      r8,[sp,#0]            ;33
00005a  f7fffffe          BL       draw
00005e  1b2a              SUBS     r2,r5,r4              ;34
000060  2300              MOVS     r3,#0                 ;34
000062  4639              MOV      r1,r7
000064  4648              MOV      r0,r9
000066  f8cd8000          STR      r8,[sp,#0]
00006a  f7fffffe          BL       draw
00006e  1c64              ADDS     r4,r4,#1              ;31
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
000070  b2e4              UXTB     r4,r4
                  |L3.114|
000072  42ac              CMP      r4,r5
000074  d3ea              BCC      |L3.76|
000076  e7e7              B        |L3.72|
;;;126    //---------------------------------------------
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  plot PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d47f8          PUSH     {r3-r10,lr}
;;;8      {
000004  f04f35ff          MOV      r5,#0xffffffff
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000008  f1c30320          RSB      r3,r3,#0x20
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000c  409d              LSLS     r5,r5,r3
00000e  ea050302          AND      r3,r5,r2
000012  fa23f201          LSR      r2,r3,r1
000016  9200              STR      r2,[sp,#0]
000018  f89d1002          LDRB     r1,[sp,#2]
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
00001c  f8df8068          LDR      r8,|L4.136|
000020  4689              MOV      r9,r1                 ;25
000022  f89d1003          LDRB     r1,[sp,#3]            ;25
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
000026  9c09              LDR      r4,[sp,#0x24]
000028  468a              MOV      r10,r1
00002a  eb080100          ADD      r1,r8,r0              ;25
00002e  f89d7000          LDRB     r7,[sp,#0]            ;23
000032  f89dc001          LDRB     r12,[sp,#1]           ;25
000036  f8182000          LDRB     r2,[r8,r0]            ;28
00003a  f891307a          LDRB     r3,[r1,#0x7a]
00003e  f89150f4          LDRB     r5,[r1,#0xf4]
000042  f891616e          LDRB     r6,[r1,#0x16e]        ;31
000046  b18c              CBZ      r4,|L4.108|
000048  407a              EORS     r2,r2,r7              ;29
00004a  f8082000          STRB     r2,[r8,r0]
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004e  ea83030c          EOR      r3,r3,r12
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
000052  f881307a          STRB     r3,[r1,#0x7a]
000056  ea850509          EOR      r5,r5,r9              ;33
00005a  f88150f4          STRB     r5,[r1,#0xf4]         ;33
00005e  ea86060a          EOR      r6,r6,r10             ;34
000062  bf00              NOP      
                  |L4.100|
000064  f881616e          STRB     r6,[r1,#0x16e]
000068  e8bd87f8          POP      {r3-r10,pc}           ;31
                  |L4.108|
00006c  433a              ORRS     r2,r2,r7              ;31
00006e  f8082000          STRB     r2,[r8,r0]            ;31
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
000072  ea43030c          ORR      r3,r3,r12
000076  f881307a          STRB     r3,[r1,#0x7a]         ;43
00007a  ea450509          ORR      r5,r5,r9              ;44
00007e  f88150f4          STRB     r5,[r1,#0xf4]         ;44
000082  ea46060a          ORR      r6,r6,r10             ;42
000086  e7ed              B        |L4.100|
;;;126    //---------------------------------------------
                          ENDP

                  |L4.136|
                          DCD      lcd_bitmap

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  graphic_print PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d4ffc          PUSH     {r2-r11,lr}
;;;8      {
000004  4607              MOV      r7,r0
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  a80c              ADD      r0,sp,#0x30
000008  468a              MOV      r10,r1
00000a  e8b00310          LDM      r0!,{r4,r8,r9}
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000e  4616              MOV      r6,r2
000010  469b              MOV      r11,r3
000012  2500              MOVS     r5,#0
000014  e01d              B        |L5.82|
000016  bf00              NOP      
                  |L5.24|
000018  fb058004          MLA      r0,r5,r4,r8
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
00001c  1e61              SUBS     r1,r4,#1
00001e  465b              MOV      r3,r11
000020  5c41              LDRB     r1,[r0,r1]            ;25
000022  f88d1007          STRB     r1,[sp,#7]            ;25
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
000026  1ea1              SUBS     r1,r4,#2
000028  5c41              LDRB     r1,[r0,r1]
00002a  f88d1006          STRB     r1,[sp,#6]            ;25
00002e  1ee1              SUBS     r1,r4,#3              ;23
000030  5c41              LDRB     r1,[r0,r1]            ;23
000032  f88d1005          STRB     r1,[sp,#5]            ;25
000036  1f21              SUBS     r1,r4,#4              ;28
000038  5c40              LDRB     r0,[r0,r1]            ;28
00003a  f88d0004          STRB     r0,[sp,#4]
00003e  1978              ADDS     r0,r7,r5
000040  b200              SXTH     r0,r0
000042  f8cd9000          STR      r9,[sp,#0]            ;31
000046  4651              MOV      r1,r10                ;29
000048  9a01              LDR      r2,[sp,#4]            ;29
00004a  f7fffffe          BL       plot
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004e  1c6d              ADDS     r5,r5,#1
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
000050  b22d              SXTH     r5,r5
                  |L5.82|
000052  42b5              CMP      r5,r6
000054  dbe0              BLT      |L5.24|
000056  e8bd8ffc          POP      {r2-r11,pc}           ;33
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
;;;126    //---------------------------------------------
                          ENDP


                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  graphic_print_text PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;8      {
000004  b096              SUB      sp,sp,#0x58
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  4681              MOV      r9,r0
000008  a824              ADD      r0,sp,#0x90
00000a  9d23              LDR      r5,[sp,#0x8c]
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000c  e8b00c10          LDM      r0!,{r4,r10,r11}
000010  2000              MOVS     r0,#0
000012  2620              MOVS     r6,#0x20
000014  f10d0840          ADD      r8,sp,#0x40
                  |L6.24|
000018  f8086000          STRB     r6,[r8,r0]
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
00001c  1c40              ADDS     r0,r0,#1
00001e  b200              SXTH     r0,r0
000020  280a              CMP      r0,#0xa               ;25
000022  dbf9              BLT      |L6.24|
000024  2000              MOVS     r0,#0
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
000026  e004              B        |L6.50|
                  |L6.40|
000028  5c11              LDRB     r1,[r2,r0]
00002a  f8081000          STRB     r1,[r8,r0]            ;25
00002e  1c40              ADDS     r0,r0,#1              ;23
000030  b200              SXTH     r0,r0                 ;23
                  |L6.50|
000032  4298              CMP      r0,r3                 ;25
000034  dbf8              BLT      |L6.40|
000036  272b              MOVS     r7,#0x2b              ;28
000038  2d00              CMP      r5,#0                 ;28
00003a  da02              BGE      |L6.66|
00003c  4268              RSBS     r0,r5,#0
00003e  b205              SXTH     r5,r0
000040  272d              MOVS     r7,#0x2d
                  |L6.66|
000042  2100              MOVS     r1,#0                 ;31
000044  f04f0c0a          MOV      r12,#0xa
000048  f10d004c          ADD.W    r0,sp,#0x4c           ;29
                  |L6.76|
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004c  fb95f2fc          SDIV     r2,r5,r12
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
000050  fb0c5512          MLS      r5,r12,r2,r5
000054  5445              STRB     r5,[r0,r1]
000056  1c49              ADDS     r1,r1,#1              ;33
000058  b249              SXTB     r1,r1                 ;33
00005a  b215              SXTH     r5,r2                 ;33
00005c  290a              CMP      r1,#0xa               ;34
00005e  dbf5              BLT      |L6.76|
000060  2501              MOVS     r5,#1                 ;34
000062  2100              MOVS     r1,#0
000064  2209              MOVS     r2,#9
000066  e000              B        |L6.106|
                  |L6.104|
000068  b145              CBZ      r5,|L6.124|
                  |L6.106|
00006a  f810c002          LDRB     r12,[r0,r2]           ;31
00006e  f1bc0f00          CMP      r12,#0                ;31
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
000072  d103              BNE      |L6.124|
000074  42a2              CMP      r2,r4                 ;42
000076  dd01              BLE      |L6.124|
000078  5486              STRB     r6,[r0,r2]            ;43
00007a  e005              B        |L6.136|
                  |L6.124|
00007c  5c85              LDRB     r5,[r0,r2]            ;44
00007e  3530              ADDS     r5,r5,#0x30           ;44
000080  5485              STRB     r5,[r0,r2]            ;42
000082  2500              MOVS     r5,#0                 ;42
000084  1c49              ADDS     r1,r1,#1              ;42
000086  b2c9              UXTB     r1,r1                 ;43
                  |L6.136|
000088  1e52              SUBS     r2,r2,#1              ;43
00008a  b252              SXTB     r2,r2                 ;43
00008c  2a00              CMP      r2,#0                 ;44
00008e  daeb              BGE      |L6.104|
000090  2f2d              CMP      r7,#0x2d              ;44
000092  d102              BNE      |L6.154|
000094  5447              STRB     r7,[r0,r1]            ;40
000096  1c49              ADDS     r1,r1,#1              ;40
000098  b2c9              UXTB     r1,r1                 ;40
                  |L6.154|
00009a  b16c              CBZ      r4,|L6.184|
00009c  b24a              SXTB     r2,r1                 ;48
00009e  e005              B        |L6.172|
                  |L6.160|
0000a0  1885              ADDS     r5,r0,r2              ;48
0000a2  f8155c01          LDRB     r5,[r5,#-1]           ;51
0000a6  5485              STRB     r5,[r0,r2]            ;52
0000a8  1e52              SUBS     r2,r2,#1              ;52
0000aa  b252              SXTB     r2,r2                 ;52
                  |L6.172|
0000ac  42a2              CMP      r2,r4                 ;52
0000ae  dcf7              BGT      |L6.160|
0000b0  222e              MOVS     r2,#0x2e              ;53
0000b2  1c49              ADDS     r1,r1,#1              ;53
0000b4  5502              STRB     r2,[r0,r4]            ;54
0000b6  b2c9              UXTB     r1,r1                 ;54
                  |L6.184|
0000b8  2200              MOVS     r2,#0                 ;52
0000ba  e007              B        |L6.204|
                  |L6.188|
0000bc  ebaa0402          SUB      r4,r10,r2             ;54
0000c0  5c85              LDRB     r5,[r0,r2]            ;54
0000c2  4444              ADD      r4,r4,r8              ;56
0000c4  1c52              ADDS     r2,r2,#1              ;59
0000c6  f8045c01          STRB     r5,[r4,#-1]           ;59
0000ca  b252              SXTB     r2,r2                 ;61
                  |L6.204|
0000cc  428a              CMP      r2,r1                 ;63
0000ce  dbf5              BLT      |L6.188|
0000d0  2000              MOVS     r0,#0                 ;64
0000d2  ac01              ADD      r4,sp,#4              ;65
0000d4  e01b              B        |L6.270|
0000d6  bf00              NOP                            ;65
                  |L6.216|
0000d8  f8181000          LDRB     r1,[r8,r0]            ;63
0000dc  4e19              LDR      r6,|L6.324|
0000de  eb010241          ADD      r2,r1,r1,LSL #1       ;63
0000e2  eb000140          ADD      r1,r0,r0,LSL #1       ;63
0000e6  f8165012          LDRB     r5,[r6,r2,LSL #1]     ;63
0000ea  f8045011          STRB     r5,[r4,r1,LSL #1]     ;63
0000ee  eb060242          ADD      r2,r6,r2,LSL #1       ;63
0000f2  eb040141          ADD      r1,r4,r1,LSL #1       ;63
0000f6  7855              LDRB     r5,[r2,#1]            ;63
0000f8  704d              STRB     r5,[r1,#1]            ;63
0000fa  7895              LDRB     r5,[r2,#2]            ;64
0000fc  708d              STRB     r5,[r1,#2]            ;64
0000fe  78d5              LDRB     r5,[r2,#3]            ;64
000100  70cd              STRB     r5,[r1,#3]            ;64
000102  7915              LDRB     r5,[r2,#4]            ;64
000104  710d              STRB     r5,[r1,#4]            ;64
000106  7952              LDRB     r2,[r2,#5]            ;64
000108  1c40              ADDS     r0,r0,#1              ;64
00010a  714a              STRB     r2,[r1,#5]            ;64
00010c  b200              SXTH     r0,r0                 ;64
                  |L6.270|
00010e  4298              CMP      r0,r3                 ;64
000110  dbe2              BLT      |L6.216|
000112  2500              MOVS     r5,#0                 ;64
000114  eb030643          ADD      r6,r3,r3,LSL #1       ;64
000118  e00e              B        |L6.312|
                  |L6.282|
00011a  5d60              LDRB     r0,[r4,r5]            ;64
00011c  f88d004f          STRB     r0,[sp,#0x4f]         ;64
000120  eb090005          ADD      r0,r9,r5              ;65
000124  b200              SXTH     r0,r0                 ;65
000126  2308              MOVS     r3,#8                 ;65
000128  f8cdb000          STR      r11,[sp,#0]           ;65
00012c  9a13              LDR      r2,[sp,#0x4c]         ;65
00012e  9917              LDR      r1,[sp,#0x5c]         ;65
000130  f7fffffe          BL       plot
000134  1c6d              ADDS     r5,r5,#1              ;65
000136  b22d              SXTH     r5,r5                 ;65
                  |L6.312|
000138  ebb50f46          CMP      r5,r6,LSL #1          ;65
00013c  dbed              BLT      |L6.282|
00013e  b01a              ADD      sp,sp,#0x68           ;65
000140  e8bd8ff0          POP      {r4-r11,pc}           ;65
;;;126    //---------------------------------------------
                          ENDP

                  |L6.324|
                          DCD      caracter

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  graphic_print_text_text PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;8      {
000004  b094              SUB      sp,sp,#0x50
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  4680              MOV      r8,r0
000008  468a              MOV      r10,r1
00000a  2000              MOVS     r0,#0
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000c  f8dd907c          LDR      r9,[sp,#0x7c]
000010  2420              MOVS     r4,#0x20
000012  a910              ADD      r1,sp,#0x40
                  |L7.20|
000014  540c              STRB     r4,[r1,r0]
000016  1c40              ADDS     r0,r0,#1
000018  b200              SXTH     r0,r0
00001a  280a              CMP      r0,#0xa
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
00001c  dbfa              BLT      |L7.20|
00001e  2000              MOVS     r0,#0
000020  e003              B        |L7.42|
                  |L7.34|
000022  5c14              LDRB     r4,[r2,r0]            ;25
000024  540c              STRB     r4,[r1,r0]
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
000026  1c40              ADDS     r0,r0,#1
000028  b200              SXTH     r0,r0
                  |L7.42|
00002a  4298              CMP      r0,r3                 ;25
00002c  dbf9              BLT      |L7.34|
00002e  2000              MOVS     r0,#0                 ;23
000030  ac01              ADD      r4,sp,#4              ;23
000032  e019              B        |L7.104|
                  |L7.52|
000034  5c0a              LDRB     r2,[r1,r0]            ;28
000036  4f1a              LDR      r7,|L7.160|
000038  eb020242          ADD      r2,r2,r2,LSL #1       ;28
00003c  eb000540          ADD      r5,r0,r0,LSL #1
000040  f8176012          LDRB     r6,[r7,r2,LSL #1]
000044  f8046015          STRB     r6,[r4,r5,LSL #1]
000048  eb070242          ADD      r2,r7,r2,LSL #1       ;29
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004c  eb040545          ADD      r5,r4,r5,LSL #1
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
000050  7856              LDRB     r6,[r2,#1]
000052  706e              STRB     r6,[r5,#1]
000054  7896              LDRB     r6,[r2,#2]
000056  70ae              STRB     r6,[r5,#2]            ;33
000058  78d6              LDRB     r6,[r2,#3]            ;33
00005a  70ee              STRB     r6,[r5,#3]            ;33
00005c  7916              LDRB     r6,[r2,#4]            ;34
00005e  712e              STRB     r6,[r5,#4]            ;34
000060  7952              LDRB     r2,[r2,#5]            ;34
000062  1c40              ADDS     r0,r0,#1
000064  716a              STRB     r2,[r5,#5]
000066  b200              SXTH     r0,r0
                  |L7.104|
000068  4298              CMP      r0,r3                 ;31
00006a  dbe3              BLT      |L7.52|
00006c  2500              MOVS     r5,#0                 ;31
00006e  eb030643          ADD      r6,r3,r3,LSL #1       ;31
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
000072  e00e              B        |L7.146|
                  |L7.116|
000074  5d60              LDRB     r0,[r4,r5]            ;42
000076  f88d004f          STRB     r0,[sp,#0x4f]         ;43
00007a  eb080005          ADD      r0,r8,r5              ;44
00007e  b200              SXTH     r0,r0                 ;44
000080  2308              MOVS     r3,#8                 ;42
000082  f8cd9000          STR      r9,[sp,#0]            ;42
000086  4651              MOV      r1,r10                ;43
000088  9a13              LDR      r2,[sp,#0x4c]         ;43
00008a  f7fffffe          BL       plot
00008e  1c6d              ADDS     r5,r5,#1              ;44
000090  b22d              SXTH     r5,r5                 ;44
                  |L7.146|
000092  ebb50f46          CMP      r5,r6,LSL #1          ;40
000096  dbed              BLT      |L7.116|
000098  b014              ADD      sp,sp,#0x50           ;40
00009a  e8bd87f0          POP      {r4-r10,pc}
;;;126    //---------------------------------------------
                          ENDP

00009e  0000              DCW      0x0000
                  |L7.160|
                          DCD      caracter
