; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\emac_lpc17xx.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\emac_lpc17xx.d --feedback=.\EXE\UKU2071x_GALV_IBv2_WG12232L3.fed --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 -DWG12232L3 --omf_browse=.\EXE\emac_lpc17xx.crf C:\Keil\ARM\Boards\Keil\MCB1700\RL\TCPnet\Library\EMAC_LPC17xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  output_MDIO PROC
;;;348    
;;;349    static void output_MDIO (U32 val, U32 n) {
000000  f1c10220          RSB      r2,r1,#0x20
;;;350      /* Output a value to the MII PHY management interface. */
;;;351    
;;;352      for (val <<= (32 - n); n; val <<= 1, n--) {
000004  4090              LSLS     r0,r0,r2
000006  b510              PUSH     {r4,lr}               ;349
;;;353        if (val & 0x80000000) {
;;;354          LPC_GPIO2->FIOSET = MDIO;
000008  4afc              LDR      r2,|L1.1020|
00000a  f44f7400          MOV      r4,#0x200
;;;355        }
;;;356        else {
;;;357          LPC_GPIO2->FIOCLR = MDIO;
;;;358        }
;;;359        delay ();
;;;360        LPC_GPIO2->FIOSET = MDC;
00000e  1553              ASRS     r3,r2,#21
000010  e00e              B        |L1.48|
                  |L1.18|
000012  2800              CMP      r0,#0                 ;353
000014  da01              BGE      |L1.26|
000016  6594              STR      r4,[r2,#0x58]         ;354
000018  e000              B        |L1.28|
                  |L1.26|
00001a  65d4              STR      r4,[r2,#0x5c]         ;357
                  |L1.28|
00001c  bf00              NOP                            ;359
00001e  bf00              NOP                            ;359
000020  bf00              NOP                            ;359
000022  6593              STR      r3,[r2,#0x58]
;;;361        delay ();
000024  bf00              NOP      
000026  bf00              NOP      
000028  bf00              NOP      
;;;362        LPC_GPIO2->FIOCLR = MDC;
00002a  65d3              STR      r3,[r2,#0x5c]
00002c  0040              LSLS     r0,r0,#1              ;352
00002e  1e49              SUBS     r1,r1,#1              ;352
                  |L1.48|
000030  2900              CMP      r1,#0                 ;352
000032  d1ee              BNE      |L1.18|
;;;363      }
;;;364    }
000034  bd10              POP      {r4,pc}
;;;365    
                          ENDP

                  read_PHY PROC
;;;445    
;;;446    static U16 read_PHY (U32 PhyReg) {
000036  b570              PUSH     {r4-r6,lr}
000038  4605              MOV      r5,r0
;;;447      /* Read a PHY register 'PhyReg'. */
;;;448      U32 tout, val;
;;;449    
;;;450      if (dev_175x == __TRUE) {
00003a  48f1              LDR      r0,|L1.1024|
00003c  7800              LDRB     r0,[r0,#0]  ; dev_175x
00003e  2801              CMP      r0,#1
000040  d013              BEQ      |L1.106|
;;;451        /* Software MII Management for LPC175x. */
;;;452        /* Remapped MDC on P2.8 and MDIO on P2.9 does not work. */
;;;453        LPC_GPIO2->FIODIR |= MDIO;
;;;454    
;;;455        /* 32 consecutive ones on MDO to establish sync */
;;;456        output_MDIO (0xFFFFFFFF, 32);
;;;457    
;;;458        /* start code (01), read command (10) */
;;;459        output_MDIO (0x06, 4);
;;;460    
;;;461        /* write PHY address */
;;;462        output_MDIO (DP83848C_DEF_ADR >> 8, 5);
;;;463    
;;;464        /* write the PHY register to write */
;;;465        output_MDIO (PhyReg, 5);
;;;466    
;;;467        /* turnaround MDO is tristated */
;;;468        turnaround_MDIO ();
;;;469    
;;;470        /* read the data value */
;;;471        val = input_MDIO ();
;;;472    
;;;473        /* turnaround MDIO is tristated */
;;;474        turnaround_MDIO ();
;;;475      }
;;;476      else {
;;;477        LPC_EMAC->MADR = DP83848C_DEF_ADR | PhyReg;
000042  f04f40a0          MOV      r0,#0x50000000
000046  f4457180          ORR      r1,r5,#0x100
00004a  6281              STR      r1,[r0,#0x28]
;;;478        LPC_EMAC->MCMD = MCMD_READ;
00004c  2101              MOVS     r1,#1
00004e  6241              STR      r1,[r0,#0x24]
;;;479    
;;;480        /* Wait until operation completed */
;;;481        for (tout = 0; tout < MII_RD_TOUT; tout++) {
000050  2100              MOVS     r1,#0
000052  1302              ASRS     r2,r0,#12
                  |L1.84|
;;;482          if ((LPC_EMAC->MIND & MIND_BUSY) == 0) {
000054  6b43              LDR      r3,[r0,#0x34]
000056  07db              LSLS     r3,r3,#31
000058  d002              BEQ      |L1.96|
00005a  1c49              ADDS     r1,r1,#1              ;481
00005c  4291              CMP      r1,r2                 ;481
00005e  d3f9              BCC      |L1.84|
                  |L1.96|
;;;483            break;
;;;484          }
;;;485        }
;;;486        LPC_EMAC->MCMD = 0;
000060  2100              MOVS     r1,#0
000062  6241              STR      r1,[r0,#0x24]
;;;487        val = LPC_EMAC->MRDD;
000064  6b05              LDR      r5,[r0,#0x30]
                  |L1.102|
;;;488      }
;;;489      return (val);
000066  b2a8              UXTH     r0,r5
;;;490    }
000068  bd70              POP      {r4-r6,pc}
                  |L1.106|
00006a  4ce4              LDR      r4,|L1.1020|
00006c  6c20              LDR      r0,[r4,#0x40]         ;453
00006e  f4407000          ORR      r0,r0,#0x200          ;453
000072  6420              STR      r0,[r4,#0x40]         ;453
000074  2120              MOVS     r1,#0x20              ;456
000076  f04f30ff          MOV      r0,#0xffffffff        ;456
00007a  f7fffffe          BL       output_MDIO
00007e  2104              MOVS     r1,#4                 ;459
000080  2006              MOVS     r0,#6                 ;459
000082  f7fffffe          BL       output_MDIO
000086  2105              MOVS     r1,#5                 ;462
000088  2001              MOVS     r0,#1                 ;462
00008a  f7fffffe          BL       output_MDIO
00008e  2105              MOVS     r1,#5                 ;465
000090  4628              MOV      r0,r5                 ;465
000092  f7fffffe          BL       output_MDIO
000096  f7fffffe          BL       turnaround_MDIO
00009a  f04f0500          MOV      r5,#0                 ;468
00009e  4628              MOV      r0,r5                 ;468
0000a0  f44f7180          MOV      r1,#0x100             ;468
                  |L1.164|
0000a4  ea4f0545          LSL      r5,r5,#1              ;468
0000a8  65a1              STR      r1,[r4,#0x58]         ;468
0000aa  bf00              NOP                            ;468
0000ac  bf00              NOP                            ;468
0000ae  bf00              NOP                            ;468
0000b0  65e1              STR      r1,[r4,#0x5c]         ;468
0000b2  6d62              LDR      r2,[r4,#0x54]         ;468
0000b4  0592              LSLS     r2,r2,#22             ;468
0000b6  d501              BPL      |L1.188|
0000b8  f0450501          ORR      r5,r5,#1              ;468
                  |L1.188|
0000bc  1c40              ADDS     r0,r0,#1              ;468
0000be  2810              CMP      r0,#0x10              ;468
0000c0  d3f0              BCC      |L1.164|
0000c2  f7fffffe          BL       turnaround_MDIO
0000c6  e7ce              B        |L1.102|
;;;491    
                          ENDP

                  write_PHY PROC
;;;398    
;;;399    static void write_PHY (U32 PhyReg, U16 Value) {
0000c8  b570              PUSH     {r4-r6,lr}
0000ca  4605              MOV      r5,r0
;;;400      /* Write a data 'Value' to PHY register 'PhyReg'. */
;;;401      U32 tout;
;;;402    
;;;403      if (dev_175x == __TRUE) {
0000cc  48cc              LDR      r0,|L1.1024|
0000ce  460c              MOV      r4,r1                 ;399
0000d0  7800              LDRB     r0,[r0,#0]  ; dev_175x
0000d2  2801              CMP      r0,#1
0000d4  d00e              BEQ      |L1.244|
;;;404        /* Software MII Management for LPC175x. */
;;;405        /* Remapped MDC on P2.8 and MDIO on P2.9 do not work. */
;;;406        LPC_GPIO2->FIODIR |= MDIO;
;;;407    
;;;408        /* 32 consecutive ones on MDO to establish sync */
;;;409        output_MDIO (0xFFFFFFFF, 32);
;;;410    
;;;411        /* start code (01), write command (01) */
;;;412        output_MDIO (0x05, 4);
;;;413    
;;;414        /* write PHY address */
;;;415        output_MDIO (DP83848C_DEF_ADR >> 8, 5);
;;;416    
;;;417        /* write the PHY register to write */
;;;418        output_MDIO (PhyReg, 5);
;;;419    
;;;420        /* turnaround MDIO (1,0)*/
;;;421        output_MDIO (0x02, 2);
;;;422    
;;;423        /* write the data value */
;;;424        output_MDIO (Value, 16);
;;;425    
;;;426        /* turnaround MDO is tristated */
;;;427        turnaround_MDIO ();
;;;428      }
;;;429      else {
;;;430        /* Hardware MII Management for LPC176x devices. */
;;;431        LPC_EMAC->MADR = DP83848C_DEF_ADR | PhyReg;
0000d6  f04f42a0          MOV      r2,#0x50000000
0000da  f4457080          ORR      r0,r5,#0x100
0000de  6290              STR      r0,[r2,#0x28]
;;;432        LPC_EMAC->MWTD = Value;
0000e0  62d4              STR      r4,[r2,#0x2c]
;;;433    
;;;434        /* Wait utill operation completed */
;;;435        for (tout = 0; tout < MII_WR_TOUT; tout++) {
0000e2  2000              MOVS     r0,#0
0000e4  1311              ASRS     r1,r2,#12
                  |L1.230|
;;;436          if ((LPC_EMAC->MIND & MIND_BUSY) == 0) {
0000e6  6b53              LDR      r3,[r2,#0x34]
0000e8  07db              LSLS     r3,r3,#31
0000ea  d002              BEQ      |L1.242|
0000ec  1c40              ADDS     r0,r0,#1              ;435
0000ee  4288              CMP      r0,r1                 ;435
0000f0  d3f9              BCC      |L1.230|
                  |L1.242|
;;;437            break;
;;;438          }
;;;439        }
;;;440      }
;;;441    }
0000f2  bd70              POP      {r4-r6,pc}
                  |L1.244|
0000f4  48c1              LDR      r0,|L1.1020|
0000f6  6c01              LDR      r1,[r0,#0x40]         ;406
0000f8  f4417100          ORR      r1,r1,#0x200          ;406
0000fc  6401              STR      r1,[r0,#0x40]         ;406
0000fe  2120              MOVS     r1,#0x20              ;409
000100  f04f30ff          MOV      r0,#0xffffffff        ;409
000104  f7fffffe          BL       output_MDIO
000108  2104              MOVS     r1,#4                 ;412
00010a  2005              MOVS     r0,#5                 ;412
00010c  f7fffffe          BL       output_MDIO
000110  2105              MOVS     r1,#5                 ;415
000112  2001              MOVS     r0,#1                 ;415
000114  f7fffffe          BL       output_MDIO
000118  2105              MOVS     r1,#5                 ;418
00011a  4628              MOV      r0,r5                 ;418
00011c  f7fffffe          BL       output_MDIO
000120  2102              MOVS     r1,#2                 ;421
000122  4608              MOV      r0,r1                 ;421
000124  f7fffffe          BL       output_MDIO
000128  2110              MOVS     r1,#0x10              ;424
00012a  4620              MOV      r0,r4                 ;424
00012c  f7fffffe          BL       output_MDIO
000130  e8bd4070          POP      {r4-r6,lr}            ;427
000134  f7ffbffe          B.W      turnaround_MDIO
;;;442    
                          ENDP

                  init_ethernet PROC
;;;66     
;;;67     void init_ethernet (void) {
000138  e92d47fc          PUSH     {r2-r10,lr}
;;;68       /* Initialize the EMAC ethernet controller. */
;;;69       U32 regv,tout,id1,id2;
;;;70       U32 pb[2];
;;;71     
;;;72       dev_175x = __FALSE;
00013c  4cb0              LDR      r4,|L1.1024|
00013e  2500              MOVS     r5,#0
;;;73       /* Read device ID with IAP*/
;;;74       pb[0] = 54;
000140  2036              MOVS     r0,#0x36
000142  7025              STRB     r5,[r4,#0]            ;72
;;;75       iap_entry (&pb[0], &pb[0]);
000144  9000              STR      r0,[sp,#0]
000146  4669              MOV      r1,sp
000148  6862              LDR      r2,[r4,#4]  ; iap_entry
00014a  4608              MOV      r0,r1
00014c  4790              BLX      r2
;;;76       if ((pb[1] >> 24) == 0x25) {
00014e  9801              LDR      r0,[sp,#4]
000150  2125              MOVS     r1,#0x25
000152  ebb16f10          CMP      r1,r0,LSR #24
000156  d101              BNE      |L1.348|
;;;77         /* Use software RMII management routines. */
;;;78         dev_175x = __TRUE;
000158  2001              MOVS     r0,#1
00015a  7020              STRB     r0,[r4,#0]
                  |L1.348|
00015c  48a9              LDR      r0,|L1.1028|
;;;79       }
;;;80     
;;;81       /* Power Up the EMAC controller. */
;;;82       LPC_SC->PCONP |= 0x40000000;
00015e  6801              LDR      r1,[r0,#0]
000160  f0414180          ORR      r1,r1,#0x40000000
000164  6001              STR      r1,[r0,#0]
;;;83     
;;;84       /* Enable P1 Ethernet Pins. */
;;;85       LPC_PINCON->PINSEL2 = 0x50150105;
000166  48a9              LDR      r0,|L1.1036|
000168  49a7              LDR      r1,|L1.1032|
00016a  6081              STR      r1,[r0,#8]
;;;86       if (dev_175x == __FALSE) {
00016c  7821              LDRB     r1,[r4,#0]  ; dev_175x
00016e  2900              CMP      r1,#0
000170  d060              BEQ      |L1.564|
;;;87         /* LPC176x devices, no MDIO, MDC remap. */
;;;88         LPC_PINCON->PINSEL3 = (LPC_PINCON->PINSEL3 & ~0x0000000F) | 0x00000005;
;;;89       }
;;;90       else {
;;;91         /* LPC175x devices, use software MII management. */  
;;;92         LPC_PINCON->PINSEL4 &= ~0x000F0000;
000172  6901              LDR      r1,[r0,#0x10]
000174  f4212170          BIC      r1,r1,#0xf0000
000178  6101              STR      r1,[r0,#0x10]
;;;93         LPC_GPIO2->FIODIR |= MDC;
00017a  48a0              LDR      r0,|L1.1020|
00017c  6c01              LDR      r1,[r0,#0x40]
00017e  f4417180          ORR      r1,r1,#0x100
000182  6401              STR      r1,[r0,#0x40]
                  |L1.388|
;;;94       }
;;;95     
;;;96       /* Reset all EMAC internal modules. */
;;;97       LPC_EMAC->MAC1    = MAC1_RES_TX | MAC1_RES_MCS_TX | MAC1_RES_RX | 
000184  f04f44a0          MOV      r4,#0x50000000
000188  f44f404f          MOV      r0,#0xcf00
00018c  6020              STR      r0,[r4,#0]
;;;98                           MAC1_RES_MCS_RX | MAC1_SIM_RES | MAC1_SOFT_RES;
;;;99       LPC_EMAC->Command = CR_REG_RES | CR_TX_RES | CR_RX_RES | CR_PASS_RUNT_FRM;
00018e  2078              MOVS     r0,#0x78
000190  f8c40100          STR      r0,[r4,#0x100]
;;;100    
;;;101      /* A short delay after reset. */
;;;102      for (tout = 100; tout; tout--);
000194  2064              MOVS     r0,#0x64
                  |L1.406|
000196  1e40              SUBS     r0,r0,#1
000198  d1fd              BNE      |L1.406|
;;;103    
;;;104      /* Initialize MAC control registers. */
;;;105      LPC_EMAC->MAC1 = MAC1_PASS_ALL;
00019a  f04f0802          MOV      r8,#2
00019e  f8c48000          STR      r8,[r4,#0]
;;;106      LPC_EMAC->MAC2 = MAC2_CRC_EN | MAC2_PAD_EN;
0001a2  2030              MOVS     r0,#0x30
0001a4  6060              STR      r0,[r4,#4]
;;;107      LPC_EMAC->MAXF = ETH_MAX_FLEN;
0001a6  0140              LSLS     r0,r0,#5
0001a8  6160              STR      r0,[r4,#0x14]
;;;108      LPC_EMAC->CLRT = CLRT_DEF;
0001aa  f243700f          MOV      r0,#0x370f
0001ae  6120              STR      r0,[r4,#0x10]
;;;109      LPC_EMAC->IPGR = IPGR_DEF;
0001b0  2712              MOVS     r7,#0x12
0001b2  60e7              STR      r7,[r4,#0xc]
;;;110    
;;;111      /* Enable Reduced MII interface. */
;;;112      LPC_EMAC->Command = CR_RMII | CR_PASS_RUNT_FRM;
0001b4  0178              LSLS     r0,r7,#5
0001b6  f8c40100          STR      r0,[r4,#0x100]
;;;113    
;;;114      /* Reset Reduced MII Logic. */
;;;115      LPC_EMAC->SUPP = SUPP_RES_RMII;
0001ba  f44f6000          MOV      r0,#0x800
0001be  61a0              STR      r0,[r4,#0x18]
;;;116      for (tout = 100; tout; tout--);
0001c0  2664              MOVS     r6,#0x64
                  |L1.450|
0001c2  1e76              SUBS     r6,r6,#1
0001c4  d1fd              BNE      |L1.450|
;;;117      LPC_EMAC->SUPP = 0;
0001c6  61a5              STR      r5,[r4,#0x18]
;;;118    
;;;119      /* Put the DP83848C in reset mode */
;;;120      write_PHY (PHY_REG_BMCR, 0x8000);
0001c8  f44f4100          MOV      r1,#0x8000
0001cc  2000              MOVS     r0,#0
0001ce  f7fffffe          BL       write_PHY
;;;121    
;;;122      /* Wait for hardware reset to end. */
;;;123      for (tout = 0; tout < 0x100000; tout++) {
0001d2  f44f1980          MOV      r9,#0x100000
                  |L1.470|
;;;124        regv = read_PHY (PHY_REG_BMCR);
0001d6  2000              MOVS     r0,#0
0001d8  f7fffffe          BL       read_PHY
;;;125        if (!(regv & 0x8800)) {
0001dc  f4104f08          TST      r0,#0x8800
0001e0  d002              BEQ      |L1.488|
0001e2  1c76              ADDS     r6,r6,#1              ;123
0001e4  454e              CMP      r6,r9                 ;123
0001e6  d3f6              BCC      |L1.470|
                  |L1.488|
;;;126          /* Reset complete, device not Power Down. */
;;;127          break;
;;;128        }
;;;129      }
;;;130    
;;;131      /* Check if this is a DP83848C PHY. */
;;;132      id1 = read_PHY (PHY_REG_IDR1);
0001e8  2002              MOVS     r0,#2
0001ea  f7fffffe          BL       read_PHY
0001ee  4606              MOV      r6,r0
;;;133      id2 = read_PHY (PHY_REG_IDR2);
0001f0  2003              MOVS     r0,#3
0001f2  f7fffffe          BL       read_PHY
;;;134    
;;;135      if (((id1 << 16) | (id2 & 0xFFF0)) == DP83848C_ID) {
0001f6  f64f71f0          MOV      r1,#0xfff0
0001fa  4008              ANDS     r0,r0,r1
0001fc  4984              LDR      r1,|L1.1040|
0001fe  ea404006          ORR      r0,r0,r6,LSL #16
000202  4288              CMP      r0,r1
000204  d10d              BNE      |L1.546|
;;;136        /* Configure the PHY device */
;;;137    #if defined (_10MBIT_)
;;;138        /* Connect at 10MBit */
;;;139        write_PHY (PHY_REG_BMCR, PHY_FULLD_10M);
;;;140    #elif defined (_100MBIT_)
;;;141        /* Connect at 100MBit */
;;;142        write_PHY (PHY_REG_BMCR, PHY_FULLD_100M);
;;;143    #else
;;;144        /* Use autonegotiation about the link speed. */
;;;145        write_PHY (PHY_REG_BMCR, PHY_AUTO_NEG);
000206  f44f5140          MOV      r1,#0x3000
00020a  2000              MOVS     r0,#0
00020c  f7fffffe          BL       write_PHY
;;;146        /* Wait to complete Auto_Negotiation. */
;;;147        for (tout = 0; tout < 0x100000; tout++) {
000210  2600              MOVS     r6,#0
                  |L1.530|
;;;148          regv = read_PHY (PHY_REG_BMSR);
000212  2001              MOVS     r0,#1
000214  f7fffffe          BL       read_PHY
;;;149          if (regv & 0x0020) {
000218  0680              LSLS     r0,r0,#26
00021a  d402              BMI      |L1.546|
00021c  1c76              ADDS     r6,r6,#1              ;147
00021e  454e              CMP      r6,r9                 ;147
000220  d3f7              BCC      |L1.530|
                  |L1.546|
;;;150            /* Autonegotiation Complete. */
;;;151            break;
;;;152          }
;;;153        }
;;;154    #endif
;;;155      }
;;;156    
;;;157      /* Check the link status. */
;;;158      for (tout = 0; tout < 0x10000; tout++) {
000222  2600              MOVS     r6,#0
000224  f44f3980          MOV      r9,#0x10000
                  |L1.552|
;;;159        regv = read_PHY (PHY_REG_STS);
000228  2010              MOVS     r0,#0x10
00022a  f7fffffe          BL       read_PHY
;;;160        if (regv & 0x0001) {
00022e  07c1              LSLS     r1,r0,#31
000230  d109              BNE      |L1.582|
000232  e005              B        |L1.576|
                  |L1.564|
000234  68c1              LDR      r1,[r0,#0xc]          ;88
000236  f021010f          BIC      r1,r1,#0xf            ;88
00023a  1d49              ADDS     r1,r1,#5              ;88
00023c  60c1              STR      r1,[r0,#0xc]          ;88
00023e  e7a1              B        |L1.388|
                  |L1.576|
000240  1c76              ADDS     r6,r6,#1              ;158
000242  454e              CMP      r6,r9                 ;158
000244  d3f0              BCC      |L1.552|
                  |L1.582|
;;;161          /* Link is on. */
;;;162          break;
;;;163        }
;;;164      }
;;;165    
;;;166      /* Configure Full/Half Duplex mode. */
;;;167      if (regv & 0x0004) {
000246  0741              LSLS     r1,r0,#29
000248  d50c              BPL      |L1.612|
;;;168        /* Full duplex is enabled. */
;;;169        LPC_EMAC->MAC2    |= MAC2_FULL_DUP;
00024a  6861              LDR      r1,[r4,#4]
00024c  f0410101          ORR      r1,r1,#1
000250  6061              STR      r1,[r4,#4]
;;;170        LPC_EMAC->Command |= CR_FULL_DUP;
000252  f8d41100          LDR      r1,[r4,#0x100]
000256  f4416180          ORR      r1,r1,#0x400
00025a  f8c41100          STR      r1,[r4,#0x100]
;;;171        LPC_EMAC->IPGT     = IPGT_FULL_DUP;
00025e  2115              MOVS     r1,#0x15
000260  60a1              STR      r1,[r4,#8]
000262  e000              B        |L1.614|
                  |L1.612|
;;;172      }
;;;173      else {
;;;174        /* Half duplex mode. */
;;;175        LPC_EMAC->IPGT = IPGT_HALF_DUP;
000264  60a7              STR      r7,[r4,#8]
                  |L1.614|
;;;176      }
;;;177    
;;;178      /* Configure 100MBit/10MBit mode. */
;;;179      if (regv & 0x0002) {
000266  0780              LSLS     r0,r0,#30
000268  d501              BPL      |L1.622|
;;;180        /* 10MBit mode. */
;;;181        LPC_EMAC->SUPP = 0;
00026a  61a5              STR      r5,[r4,#0x18]
00026c  e002              B        |L1.628|
                  |L1.622|
;;;182      }
;;;183      else {
;;;184        /* 100MBit mode. */
;;;185        LPC_EMAC->SUPP = SUPP_SPEED;
00026e  f44f7080          MOV      r0,#0x100
000272  61a0              STR      r0,[r4,#0x18]
                  |L1.628|
;;;186      }
;;;187    
;;;188      /* Set the Ethernet MAC Address registers */
;;;189      LPC_EMAC->SA0 = ((U32)own_hw_adr[5] << 8) | (U32)own_hw_adr[4];
000274  4867              LDR      r0,|L1.1044|
000276  8881              LDRH     r1,[r0,#4]  ; own_hw_adr
000278  6421              STR      r1,[r4,#0x40]
;;;190      LPC_EMAC->SA1 = ((U32)own_hw_adr[3] << 8) | (U32)own_hw_adr[2];
00027a  8841              LDRH     r1,[r0,#2]  ; own_hw_adr
00027c  6461              STR      r1,[r4,#0x44]
;;;191      LPC_EMAC->SA2 = ((U32)own_hw_adr[1] << 8) | (U32)own_hw_adr[0];
00027e  8800              LDRH     r0,[r0,#0]  ; own_hw_adr
000280  64a0              STR      r0,[r4,#0x48]
000282  4b65              LDR      r3,|L1.1048|
000284  4e65              LDR      r6,|L1.1052|
000286  f1a30164          SUB      r1,r3,#0x64
00028a  2000              MOVS     r0,#0
00028c  f1010220          ADD      r2,r1,#0x20
                  |L1.656|
000290  eb000740          ADD      r7,r0,r0,LSL #1
000294  eb032747          ADD      r7,r3,r7,LSL #9
000298  f8417030          STR      r7,[r1,r0,LSL #3]
00029c  eb0107c0          ADD      r7,r1,r0,LSL #3
0002a0  607e              STR      r6,[r7,#4]
0002a2  f8425030          STR      r5,[r2,r0,LSL #3]
0002a6  eb0207c0          ADD      r7,r2,r0,LSL #3
0002aa  1c40              ADDS     r0,r0,#1
0002ac  607d              STR      r5,[r7,#4]
0002ae  2804              CMP      r0,#4
0002b0  d3ee              BCC      |L1.656|
0002b2  f8c41108          STR      r1,[r4,#0x108]
0002b6  f8c4210c          STR      r2,[r4,#0x10c]
0002ba  2003              MOVS     r0,#3
0002bc  f8c40110          STR      r0,[r4,#0x110]
0002c0  f8c45118          STR      r5,[r4,#0x118]
0002c4  4954              LDR      r1,|L1.1048|
0002c6  2000              MOVS     r0,#0
0002c8  4e55              LDR      r6,|L1.1056|
0002ca  3924              SUBS     r1,r1,#0x24
0002cc  f1010218          ADD      r2,r1,#0x18
                  |L1.720|
0002d0  eb000340          ADD      r3,r0,r0,LSL #1
0002d4  eb062343          ADD      r3,r6,r3,LSL #9
0002d8  f8413030          STR      r3,[r1,r0,LSL #3]
0002dc  eb0103c0          ADD      r3,r1,r0,LSL #3
0002e0  605d              STR      r5,[r3,#4]
0002e2  f8425020          STR      r5,[r2,r0,LSL #2]
0002e6  1c40              ADDS     r0,r0,#1
0002e8  2803              CMP      r0,#3
0002ea  d3f1              BCC      |L1.720|
0002ec  f10404ac          ADD      r4,r4,#0xac
0002f0  6721              STR      r1,[r4,#0x70]
0002f2  6762              STR      r2,[r4,#0x74]
0002f4  f8c48078          STR      r8,[r4,#0x78]
0002f8  67e5              STR      r5,[r4,#0x7c]
;;;192    
;;;193      /* Initialize Tx and Rx DMA Descriptors */
;;;194      rx_descr_init ();
;;;195      tx_descr_init ();
;;;196    
;;;197      /* Receive Broadcast, Multicast and Perfect Match Packets */
;;;198      LPC_EMAC->RxFilterCtrl = RFC_MCAST_EN | RFC_BCAST_EN | RFC_PERFECT_EN;
0002fa  f04f0026          MOV      r0,#0x26
0002fe  f8c40154          STR      r0,[r4,#0x154]
;;;199    
;;;200      /* Enable EMAC interrupts. */
;;;201      LPC_EMAC->IntEnable = INT_RX_DONE | INT_TX_DONE;
000302  f04f0088          MOV      r0,#0x88
000306  f8c40f38          STR      r0,[r4,#0xf38]
;;;202    
;;;203      /* Reset all interrupts */
;;;204      LPC_EMAC->IntClear  = 0xFFFF;
00030a  f64f70ff          MOV      r0,#0xffff
00030e  f8c40f3c          STR      r0,[r4,#0xf3c]
;;;205    
;;;206      /* Enable receive and transmit mode of MAC Ethernet core */
;;;207      LPC_EMAC->Command  |= (CR_RX_EN | CR_TX_EN);
000312  6d60              LDR      r0,[r4,#0x54]
000314  f0400003          ORR      r0,r0,#3
000318  6560              STR      r0,[r4,#0x54]
;;;208      LPC_EMAC->MAC1     |= MAC1_REC_EN;
00031a  f8540dac          LDR      r0,[r4,#-0xac]!
00031e  f0400001          ORR      r0,r0,#1
000322  6020              STR      r0,[r4,#0]
;;;209    
;;;210    }
000324  e8bd87fc          POP      {r2-r10,pc}
;;;211    
                          ENDP

                  int_enable_eth PROC
;;;214    
;;;215    void int_enable_eth (void) {
000328  483e              LDR      r0,|L1.1060|
00032a  f04f5180          MOV      r1,#0x10000000
00032e  6001              STR      r1,[r0,#0]
;;;216      /* Ethernet Interrupt Enable function. */
;;;217      NVIC_EnableIRQ(ENET_IRQn);
;;;218    }
000330  4770              BX       lr
;;;219    
                          ENDP

                  int_disable_eth PROC
;;;222    
;;;223    void int_disable_eth (void) {
000332  483d              LDR      r0,|L1.1064|
000334  f04f5180          MOV      r1,#0x10000000
000338  6001              STR      r1,[r0,#0]
;;;224      /* Ethernet Interrupt Disable function. */
;;;225      NVIC_DisableIRQ(ENET_IRQn);
;;;226    }
00033a  4770              BX       lr
;;;227    
                          ENDP

                  send_frame PROC
;;;230    
;;;231    void send_frame (OS_FRAME *frame) {
00033c  b5f0              PUSH     {r4-r7,lr}
;;;232      /* Send frame to EMAC ethernet controller */
;;;233      U32 idx,len;
;;;234      U32 *sp,*dp;
;;;235    
;;;236      idx = LPC_EMAC->TxProduceIndex;
00033e  f04f45a0          MOV      r5,#0x50000000
000342  f8d51128          LDR      r1,[r5,#0x128]
;;;237      sp  = (U32 *)&frame->data[0];
;;;238      dp  = (U32 *)Tx_Desc[idx].Packet;
000346  4e34              LDR      r6,|L1.1048|
;;;239    
;;;240      /* Copy frame data to EMAC packet buffers. */
;;;241      for (len = (frame->length + 3) >> 2; len; len--) {
000348  8803              LDRH     r3,[r0,#0]
00034a  3e24              SUBS     r6,r6,#0x24           ;238
00034c  1d02              ADDS     r2,r0,#4              ;237
00034e  f8564031          LDR      r4,[r6,r1,LSL #3]     ;238
000352  1cdb              ADDS     r3,r3,#3
000354  089b              LSRS     r3,r3,#2
000356  d003              BEQ      |L1.864|
                  |L1.856|
;;;242        *dp++ = *sp++;
000358  ca80              LDM      r2!,{r7}
00035a  1e5b              SUBS     r3,r3,#1              ;241
00035c  c480              STM      r4!,{r7}
00035e  d1fb              BNE      |L1.856|
                  |L1.864|
;;;243      }
;;;244      Tx_Desc[idx].Ctrl = (frame->length-1) | (TCTRL_INT | TCTRL_LAST);
000360  8800              LDRH     r0,[r0,#0]
000362  eb0602c1          ADD      r2,r6,r1,LSL #3
000366  1e40              SUBS     r0,r0,#1
000368  f0404040          ORR      r0,r0,#0xc0000000
;;;245    
;;;246      /* Start frame transmission. */
;;;247      if (++idx == NUM_TX_FRAG) idx = 0;
00036c  1c49              ADDS     r1,r1,#1
00036e  6050              STR      r0,[r2,#4]
000370  2903              CMP      r1,#3
000372  d100              BNE      |L1.886|
000374  2100              MOVS     r1,#0
                  |L1.886|
;;;248      LPC_EMAC->TxProduceIndex = idx;
000376  f8c51128          STR      r1,[r5,#0x128]
;;;249    }
00037a  bdf0              POP      {r4-r7,pc}
;;;250    
                          ENDP

                  ENET_IRQHandler PROC
;;;253    
;;;254    void ENET_IRQHandler (void) {
00037c  b570              PUSH     {r4-r6,lr}
;;;255      /* EMAC Ethernet Controller Interrupt function. */
;;;256      OS_FRAME *frame;
;;;257      U32 idx,int_stat,RxLen,info;
;;;258      U32 *sp,*dp;
;;;259    
;;;260      while ((int_stat = (LPC_EMAC->IntStatus & LPC_EMAC->IntEnable)) != 0) {
;;;261        LPC_EMAC->IntClear = int_stat;
00037e  f04f45a0          MOV      r5,#0x50000000
000382  e033              B        |L1.1004|
                  |L1.900|
000384  f8c50fe8          STR      r0,[r5,#0xfe8]
;;;262        if (int_stat & INT_RX_DONE) {
000388  0700              LSLS     r0,r0,#28
00038a  d52f              BPL      |L1.1004|
;;;263          /* Packet received, check if packet is valid. */
;;;264          idx = LPC_EMAC->RxConsumeIndex;
00038c  f8d54118          LDR      r4,[r5,#0x118]
;;;265          while (idx != LPC_EMAC->RxProduceIndex) {
000390  e028              B        |L1.996|
                  |L1.914|
;;;266            info = Rx_Stat[idx].Info;
000392  4821              LDR      r0,|L1.1048|
000394  3844              SUBS     r0,r0,#0x44
000396  f8500034          LDR      r0,[r0,r4,LSL #3]
;;;267            if (!(info & RINFO_LAST_FLAG)) {
00039a  0041              LSLS     r1,r0,#1
00039c  d51c              BPL      |L1.984|
;;;268              goto rel;
;;;269            }
;;;270    
;;;271            RxLen = (info & RINFO_SIZE) - 3;
00039e  f3c0060a          UBFX     r6,r0,#0,#11
0003a2  1ef6              SUBS     r6,r6,#3
;;;272            if (RxLen > ETH_MTU || (info & RINFO_ERR_MASK)) {
0003a4  f24051ea          MOV      r1,#0x5ea
0003a8  428e              CMP      r6,r1
0003aa  d815              BHI      |L1.984|
0003ac  491f              LDR      r1,|L1.1068|
0003ae  4208              TST      r0,r1
0003b0  d112              BNE      |L1.984|
;;;273              /* Invalid frame, ignore it and free buffer. */
;;;274              goto rel;
;;;275            }
;;;276            /* Flag 0x80000000 to skip sys_error() call when out of memory. */
;;;277            frame = alloc_mem (RxLen | 0x80000000);
0003b2  f0464000          ORR      r0,r6,#0x80000000
0003b6  f7fffffe          BL       alloc_mem
;;;278            /* if 'alloc_mem()' has failed, ignore this packet. */
;;;279            if (frame != NULL) {
0003ba  b168              CBZ      r0,|L1.984|
;;;280              dp = (U32 *)&frame->data[0];
;;;281              sp = (U32 *)Rx_Desc[idx].Packet;
0003bc  4a16              LDR      r2,|L1.1048|
0003be  1d01              ADDS     r1,r0,#4              ;280
0003c0  3a64              SUBS     r2,r2,#0x64
;;;282              for (RxLen = (RxLen + 3) >> 2; RxLen; RxLen--) {
0003c2  1cf6              ADDS     r6,r6,#3
0003c4  f8522034          LDR      r2,[r2,r4,LSL #3]     ;281
0003c8  08b3              LSRS     r3,r6,#2
0003ca  d003              BEQ      |L1.980|
                  |L1.972|
;;;283                *dp++ = *sp++;
0003cc  ca40              LDM      r2!,{r6}
0003ce  1e5b              SUBS     r3,r3,#1              ;282
0003d0  c140              STM      r1!,{r6}
0003d2  d1fb              BNE      |L1.972|
                  |L1.980|
;;;284              }
;;;285              put_in_queue (frame);
0003d4  f7fffffe          BL       put_in_queue
                  |L1.984|
;;;286            }
;;;287    rel:    if (++idx == NUM_RX_FRAG) idx = 0;
0003d8  1c64              ADDS     r4,r4,#1
0003da  2c04              CMP      r4,#4
0003dc  d100              BNE      |L1.992|
0003de  2400              MOVS     r4,#0
                  |L1.992|
;;;288            /* Release frame from EMAC buffer. */
;;;289            LPC_EMAC->RxConsumeIndex = idx;
0003e0  f8c54118          STR      r4,[r5,#0x118]
                  |L1.996|
0003e4  f8d50114          LDR      r0,[r5,#0x114]        ;265
0003e8  42a0              CMP      r0,r4                 ;265
0003ea  d1d2              BNE      |L1.914|
                  |L1.1004|
0003ec  f8d50fe0          LDR      r0,[r5,#0xfe0]        ;260
0003f0  f8d51fe4          LDR      r1,[r5,#0xfe4]        ;260
0003f4  4008              ANDS     r0,r0,r1              ;260
0003f6  d1c5              BNE      |L1.900|
;;;290          }
;;;291        }
;;;292        if (int_stat & INT_TX_DONE) {
;;;293          /* Frame transmit completed. */
;;;294        }
;;;295      }
;;;296    
;;;297    }
0003f8  bd70              POP      {r4-r6,pc}
0003fa  0000              DCW      0x0000
                  |L1.1020|
                          DCD      0x2009c000
                  |L1.1024|
                          DCD      ||.data||
                  |L1.1028|
                          DCD      0x400fc0c4
                  |L1.1032|
                          DCD      0x50150105
                  |L1.1036|
                          DCD      0x4002c000
                  |L1.1040|
                          DCD      0x20005c90
                  |L1.1044|
                          DCD      own_hw_adr
                  |L1.1048|
                          DCD      ||.bss||+0x64
                  |L1.1052|
                          DCD      0x800005ff
                  |L1.1056|
                          DCD      ||.bss||+0x1864
                  |L1.1060|
                          DCD      0xe000e100
                  |L1.1064|
                          DCD      0xe000e180
                  |L1.1068|
                          DCD      0x1b900000
                          ENDP

                  turnaround_MDIO PROC
;;;367    
;;;368    static void turnaround_MDIO (void) {
000430  4807              LDR      r0,|L1.1104|
;;;369      /* Turnaround MDO is tristated. */
;;;370    
;;;371      LPC_GPIO2->FIODIR &= ~MDIO;
000432  6c01              LDR      r1,[r0,#0x40]
000434  f4217100          BIC      r1,r1,#0x200
000438  6401              STR      r1,[r0,#0x40]
;;;372      LPC_GPIO2->FIOSET  = MDC;
00043a  f44f7180          MOV      r1,#0x100
00043e  6581              STR      r1,[r0,#0x58]
;;;373      delay ();
000440  bf00              NOP      
000442  bf00              NOP      
000444  bf00              NOP      
;;;374      LPC_GPIO2->FIOCLR  = MDC;
000446  65c1              STR      r1,[r0,#0x5c]
;;;375      delay ();
000448  bf00              NOP      
00044a  bf00              NOP      
00044c  bf00              NOP      
;;;376    }
00044e  4770              BX       lr
;;;377    
                          ENDP

                  |L1.1104|
                          DCD      0x2009c000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  Rx_Desc
                          %        32
                  Rx_Stat
                          %        32
                  Tx_Desc
                          %        24
                  Tx_Stat
                          %        12
                  rx_buf
                          %        6144
                  tx_buf
                          %        4608

                          AREA ||.data||, DATA, ALIGN=2

                  dev_175x
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  iap_entry
                          DCD      0x1fff1ff1

;*** Start embedded assembler ***

#line 1 "C:\\Keil\\ARM\\Boards\\Keil\\MCB1700\\RL\\TCPnet\\Library\\EMAC_LPC17xx.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_EMAC_LPC17xx_c_f63b8310____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_EMAC_LPC17xx_c_f63b8310____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_EMAC_LPC17xx_c_f63b8310____REVSH|
#line 130
|__asm___14_EMAC_LPC17xx_c_f63b8310____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
