; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\mess.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\mess.d --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 -DWG12232A --omf_browse=.\EXE\mess.crf mess.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mess_hndl PROC
;;;10     //-----------------------------------------------
;;;11     void mess_hndl(void)
000000  b570              PUSH     {r4-r6,lr}
;;;12     {
;;;13     char i;
;;;14     for(i=0;i<MESS_DEEP;i++)
;;;15     	{
;;;16     	if((mess[i])&&(mess[i]==mess_old[i])&&(mess_cnt[i]))
000002  4a37              LDR      r2,|L1.224|
000004  2000              MOVS     r0,#0                 ;14
000006  f1a20114          SUB      r1,r2,#0x14
00000a  4606              MOV      r6,r0                 ;14
00000c  f101030a          ADD      r3,r1,#0xa
                  |L1.16|
000010  5c0c              LDRB     r4,[r1,r0]
000012  b154              CBZ      r4,|L1.42|
000014  5c1d              LDRB     r5,[r3,r0]
000016  42ac              CMP      r4,r5
000018  d107              BNE      |L1.42|
00001a  5c14              LDRB     r4,[r2,r0]
00001c  b12c              CBZ      r4,|L1.42|
;;;17     		{
;;;18     		mess_cnt[i]--;
00001e  1e64              SUBS     r4,r4,#1
000020  f01404ff          ANDS     r4,r4,#0xff
000024  5414              STRB     r4,[r2,r0]
;;;19     		if(!mess_cnt[i])mess[i]=MESS_ZERO;
000026  d100              BNE      |L1.42|
000028  540e              STRB     r6,[r1,r0]
                  |L1.42|
;;;20     		
;;;21     		}
;;;22     	mess_old[i]=mess[i];
00002a  5c0c              LDRB     r4,[r1,r0]
00002c  541c              STRB     r4,[r3,r0]
00002e  1c40              ADDS     r0,r0,#1              ;14
000030  b2c0              UXTB     r0,r0                 ;14
000032  280a              CMP      r0,#0xa               ;14
000034  d3ec              BCC      |L1.16|
;;;23     	} 
;;;24     }
000036  bd70              POP      {r4-r6,pc}
;;;25     
                          ENDP

                  mess_send PROC
;;;26     //-----------------------------------------------
;;;27     void mess_send(char _mess, short par0, short par1, char _time)
000038  b570              PUSH     {r4-r6,lr}
;;;28     {
;;;29     char i;
;;;30     i=0;
;;;31     
;;;32     do
;;;33     	{
;;;34     	i++;
;;;35     	}
;;;36     while((mess[i])&&(mess[i]!=_mess)&&(i<MESS_DEEP));
00003a  4d29              LDR      r5,|L1.224|
00003c  2400              MOVS     r4,#0                 ;30
00003e  3d14              SUBS     r5,r5,#0x14
                  |L1.64|
000040  1c64              ADDS     r4,r4,#1              ;34
000042  b2e4              UXTB     r4,r4                 ;34
000044  5d2e              LDRB     r6,[r5,r4]
000046  b11e              CBZ      r6,|L1.80|
000048  4286              CMP      r6,r0
00004a  d001              BEQ      |L1.80|
00004c  2c0a              CMP      r4,#0xa
00004e  d3f7              BCC      |L1.64|
                  |L1.80|
;;;37     
;;;38     mess[i]=_mess;  
000050  5528              STRB     r0,[r5,r4]
;;;39     mess_par0[i]=par0;
000052  4823              LDR      r0,|L1.224|
000054  300c              ADDS     r0,r0,#0xc
000056  f8401024          STR      r1,[r0,r4,LSL #2]
;;;40     mess_par1[i]=par1;
00005a  3028              ADDS     r0,r0,#0x28
00005c  f8402024          STR      r2,[r0,r4,LSL #2]
;;;41     mess_cnt[i]=_time; 
000060  3834              SUBS     r0,r0,#0x34
000062  5503              STRB     r3,[r0,r4]
;;;42      
;;;43     }
000064  bd70              POP      {r4-r6,pc}
;;;44     
                          ENDP

                  mess_find PROC
;;;45     //-----------------------------------------------
;;;46     char mess_find(char _mess)
000066  4a1e              LDR      r2,|L1.224|
;;;47     {
;;;48     char i;
;;;49     i=0;
000068  2100              MOVS     r1,#0
;;;50     
;;;51     do
;;;52     	{
;;;53     	i++;
;;;54     	}
;;;55     while((mess[i]!=_mess)&&(i<MESS_DEEP));
00006a  3a14              SUBS     r2,r2,#0x14
                  |L1.108|
00006c  1c49              ADDS     r1,r1,#1              ;53
00006e  b2c9              UXTB     r1,r1                 ;53
000070  5c53              LDRB     r3,[r2,r1]
000072  4283              CMP      r3,r0
000074  d001              BEQ      |L1.122|
000076  290a              CMP      r1,#0xa
000078  d3f8              BCC      |L1.108|
                  |L1.122|
;;;56     
;;;57     if(mess[i]==_mess)
00007a  b2db              UXTB     r3,r3
00007c  4283              CMP      r3,r0
00007e  d110              BNE      |L1.162|
;;;58     	{ 
;;;59     	mess_data[0]=mess_par0[i];  
000080  4817              LDR      r0,|L1.224|
000082  300c              ADDS     r0,r0,#0xc
000084  f8503021          LDR      r3,[r0,r1,LSL #2]
000088  4816              LDR      r0,|L1.228|
;;;60     	mess_data[1]=mess_par1[i];
00008a  6003              STR      r3,[r0,#0]  ; mess_data
00008c  4b14              LDR      r3,|L1.224|
00008e  3334              ADDS     r3,r3,#0x34
000090  f8533021          LDR      r3,[r3,r1,LSL #2]
;;;61     	mess[i]=MESS_ZERO;
000094  6043              STR      r3,[r0,#4]  ; mess_data
000096  2000              MOVS     r0,#0
000098  5450              STRB     r0,[r2,r1]
;;;62     	mess_cnt[i]=0;
00009a  4a11              LDR      r2,|L1.224|
00009c  5450              STRB     r0,[r2,r1]
;;;63     	return 1; 
00009e  2001              MOVS     r0,#1
;;;64     	}
;;;65     else return 0; 
;;;66      
;;;67     }
0000a0  4770              BX       lr
                  |L1.162|
0000a2  2000              MOVS     r0,#0                 ;65
0000a4  4770              BX       lr
;;;68     
                          ENDP

                  mess_find_unvol PROC
;;;69     //-----------------------------------------------
;;;70     char mess_find_unvol(char _mess)
0000a6  4a0e              LDR      r2,|L1.224|
;;;71     {
;;;72     char i;
;;;73     i=0;
0000a8  2100              MOVS     r1,#0
;;;74     
;;;75     do
;;;76     	{
;;;77     	i++;
;;;78     	}
;;;79     while((mess[i]!=_mess)&&(i<MESS_DEEP));
0000aa  3a14              SUBS     r2,r2,#0x14
                  |L1.172|
0000ac  1c49              ADDS     r1,r1,#1              ;77
0000ae  b2c9              UXTB     r1,r1                 ;77
0000b0  5c53              LDRB     r3,[r2,r1]
0000b2  4283              CMP      r3,r0
0000b4  d001              BEQ      |L1.186|
0000b6  290a              CMP      r1,#0xa
0000b8  d3f8              BCC      |L1.172|
                  |L1.186|
;;;80     
;;;81     if(mess[i]==_mess)
0000ba  b2da              UXTB     r2,r3
0000bc  4282              CMP      r2,r0
0000be  d10c              BNE      |L1.218|
;;;82     	{ 
;;;83     	mess_data[0]=mess_par0[i];  
0000c0  4807              LDR      r0,|L1.224|
0000c2  300c              ADDS     r0,r0,#0xc
0000c4  f8502021          LDR      r2,[r0,r1,LSL #2]
0000c8  4806              LDR      r0,|L1.228|
;;;84     	mess_data[1]=mess_par1[i];
0000ca  6002              STR      r2,[r0,#0]  ; mess_data
0000cc  4a04              LDR      r2,|L1.224|
0000ce  3234              ADDS     r2,r2,#0x34
0000d0  f8521021          LDR      r1,[r2,r1,LSL #2]
;;;85     	return 1; 
0000d4  6041              STR      r1,[r0,#4]  ; mess_data
0000d6  2001              MOVS     r0,#1
;;;86     	}
;;;87     else return 0; 
;;;88      
;;;89     }
0000d8  4770              BX       lr
                  |L1.218|
0000da  2000              MOVS     r0,#0                 ;87
0000dc  4770              BX       lr
                          ENDP

0000de  0000              DCW      0x0000
                  |L1.224|
                          DCD      ||.bss||+0x14
                  |L1.228|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mess
                          %        10
                  mess_old
                          %        10
                  mess_cnt
                          %        12
                  mess_par0
                          %        40
                  mess_par1
                          %        40

                          AREA ||.data||, DATA, ALIGN=2

                  mess_data
                          %        8
