; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\timer.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\timer.d --feedback=.\EXE\UKU2071x_GALV_IBv2.fed --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 --omf_browse=.\EXE\timer.crf Timer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  delayMs PROC
;;;1095    */
;;;1096   static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  b570              PUSH     {r4-r6,lr}
;;;1097   {
;;;1098     NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  f2423427          MOV      r4,#0x2327
000006  4361              MULS     r1,r4,r1
000008  2200              MOVS     r2,#0
00000a  2302              MOVS     r3,#2
00000c  24ff              MOVS     r4,#0xff
00000e  2504              MOVS     r5,#4
000010  2601              MOVS     r6,#1
000012  b160              CBZ      r0,|L1.46|
000014  2801              CMP      r0,#1
;;;1099   }
000016  d109              BNE      |L1.44|
000018  480b              LDR      r0,|L1.72|
00001a  6043              STR      r3,[r0,#4]
00001c  60c2              STR      r2,[r0,#0xc]
00001e  6181              STR      r1,[r0,#0x18]
000020  6004              STR      r4,[r0,#0]
000022  6145              STR      r5,[r0,#0x14]
000024  6046              STR      r6,[r0,#4]
                  |L1.38|
000026  6841              LDR      r1,[r0,#4]
000028  07c9              LSLS     r1,r1,#31
00002a  d1fc              BNE      |L1.38|
                  |L1.44|
00002c  bd70              POP      {r4-r6,pc}
                  |L1.46|
00002e  f04f2040          MOV      r0,#0x40004000
000032  6043              STR      r3,[r0,#4]
000034  60c2              STR      r2,[r0,#0xc]
000036  6181              STR      r1,[r0,#0x18]
000038  6004              STR      r4,[r0,#0]
00003a  6145              STR      r5,[r0,#0x14]
00003c  6046              STR      r6,[r0,#4]
                  |L1.62|
00003e  6841              LDR      r1,[r0,#4]
000040  07c9              LSLS     r1,r1,#31
000042  d1fc              BNE      |L1.62|
000044  bd70              POP      {r4-r6,pc}
;;;1100   
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      0x40008000

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  TIMER0_IRQHandler PROC
;;;1095    */
;;;1096   static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f04f2140          MOV      r1,#0x40004000
;;;1097   {
;;;1098     NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000004  2001              MOVS     r0,#1
000006  6008              STR      r0,[r1,#0]
000008  480c              LDR      r0,|L2.60|
00000a  6801              LDR      r1,[r0,#0]  ; timer0_counter
00000c  1c49              ADDS     r1,r1,#1
00000e  6001              STR      r1,[r0,#0]  ; timer0_counter
000010  490b              LDR      r1,|L2.64|
000012  2000              MOVS     r0,#0
000014  7008              STRB     r0,[r1,#0]
;;;1099   }
000016  480b              LDR      r0,|L2.68|
000018  6801              LDR      r1,[r0,#0]
00001a  f02101ff          BIC      r1,r1,#0xff
00001e  1d09              ADDS     r1,r1,#4
000020  6001              STR      r1,[r0,#0]
000022  6801              LDR      r1,[r0,#0]
000024  f0417180          ORR      r1,r1,#0x1000000
000028  6001              STR      r1,[r0,#0]
00002a  4770              BX       lr
;;;1100   
                          ENDP

                  TIMER1_IRQHandler PROC
;;;31     *****************************************************************************/
;;;32     void delayMs(uint8_t timer_num, uint32_t delayInMs)
;;;33     {
;;;34       if ( timer_num == 0 )
;;;35       {
;;;36     	LPC_TIM0->TCR = 0x02;		/* reset timer */
;;;37     	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
;;;38     	LPC_TIM0->MR0 = delayInMs * (9000000 / 1000-1);
;;;39     	LPC_TIM0->IR  = 0xff;		/* reset all interrrupts */
;;;40     	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
;;;41     	LPC_TIM0->TCR = 0x01;		/* start timer */
;;;42       
;;;43     	/* wait until delay time has elapsed */
;;;44     	while (LPC_TIM0->TCR & 0x01);
;;;45       }
;;;46       else if ( timer_num == 1 )
;;;47       {
;;;48     	LPC_TIM1->TCR = 0x02;		/* reset timer */
;;;49     	LPC_TIM1->PR  = 0x00;		/* set prescaler to zero */
;;;50     	LPC_TIM1->MR0 = delayInMs * (9000000 / 1000-1);
;;;51     	LPC_TIM1->IR  = 0xff;		/* reset all interrrupts */
;;;52     	LPC_TIM1->MCR = 0x04;		/* stop timer on match */
;;;53     	LPC_TIM1->TCR = 0x01;		/* start timer */
;;;54       
;;;55     	/* wait until delay time has elapsed */
;;;56     	while (LPC_TIM1->TCR & 0x01);
;;;57       }
;;;58       return;
;;;59     }
00002c  4906              LDR      r1,|L2.72|
00002e  2001              MOVS     r0,#1                 ;36
000030  6008              STR      r0,[r1,#0]            ;36
000032  4802              LDR      r0,|L2.60|
000034  6841              LDR      r1,[r0,#4]            ;37  ; timer1_counter
000036  1c49              ADDS     r1,r1,#1              ;38
000038  6041              STR      r1,[r0,#4]            ;39  ; timer1_counter
00003a  4770              BX       lr                    ;40
;;;60     
                          ENDP

                  |L2.60|
                          DCD      ||.data||
                  |L2.64|
                          DCD      adc_self_ch_cnt
                  |L2.68|
                          DCD      0x40034000
                  |L2.72|
                          DCD      0x40008000

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  enable_timer PROC
;;;31     *****************************************************************************/
;;;32     void delayMs(uint8_t timer_num, uint32_t delayInMs)
000000  2101              MOVS     r1,#1
;;;33     {
;;;34       if ( timer_num == 0 )
;;;35       {
;;;36     	LPC_TIM0->TCR = 0x02;		/* reset timer */
;;;37     	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
;;;38     	LPC_TIM0->MR0 = delayInMs * (9000000 / 1000-1);
000002  b110              CBZ      r0,|L3.10|
000004  4802              LDR      r0,|L3.16|
                  |L3.6|
000006  6041              STR      r1,[r0,#4]
000008  4770              BX       lr                    ;33
                  |L3.10|
00000a  f04f2040          MOV      r0,#0x40004000        ;36
;;;39     	LPC_TIM0->IR  = 0xff;		/* reset all interrrupts */
;;;40     	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
00000e  e7fa              B        |L3.6|
;;;41     	LPC_TIM0->TCR = 0x01;		/* start timer */
;;;42       
;;;43     	/* wait until delay time has elapsed */
;;;44     	while (LPC_TIM0->TCR & 0x01);
;;;45       }
;;;46       else if ( timer_num == 1 )
;;;47       {
;;;48     	LPC_TIM1->TCR = 0x02;		/* reset timer */
;;;49     	LPC_TIM1->PR  = 0x00;		/* set prescaler to zero */
;;;50     	LPC_TIM1->MR0 = delayInMs * (9000000 / 1000-1);
;;;51     	LPC_TIM1->IR  = 0xff;		/* reset all interrrupts */
;;;52     	LPC_TIM1->MCR = 0x04;		/* stop timer on match */
;;;53     	LPC_TIM1->TCR = 0x01;		/* start timer */
;;;54       
;;;55     	/* wait until delay time has elapsed */
;;;56     	while (LPC_TIM1->TCR & 0x01);
;;;57       }
;;;58       return;
;;;59     }
;;;60     
                          ENDP

                  |L3.16|
                          DCD      0x40008000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  disable_timer PROC
;;;31     *****************************************************************************/
;;;32     void delayMs(uint8_t timer_num, uint32_t delayInMs)
000000  2100              MOVS     r1,#0
;;;33     {
;;;34       if ( timer_num == 0 )
;;;35       {
;;;36     	LPC_TIM0->TCR = 0x02;		/* reset timer */
;;;37     	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
;;;38     	LPC_TIM0->MR0 = delayInMs * (9000000 / 1000-1);
000002  b110              CBZ      r0,|L4.10|
000004  4802              LDR      r0,|L4.16|
                  |L4.6|
000006  6041              STR      r1,[r0,#4]
000008  4770              BX       lr                    ;33
                  |L4.10|
00000a  f04f2040          MOV      r0,#0x40004000        ;36
;;;39     	LPC_TIM0->IR  = 0xff;		/* reset all interrrupts */
;;;40     	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
00000e  e7fa              B        |L4.6|
;;;41     	LPC_TIM0->TCR = 0x01;		/* start timer */
;;;42       
;;;43     	/* wait until delay time has elapsed */
;;;44     	while (LPC_TIM0->TCR & 0x01);
;;;45       }
;;;46       else if ( timer_num == 1 )
;;;47       {
;;;48     	LPC_TIM1->TCR = 0x02;		/* reset timer */
;;;49     	LPC_TIM1->PR  = 0x00;		/* set prescaler to zero */
;;;50     	LPC_TIM1->MR0 = delayInMs * (9000000 / 1000-1);
;;;51     	LPC_TIM1->IR  = 0xff;		/* reset all interrrupts */
;;;52     	LPC_TIM1->MCR = 0x04;		/* stop timer on match */
;;;53     	LPC_TIM1->TCR = 0x01;		/* start timer */
;;;54       
;;;55     	/* wait until delay time has elapsed */
;;;56     	while (LPC_TIM1->TCR & 0x01);
;;;57       }
;;;58       return;
;;;59     }
;;;60     
                          ENDP

                  |L4.16|
                          DCD      0x40008000

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  reset_timer PROC
;;;31     *****************************************************************************/
;;;32     void delayMs(uint8_t timer_num, uint32_t delayInMs)
000000  b128              CBZ      r0,|L5.14|
;;;33     {
;;;34       if ( timer_num == 0 )
;;;35       {
;;;36     	LPC_TIM0->TCR = 0x02;		/* reset timer */
;;;37     	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
;;;38     	LPC_TIM0->MR0 = delayInMs * (9000000 / 1000-1);
000002  4804              LDR      r0,|L5.20|
                  |L5.4|
000004  6841              LDR      r1,[r0,#4]
000006  f0410102          ORR      r1,r1,#2
00000a  6041              STR      r1,[r0,#4]            ;36
;;;39     	LPC_TIM0->IR  = 0xff;		/* reset all interrrupts */
00000c  4770              BX       lr
                  |L5.14|
;;;40     	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
00000e  f04f2040          MOV      r0,#0x40004000
000012  e7f7              B        |L5.4|
;;;41     	LPC_TIM0->TCR = 0x01;		/* start timer */
;;;42       
;;;43     	/* wait until delay time has elapsed */
;;;44     	while (LPC_TIM0->TCR & 0x01);
;;;45       }
;;;46       else if ( timer_num == 1 )
;;;47       {
;;;48     	LPC_TIM1->TCR = 0x02;		/* reset timer */
;;;49     	LPC_TIM1->PR  = 0x00;		/* set prescaler to zero */
;;;50     	LPC_TIM1->MR0 = delayInMs * (9000000 / 1000-1);
;;;51     	LPC_TIM1->IR  = 0xff;		/* reset all interrrupts */
;;;52     	LPC_TIM1->MCR = 0x04;		/* stop timer on match */
;;;53     	LPC_TIM1->TCR = 0x01;		/* start timer */
;;;54       
;;;55     	/* wait until delay time has elapsed */
;;;56     	while (LPC_TIM1->TCR & 0x01);
;;;57       }
;;;58       return;
;;;59     }
;;;60     
                          ENDP

                  |L5.20|
                          DCD      0x40008000

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  init_timer PROC
;;;31     *****************************************************************************/
;;;32     void delayMs(uint8_t timer_num, uint32_t delayInMs)
000000  b510              PUSH     {r4,lr}
;;;33     {
;;;34       if ( timer_num == 0 )
;;;35       {
;;;36     	LPC_TIM0->TCR = 0x02;		/* reset timer */
;;;37     	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
;;;38     	LPC_TIM0->MR0 = delayInMs * (9000000 / 1000-1);
000002  2200              MOVS     r2,#0
000004  4c0b              LDR      r4,|L6.52|
000006  2303              MOVS     r3,#3
000008  b118              CBZ      r0,|L6.18|
00000a  2801              CMP      r0,#1                 ;36
;;;39     	LPC_TIM0->IR  = 0xff;		/* reset all interrrupts */
00000c  d008              BEQ      |L6.32|
;;;40     	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
00000e  2000              MOVS     r0,#0
;;;41     	LPC_TIM0->TCR = 0x01;		/* start timer */
000010  bd10              POP      {r4,pc}
                  |L6.18|
000012  6022              STR      r2,[r4,#0]            ;34  ; timer0_counter
;;;42       
;;;43     	/* wait until delay time has elapsed */
;;;44     	while (LPC_TIM0->TCR & 0x01);
;;;45       }
;;;46       else if ( timer_num == 1 )
000014  f04f2040          MOV      r0,#0x40004000
;;;47       {
;;;48     	LPC_TIM1->TCR = 0x02;		/* reset timer */
000018  6181              STR      r1,[r0,#0x18]
00001a  6143              STR      r3,[r0,#0x14]
;;;49     	LPC_TIM1->PR  = 0x00;		/* set prescaler to zero */
00001c  2001              MOVS     r0,#1
;;;50     	LPC_TIM1->MR0 = delayInMs * (9000000 / 1000-1);
00001e  e004              B        |L6.42|
                  |L6.32|
;;;51     	LPC_TIM1->IR  = 0xff;		/* reset all interrrupts */
000020  6062              STR      r2,[r4,#4]  ; timer1_counter
;;;52     	LPC_TIM1->MCR = 0x04;		/* stop timer on match */
000022  4805              LDR      r0,|L6.56|
;;;53     	LPC_TIM1->TCR = 0x01;		/* start timer */
000024  6181              STR      r1,[r0,#0x18]
;;;54       
;;;55     	/* wait until delay time has elapsed */
;;;56     	while (LPC_TIM1->TCR & 0x01);
000026  6143              STR      r3,[r0,#0x14]
000028  2002              MOVS     r0,#2
                  |L6.42|
00002a  f7fffffe          BL       NVIC_EnableIRQ
00002e  2001              MOVS     r0,#1                 ;36
000030  bd10              POP      {r4,pc}               ;36
;;;57       }
;;;58       return;
;;;59     }
;;;60     
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
                          DCD      ||.data||
                  |L6.56|
                          DCD      0x40008000

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.text||
                  NVIC_EnableIRQ PROC
;;;31     *****************************************************************************/
;;;32     void delayMs(uint8_t timer_num, uint32_t delayInMs)
000000  f000021f          AND      r2,r0,#0x1f
;;;33     {
;;;34       if ( timer_num == 0 )
;;;35       {
;;;36     	LPC_TIM0->TCR = 0x02;		/* reset timer */
;;;37     	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
;;;38     	LPC_TIM0->MR0 = delayInMs * (9000000 / 1000-1);
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5              ;33
00000a  f04f22e0          MOV      r2,#0xe000e000        ;36
;;;39     	LPC_TIM0->IR  = 0xff;		/* reset all interrrupts */
;;;40     	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
00000e  eb020080          ADD      r0,r2,r0,LSL #2
000012  f8c01100          STR      r1,[r0,#0x100]        ;34
;;;41     	LPC_TIM0->TCR = 0x01;		/* start timer */
;;;42       
;;;43     	/* wait until delay time has elapsed */
;;;44     	while (LPC_TIM0->TCR & 0x01);
;;;45       }
;;;46       else if ( timer_num == 1 )
000016  4770              BX       lr
;;;47       {
;;;48     	LPC_TIM1->TCR = 0x02;		/* reset timer */
;;;49     	LPC_TIM1->PR  = 0x00;		/* set prescaler to zero */
;;;50     	LPC_TIM1->MR0 = delayInMs * (9000000 / 1000-1);
;;;51     	LPC_TIM1->IR  = 0xff;		/* reset all interrrupts */
;;;52     	LPC_TIM1->MCR = 0x04;		/* stop timer on match */
;;;53     	LPC_TIM1->TCR = 0x01;		/* start timer */
;;;54       
;;;55     	/* wait until delay time has elapsed */
;;;56     	while (LPC_TIM1->TCR & 0x01);
;;;57       }
;;;58       return;
;;;59     }
;;;60     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  timer0_counter
                          DCD      0x00000000
                  timer1_counter
                          DCD      0x00000000
