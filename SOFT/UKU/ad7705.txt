; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\ad7705.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\ad7705.d --feedback=.\EXE\UKU2071x_GALV_IBv2.fed --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 -DWG12232A --omf_browse=.\EXE\ad7705.crf ad7705.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  spi1_ad7705_config PROC
;;;16     //настройка SPI1
;;;17     void spi1_ad7705_config(void)
000000  487d              LDR      r0,|L1.504|
;;;18     {
;;;19     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
000002  6801              LDR      r1,[r0,#0]
000004  f0414140          ORR      r1,r1,#0xc0000000
000008  6001              STR      r1,[r0,#0]
;;;20     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
00000a  6841              LDR      r1,[r0,#4]
00000c  f0210103          BIC      r1,r1,#3
000010  6041              STR      r1,[r0,#4]
;;;21     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
000012  6841              LDR      r1,[r0,#4]
000014  f041010c          ORR      r1,r1,#0xc
000018  6041              STR      r1,[r0,#4]
;;;22     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
00001a  6841              LDR      r1,[r0,#4]
00001c  f0410130          ORR      r1,r1,#0x30
000020  6041              STR      r1,[r0,#4]
;;;23     /*
;;;24     S1SPCCR=100;
;;;25     S1SPCR=0x3f; */
;;;26     
;;;27     LPC_SPI->SPCCR=20;
000022  4876              LDR      r0,|L1.508|
000024  2114              MOVS     r1,#0x14
000026  60c1              STR      r1,[r0,#0xc]
;;;28     LPC_SPI->SPCR=0x38;
000028  2138              MOVS     r1,#0x38
00002a  6001              STR      r1,[r0,#0]
;;;29     }
00002c  4770              BX       lr
;;;30     //-----------------------------------------------
                          ENDP

                  ad7705_reset PROC
;;;31     void ad7705_reset(void)
00002e  4874              LDR      r0,|L1.512|
;;;32     {
;;;33     //short i;
;;;34     ///IO1DIR|=(1UL<<23);
;;;35     LPC_GPIO2->FIODIR|=(1<<13);
000030  6c01              LDR      r1,[r0,#0x40]
000032  f4415100          ORR      r1,r1,#0x2000
000036  6401              STR      r1,[r0,#0x40]
;;;36     ///IO1CLR|=(1UL<<23);
;;;37     LPC_GPIO2->FIOCLR|=(1<<13);
000038  6dc1              LDR      r1,[r0,#0x5c]
00003a  f4415100          ORR      r1,r1,#0x2000
00003e  65c1              STR      r1,[r0,#0x5c]
;;;38     delay_ms(10);
000040  4970              LDR      r1,|L1.516|
                  |L1.66|
000042  1e49              SUBS     r1,r1,#1
000044  d1fd              BNE      |L1.66|
;;;39     ///IO1SET|=(1UL<<23);
;;;40     LPC_GPIO2->FIOPIN|=(1<<13);
000046  6d41              LDR      r1,[r0,#0x54]
000048  f4415100          ORR      r1,r1,#0x2000
00004c  6541              STR      r1,[r0,#0x54]
;;;41     }
00004e  4770              BX       lr
;;;42     
                          ENDP

                  ad7705_write PROC
;;;43     //-----------------------------------------------
;;;44     void ad7705_write(char in)
000050  b510              PUSH     {r4,lr}
;;;45     {
;;;46     char i;
;;;47     ///IO0DIR|=(1UL<<11);
;;;48     LPC_GPIO0->FIODIR|=(1UL<<11);
000052  4c6b              LDR      r4,|L1.512|
000054  4602              MOV      r2,r0                 ;45
000056  6820              LDR      r0,[r4,#0]
000058  f4406000          ORR      r0,r0,#0x800
00005c  6020              STR      r0,[r4,#0]
;;;49     //IO0SET|=(1UL<<11);
;;;50     LPC_GPIO0->FIOPIN|=(1UL<<11);
00005e  6960              LDR      r0,[r4,#0x14]
000060  f4406000          ORR      r0,r0,#0x800
000064  6160              STR      r0,[r4,#0x14]
;;;51     spi1_ad7705_config();
000066  f7fffffe          BL       spi1_ad7705_config
;;;52     ///IO0CLR|=(1UL<<11);
;;;53     for(i=0;i<5;i++)LPC_GPIO0->FIOPIN&=~(1UL<<11);
00006a  2100              MOVS     r1,#0
                  |L1.108|
00006c  6960              LDR      r0,[r4,#0x14]
00006e  f4206000          BIC      r0,r0,#0x800
000072  6160              STR      r0,[r4,#0x14]
000074  1c49              ADDS     r1,r1,#1
000076  b2c9              UXTB     r1,r1
000078  2905              CMP      r1,#5
00007a  d3f7              BCC      |L1.108|
;;;54     spi1(in);
00007c  4610              MOV      r0,r2
00007e  f7fffffe          BL       spi1
;;;55     ///for(i=0;i<5;i++)IO0CLR|=(1UL<<11);
;;;56     ///IO0SET|=(1UL<<11);
;;;57     for(i=0;i<5;i++)LPC_GPIO0->FIOPIN&=~(1UL<<11);
000082  2000              MOVS     r0,#0
                  |L1.132|
000084  6961              LDR      r1,[r4,#0x14]
000086  f4216100          BIC      r1,r1,#0x800
00008a  6161              STR      r1,[r4,#0x14]
00008c  1c40              ADDS     r0,r0,#1
00008e  b2c0              UXTB     r0,r0
000090  2805              CMP      r0,#5
000092  d3f7              BCC      |L1.132|
;;;58     for(i=0;i<5;i++)LPC_GPIO0->FIOPIN|=(1UL<<11);
000094  2000              MOVS     r0,#0
                  |L1.150|
000096  6961              LDR      r1,[r4,#0x14]
000098  f4416100          ORR      r1,r1,#0x800
00009c  6161              STR      r1,[r4,#0x14]
00009e  1c40              ADDS     r0,r0,#1
0000a0  b2c0              UXTB     r0,r0
0000a2  2805              CMP      r0,#5
0000a4  d3f7              BCC      |L1.150|
;;;59     spi1_unconfig();                   
0000a6  e8bd4010          POP      {r4,lr}
0000aa  f7ffbffe          B.W      spi1_unconfig
;;;60     }
;;;61     
                          ENDP

                  ad7705_read PROC
;;;63     //-----------------------------------------------
;;;64     void ad7705_read(char num)
0000ae  b570              PUSH     {r4-r6,lr}
;;;65     {
;;;66     //char temp;
;;;67     char i;
;;;68      
;;;69     LPC_GPIO0->FIODIR|=(1UL<<11);
0000b0  4c53              LDR      r4,|L1.512|
0000b2  4602              MOV      r2,r0                 ;65
0000b4  6820              LDR      r0,[r4,#0]
0000b6  f4406000          ORR      r0,r0,#0x800
0000ba  6020              STR      r0,[r4,#0]
;;;70     
;;;71     LPC_GPIO0->FIOPIN|=(1UL<<11);
0000bc  6960              LDR      r0,[r4,#0x14]
0000be  f4406000          ORR      r0,r0,#0x800
0000c2  6160              STR      r0,[r4,#0x14]
;;;72     spi1_ad7705_config();
0000c4  f7fffffe          BL       spi1_ad7705_config
;;;73     
;;;74     ///IO0CLR|=(1UL<<11);
;;;75     for(i=0;i<5;i++)LPC_GPIO0->FIOPIN&=~(1UL<<11);
0000c8  2100              MOVS     r1,#0
                  |L1.202|
0000ca  6960              LDR      r0,[r4,#0x14]
0000cc  f4206000          BIC      r0,r0,#0x800
0000d0  6160              STR      r0,[r4,#0x14]
0000d2  1c49              ADDS     r1,r1,#1
0000d4  b2c9              UXTB     r1,r1
0000d6  2905              CMP      r1,#5
0000d8  d3f7              BCC      |L1.202|
;;;76     ad7705_res=0;
0000da  4d4b              LDR      r5,|L1.520|
0000dc  2000              MOVS     r0,#0
;;;77     if(num==1) 
0000de  2a01              CMP      r2,#1
0000e0  80e8              STRH     r0,[r5,#6]            ;76
0000e2  d002              BEQ      |L1.234|
;;;78     	{
;;;79     	ad7705_res=spi1(0);
;;;80     	}
;;;81     else if(num==2)
0000e4  2a02              CMP      r2,#2
0000e6  d005              BEQ      |L1.244|
0000e8  e00e              B        |L1.264|
                  |L1.234|
0000ea  2000              MOVS     r0,#0                 ;79
0000ec  f7fffffe          BL       spi1
0000f0  80e8              STRH     r0,[r5,#6]            ;79
0000f2  e009              B        |L1.264|
                  |L1.244|
;;;82     	{
;;;83     	*(((char*)(&ad7705_res))+1)=spi1(0); 
0000f4  2000              MOVS     r0,#0
0000f6  f7fffffe          BL       spi1
0000fa  4d43              LDR      r5,|L1.520|
0000fc  1dad              ADDS     r5,r5,#6
0000fe  7068              STRB     r0,[r5,#1]
;;;84     	*(((char*)(&ad7705_res)))=spi1(0);
000100  2000              MOVS     r0,#0
000102  f7fffffe          BL       spi1
000106  7028              STRB     r0,[r5,#0]
                  |L1.264|
;;;85     	}	   
;;;86     
;;;87     ///IO0CLR|=(1UL<<11);
;;;88     
;;;89     for(i=0;i<5;i++)LPC_GPIO0->FIOPIN&=~(1UL<<11);
000108  2000              MOVS     r0,#0
                  |L1.266|
00010a  6961              LDR      r1,[r4,#0x14]
00010c  f4216100          BIC      r1,r1,#0x800
000110  6161              STR      r1,[r4,#0x14]
000112  1c40              ADDS     r0,r0,#1
000114  b2c0              UXTB     r0,r0
000116  2805              CMP      r0,#5
000118  d3f7              BCC      |L1.266|
;;;90     for(i=0;i<5;i++)LPC_GPIO0->FIOPIN|=(1UL<<11);
00011a  2000              MOVS     r0,#0
                  |L1.284|
00011c  6961              LDR      r1,[r4,#0x14]
00011e  f4416100          ORR      r1,r1,#0x800
000122  6161              STR      r1,[r4,#0x14]
000124  1c40              ADDS     r0,r0,#1
000126  b2c0              UXTB     r0,r0
000128  2805              CMP      r0,#5
00012a  d3f7              BCC      |L1.284|
;;;91     
;;;92     spi1_unconfig();                                            
00012c  e8bd4070          POP      {r4-r6,lr}
000130  f7ffbffe          B.W      spi1_unconfig
;;;93     }
;;;94     
                          ENDP

                  ad7705_drv PROC
;;;95     //-----------------------------------------------
;;;96     void ad7705_drv(void)
000134  e92d41f0          PUSH     {r4-r8,lr}
;;;97     {
;;;98     //__disable_irq();
;;;99     
;;;100    
;;;101    	ad7705_write(0x08);
000138  2008              MOVS     r0,#8
00013a  f7fffffe          BL       ad7705_write
;;;102    	ad7705_read(1);
00013e  2001              MOVS     r0,#1
000140  f7fffffe          BL       ad7705_read
;;;103    
;;;104    
;;;105    ///IO0DIR|=(1UL<<11);
;;;106    ///IO0DIR&=~(1UL<<10);
;;;107    
;;;108    if(!(ad7705_res&0x0001))
000144  4c30              LDR      r4,|L1.520|
000146  88e0              LDRH     r0,[r4,#6]  ; ad7705_res
000148  07c0              LSLS     r0,r0,#31
00014a  d153              BNE      |L1.500|
;;;109    	{
;;;110    	ad7705_write(0x38+b7705ch);
00014c  7820              LDRB     r0,[r4,#0]  ; b7705ch
00014e  3038              ADDS     r0,r0,#0x38
000150  b2c0              UXTB     r0,r0
000152  f7fffffe          BL       ad7705_write
;;;111    	ad7705_read(2);
000156  2002              MOVS     r0,#2
000158  f7fffffe          BL       ad7705_read
;;;112    	//ad7705_buff[0][0]=ad7705_res;
;;;113    
;;;114    	ad7705_plazma++;
00015c  8920              LDRH     r0,[r4,#8]  ; ad7705_plazma
;;;115    	
;;;116    
;;;117    	if(!b7705ch)
;;;118    		{
;;;119    		ad7705_buff[0][ad7705_wrk_cnt]=ad7705_res;
;;;120    		ad7705_res1=ad7705_res;
;;;121    		}
;;;122    	else if(b7705ch) 
;;;123    		{
;;;124    		ad7705_buff[1][ad7705_wrk_cnt]=ad7705_res;
;;;125    		ad7705_res2=ad7705_res;
;;;126    		} 
;;;127    
;;;128    	if(b7705ch)
;;;129    		{
;;;130    		b7705ch=0;
;;;131    		ad7705_wrk_cnt++;
;;;132    		if(ad7705_wrk_cnt>=16)ad7705_wrk_cnt=0;
;;;133    		
;;;134    		if((ad7705_wrk_cnt&0x01)==0)
;;;135    			{
;;;136    			unsigned temp_U;
;;;137    			char i,ii;
;;;138    
;;;139    			for(i=0;i<2;i++)
;;;140    				{
;;;141    				temp_U=0;
;;;142    				for(ii=0;ii<16;ii++)
;;;143    					{
;;;144    					temp_U+=(unsigned long)ad7705_buff[i][ii];
;;;145    					}
;;;146    				ad7705_buff_[i]=(unsigned short)(temp_U>>4);
00015e  f104020a          ADD      r2,r4,#0xa
000162  1c40              ADDS     r0,r0,#1              ;114
000164  8120              STRH     r0,[r4,#8]            ;114
000166  7821              LDRB     r1,[r4,#0]            ;117  ; b7705ch
000168  4828              LDR      r0,|L1.524|
00016a  b189              CBZ      r1,|L1.400|
00016c  7861              LDRB     r1,[r4,#1]            ;124  ; ad7705_wrk_cnt
00016e  88e3              LDRH     r3,[r4,#6]            ;124  ; ad7705_res
000170  eb000541          ADD      r5,r0,r1,LSL #1       ;124
000174  1c49              ADDS     r1,r1,#1              ;131
000176  842b              STRH     r3,[r5,#0x20]         ;124
000178  80a3              STRH     r3,[r4,#4]            ;125
00017a  2300              MOVS     r3,#0                 ;130
00017c  b2c9              UXTB     r1,r1                 ;131
00017e  7023              STRB     r3,[r4,#0]            ;130
000180  7061              STRB     r1,[r4,#1]            ;131
000182  2910              CMP      r1,#0x10              ;132
000184  d300              BCC      |L1.392|
000186  7063              STRB     r3,[r4,#1]            ;132
                  |L1.392|
000188  7861              LDRB     r1,[r4,#1]            ;134  ; ad7705_wrk_cnt
00018a  07c9              LSLS     r1,r1,#31             ;134
00018c  d008              BEQ      |L1.416|
00018e  e019              B        |L1.452|
                  |L1.400|
000190  7863              LDRB     r3,[r4,#1]            ;119  ; ad7705_wrk_cnt
000192  88e1              LDRH     r1,[r4,#6]            ;119  ; ad7705_res
000194  f8201013          STRH     r1,[r0,r3,LSL #1]     ;119
000198  8061              STRH     r1,[r4,#2]            ;120
;;;147    				}	
;;;148    			} 
;;;149    		}	
;;;150    		
;;;151    		
;;;152    	else b7705ch=1;
00019a  2001              MOVS     r0,#1
00019c  7020              STRB     r0,[r4,#0]
00019e  e011              B        |L1.452|
                  |L1.416|
0001a0  2500              MOVS     r5,#0                 ;141
0001a2  462b              MOV      r3,r5                 ;142
0001a4  eb001641          ADD      r6,r0,r1,LSL #5       ;144
                  |L1.424|
0001a8  f8367013          LDRH     r7,[r6,r3,LSL #1]     ;144
0001ac  1c5b              ADDS     r3,r3,#1              ;142
0001ae  b2db              UXTB     r3,r3                 ;142
0001b0  443d              ADD      r5,r5,r7              ;144
0001b2  2b10              CMP      r3,#0x10              ;142
0001b4  d3f8              BCC      |L1.424|
0001b6  092b              LSRS     r3,r5,#4              ;146
0001b8  f8223011          STRH     r3,[r2,r1,LSL #1]     ;146
0001bc  1c49              ADDS     r1,r1,#1              ;139
0001be  b2c9              UXTB     r1,r1                 ;139
0001c0  2902              CMP      r1,#2                 ;139
0001c2  d3ed              BCC      |L1.416|
                  |L1.452|
;;;153    	
;;;154    	//b7705ch=1;
;;;155    	ad7705_buff_[0]=ad7705_res1;
0001c4  8860              LDRH     r0,[r4,#2]  ; ad7705_res1
0001c6  8010              STRH     r0,[r2,#0]
;;;156        
;;;157    	if(!b7705ch) ad7705_write(0x20);
0001c8  7820              LDRB     r0,[r4,#0]  ; b7705ch
0001ca  b178              CBZ      r0,|L1.492|
;;;158    	else if(b7705ch) ad7705_write(0x21);
0001cc  f05f0021          MOVS.W   r0,#0x21
                  |L1.464|
0001d0  f7fffffe          BL       ad7705_write
;;;159    
;;;160    	ad7705_write(BIN8(1101)); 
0001d4  200d              MOVS     r0,#0xd
0001d6  f7fffffe          BL       ad7705_write
;;;161    
;;;162    	if(!b7705ch) ad7705_write(0x10);
0001da  7820              LDRB     r0,[r4,#0]  ; b7705ch
0001dc  b140              CBZ      r0,|L1.496|
;;;163    	else if(b7705ch) ad7705_write(0x11);
0001de  2011              MOVS     r0,#0x11
                  |L1.480|
0001e0  f7fffffe          BL       ad7705_write
;;;164    
;;;165    	ad7705_write(0x44);	
0001e4  e8bd41f0          POP      {r4-r8,lr}
0001e8  2044              MOVS     r0,#0x44
0001ea  e7fe              B        ad7705_write
                  |L1.492|
0001ec  2020              MOVS     r0,#0x20              ;157
0001ee  e7ef              B        |L1.464|
                  |L1.496|
0001f0  2010              MOVS     r0,#0x10              ;162
0001f2  e7f5              B        |L1.480|
                  |L1.500|
;;;166    	
;;;167    	}
;;;168    /*
;;;169    ad7705_write(0x20);
;;;170    ad7705_write(BIN8(1101));
;;;171    ad7705_write(0x10);
;;;172    ad7705_write(0x44);
;;;173    */
;;;174    //	__enable_irq();
;;;175    
;;;176    
;;;177    /*
;;;178    if(((ad7705_res1&0x0fff)==0x0000)||((ad7705_res1&0x0fff)==0x0fff)||((ad7705_res2&0x0fff)==0x0000)||((ad7705_res2&0x0fff)==0x0fff))
;;;179    {
;;;180    if(cnt_ad7705_vis<50)
;;;181    	{
;;;182    	cnt_ad7705_vis++;
;;;183    	if(cnt_ad7705_vis>=50) cnt_ad7705_vis_wrk=50;
;;;184    		
;;;185    	}
;;;186    }
;;;187    else cnt_ad7705_vis=0;
;;;188    
;;;189    if(cnt_ad7705_vis_wrk)
;;;190    	{
;;;191    	cnt_ad7705_vis_wrk--;
;;;192    
;;;193    	if(cnt_ad7705_vis_wrk==30)
;;;194    		{
;;;195    		ad7705_reset();
;;;196    		ad7705_write(0x20);
;;;197    		ad7705_write(BIN8(1101)); 
;;;198    		ad7705_write(0x10);
;;;199    		ad7705_write(0x44); 
;;;200    	     }
;;;201    	else if(cnt_ad7705_vis_wrk==20)
;;;202    		{              
;;;203    		ad7705_reset();
;;;204    		ad7705_write(0x20);
;;;205    		ad7705_write(BIN8(1101)); 
;;;206    		ad7705_write(0x10);
;;;207    		ad7705_write(0x44); 
;;;208    	     }	
;;;209    	else if(cnt_ad7705_vis_wrk==10)
;;;210    		{              
;;;211    		ad7705_reset();
;;;212    		ad7705_write(0x20);
;;;213    		ad7705_write(BIN8(1101)); 
;;;214    		ad7705_write(0x10);
;;;215    		ad7705_write(0x44); 
;;;216    	     }
;;;217    	else if(cnt_ad7705_vis_wrk==2)
;;;218    		{
;;;219    
;;;220    	     }		        		          
;;;221    	}         
;;;222    else 
;;;223    	{
;;;224    
;;;225    	}*/	
;;;226    	
;;;227    }
0001f4  e8bd81f0          POP      {r4-r8,pc}
;;;228    
                          ENDP

                  |L1.504|
                          DCD      0x4002c000
                  |L1.508|
                          DCD      0x40020000
                  |L1.512|
                          DCD      0x2009c000
                  |L1.516|
                          DCD      0x0001d4c0
                  |L1.520|
                          DCD      ||.data||
                  |L1.524|
                          DCD      ||.bss||

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  ad7705_drv_ PROC
;;;229    //-----------------------------------------------
;;;230    void ad7705_drv_(void)
000000  b510              PUSH     {r4,lr}
;;;231    {
;;;232    b7705ch++;
000002  4c14              LDR      r4,|L2.84|
000004  7820              LDRB     r0,[r4,#0]  ; b7705ch
000006  1c40              ADDS     r0,r0,#1
;;;233    b7705ch&=0x0001;
000008  f0000001          AND      r0,r0,#1
00000c  7020              STRB     r0,[r4,#0]
;;;234    
;;;235    ad7705_write(0x20+b7705ch);
00000e  3020              ADDS     r0,r0,#0x20
000010  f7fffffe          BL       ad7705_write
;;;236    ad7705_write(BIN8(1101));
000014  200d              MOVS     r0,#0xd
000016  f7fffffe          BL       ad7705_write
;;;237    ad7705_write(0x10+b7705ch);
00001a  7820              LDRB     r0,[r4,#0]  ; b7705ch
00001c  3010              ADDS     r0,r0,#0x10
00001e  b2c0              UXTB     r0,r0
000020  f7fffffe          BL       ad7705_write
;;;238    ad7705_write(0x44);
000024  2044              MOVS     r0,#0x44
000026  f7fffffe          BL       ad7705_write
                  |L2.42|
;;;239    
;;;240    
;;;241    ad7705_drv_loop:
;;;242    
;;;243    ad7705_write(0x08);
00002a  2008              MOVS     r0,#8
00002c  f7fffffe          BL       ad7705_write
;;;244    ad7705_read(1);
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       ad7705_read
;;;245    
;;;246    if(ad7705_res&0x0001)  goto ad7705_drv_loop;
000036  88e0              LDRH     r0,[r4,#6]  ; ad7705_res
000038  07c0              LSLS     r0,r0,#31
00003a  d1f6              BNE      |L2.42|
;;;247    else 
;;;248    	{
;;;249    	ad7705_write(0x38+b7705ch);
00003c  7820              LDRB     r0,[r4,#0]  ; b7705ch
00003e  3038              ADDS     r0,r0,#0x38
000040  b2c0              UXTB     r0,r0
000042  f7fffffe          BL       ad7705_write
;;;250    	ad7705_read(2);
000046  2002              MOVS     r0,#2
000048  f7fffffe          BL       ad7705_read
;;;251    	ad7705_plazma++;
00004c  8920              LDRH     r0,[r4,#8]  ; ad7705_plazma
00004e  1c40              ADDS     r0,r0,#1
000050  8120              STRH     r0,[r4,#8]
;;;252    	}
;;;253    	
;;;254    }
000052  bd10              POP      {r4,pc}
;;;255    
                          ENDP

                  |L2.84|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  ad7705_buff
                          %        64

                          AREA ||.data||, DATA, ALIGN=1

                  b7705ch
000000  00                DCB      0x00
                  ad7705_wrk_cnt
000001  00                DCB      0x00
                  ad7705_res1
000002  0000              DCB      0x00,0x00
                  ad7705_res2
000004  0000              DCB      0x00,0x00
                  ad7705_res
000006  0000              DCB      0x00,0x00
                  ad7705_plazma
000008  0000              DCB      0x00,0x00
                  ad7705_buff_
00000a  0000              DCB      0x00,0x00
00000c  0000              DCB      0x00,0x00

                          AREA ||area_number.7||, DATA, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.data||
                  cnt_ad7705_vis
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.8||, DATA, ALIGN=1

                          EXPORTAS ||area_number.8||, ||.data||
                  cnt_ad7705_vis_wrk
000000  0000              DCB      0x00,0x00
