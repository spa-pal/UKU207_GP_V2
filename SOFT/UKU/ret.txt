; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\ret.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\ret.d --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x -DEXT_BOARD_V_2 -DWG12232A --omf_browse=.\EXE\ret.crf ret.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ret_ind PROC
;;;12     //-----------------------------------------------
;;;13     void ret_ind(char r_i,char r_s,int r_c)
000000  4b1e              LDR      r3,|L1.124|
;;;14     {
;;;15     retcnt=r_c;
;;;16     retind=r_i;
000002  60da              STR      r2,[r3,#0xc]  ; retcnt
000004  7018              STRB     r0,[r3,#0]
;;;17     retsub=r_s;
000006  7059              STRB     r1,[r3,#1]
;;;18     }    
000008  4770              BX       lr
;;;19     
                          ENDP

                  ret_ind_hndl PROC
;;;20     //-----------------------------------------------
;;;21     void ret_ind_hndl(void)
00000a  481c              LDR      r0,|L1.124|
;;;22     {
;;;23     if(retcnt)
00000c  68c1              LDR      r1,[r0,#0xc]  ; retcnt
00000e  2900              CMP      r1,#0
000010  d00d              BEQ      |L1.46|
;;;24     	{
;;;25     	if((--retcnt)==0)
000012  1e49              SUBS     r1,r1,#1
000014  60c1              STR      r1,[r0,#0xc]  ; retcnt
000016  d10a              BNE      |L1.46|
;;;26     		{
;;;27      		ind=(i_enum)retind;
000018  4919              LDR      r1,|L1.128|
00001a  7802              LDRB     r2,[r0,#0]  ; retind
00001c  700a              STRB     r2,[r1,#0]
;;;28        		sub_ind=retsub;
00001e  7842              LDRB     r2,[r0,#1]  ; retsub
000020  704a              STRB     r2,[r1,#1]
;;;29        		index_set=sub_ind;
000022  710a              STRB     r2,[r1,#4]
;;;30        		f0=0;
000024  2100              MOVS     r1,#0
000026  70c1              STRB     r1,[r0,#3]
;;;31        		fc0=0;
000028  7101              STRB     r1,[r0,#4]
;;;32        		f1=0;
00002a  7141              STRB     r1,[r0,#5]
;;;33        		fc1=0;
00002c  7181              STRB     r1,[r0,#6]
                  |L1.46|
;;;34     	 	}
;;;35          }
;;;36     }  
00002e  4770              BX       lr
;;;37     
                          ENDP

                  ret_ind_sec PROC
;;;40     //---------------------------------------------
;;;41     void ret_ind_sec(char r_i,int r_c)
000030  4a12              LDR      r2,|L1.124|
;;;42     {
;;;43     retcntsec=r_c;
;;;44     retindsec=r_i;
000032  6111              STR      r1,[r2,#0x10]  ; retcntsec
000034  7090              STRB     r0,[r2,#2]
;;;45     }
000036  4770              BX       lr
;;;46     
                          ENDP

                  ret_ind_sec_hndl PROC
;;;47     //-----------------------------------------------
;;;48     void ret_ind_sec_hndl(void)
000038  4810              LDR      r0,|L1.124|
;;;49     {
;;;50     if(retcntsec)
00003a  6901              LDR      r1,[r0,#0x10]  ; retcntsec
00003c  2900              CMP      r1,#0
00003e  d00b              BEQ      |L1.88|
;;;51      	{
;;;52     	if((--retcntsec)==0)
000040  1e49              SUBS     r1,r1,#1
000042  6101              STR      r1,[r0,#0x10]  ; retcntsec
000044  d108              BNE      |L1.88|
;;;53     	 	{
;;;54      		ind=(i_enum)retindsec;
000046  4a0e              LDR      r2,|L1.128|
000048  7881              LDRB     r1,[r0,#2]  ; retindsec
00004a  7011              STRB     r1,[r2,#0]
;;;55      		sub_ind=0;
00004c  2100              MOVS     r1,#0
00004e  7051              STRB     r1,[r2,#1]
;;;56       		f0=0;
000050  70c1              STRB     r1,[r0,#3]
;;;57        		fc0=0;
000052  7101              STRB     r1,[r0,#4]
;;;58        		f1=0;
000054  7141              STRB     r1,[r0,#5]
;;;59        		fc1=0; 		
000056  7181              STRB     r1,[r0,#6]
                  |L1.88|
;;;60     	 	}
;;;61        	}		
;;;62     }
000058  4770              BX       lr
;;;63     
                          ENDP

                  ||ret|| PROC
;;;64     //-----------------------------------------------
;;;65     void ret(short duty)
00005a  4908              LDR      r1,|L1.124|
;;;66     {
;;;67     ret_duty=duty;
00005c  8108              STRH     r0,[r1,#8]
;;;68     }
00005e  4770              BX       lr
;;;69     
                          ENDP

                  ret_hndl PROC
;;;70     //-----------------------------------------------
;;;71     void ret_hndl(void)
000060  4806              LDR      r0,|L1.124|
;;;72     {
;;;73     if(ret_duty)
000062  f9b01008          LDRSH    r1,[r0,#8]  ; ret_duty
000066  2900              CMP      r1,#0
000068  d007              BEQ      |L1.122|
;;;74          {
;;;75          ret_duty--;
00006a  1e49              SUBS     r1,r1,#1
00006c  b209              SXTH     r1,r1
00006e  8101              STRH     r1,[r0,#8]
;;;76          if(!ret_duty)
000070  2900              CMP      r1,#0
000072  d102              BNE      |L1.122|
;;;77               {
;;;78               tree_down(0,0);
000074  4608              MOV      r0,r1
000076  f7ffbffe          B.W      tree_down
                  |L1.122|
;;;79               }
;;;80          }
;;;81     }
00007a  4770              BX       lr
;;;82     
                          ENDP

                  |L1.124|
                          DCD      ||.data||
                  |L1.128|
                          DCD      a_ind

                          AREA ||.data||, DATA, ALIGN=2

                  retind
000000  00                DCB      0x00
                  retsub
000001  00                DCB      0x00
                  retindsec
000002  00                DCB      0x00
                  ||f0||
000003  00                DCB      0x00
                  ||fc0||
000004  00                DCB      0x00
                  ||f1||
000005  00                DCB      0x00
                  ||fc1||
000006  0000              DCB      0x00,0x00
                  ret_duty
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  retcnt
                          DCD      0x00000000
                  retcntsec
                          DCD      0x00000000
